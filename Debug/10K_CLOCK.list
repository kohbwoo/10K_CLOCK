
10K_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002da4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee8  08002ee8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ee8  08002ee8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ee8  08002ee8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  2000000c  08002efc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08002efc  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f614  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ce  00000000  00000000  0002f649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00031918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00032890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d14  00000000  00000000  00033730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff1b  00000000  00000000  0004b444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bdbc  00000000  00000000  0005b35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e711b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004130  00000000  00000000  000e7170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e98 	.word	0x08002e98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002e98 	.word	0x08002e98

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbbe 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f87e 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9be 	bl	80004d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f970 	bl	8000440 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000160:	f000 f998 	bl	8000494 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000164:	f000 f920 	bl	80003a8 <MX_TIM2_Init>
  MX_RTC_Init();
 8000168:	f000 f8d4 	bl	8000314 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */-
  HAL_TIM_Base_Start_IT(&htim2);//타이머 활성화
 800016c:	4836      	ldr	r0, [pc, #216]	; (8000248 <main+0xfc>)
 800016e:	f002 f981 	bl	8002474 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, SET);//LOW출력
 8000172:	2201      	movs	r2, #1
 8000174:	2120      	movs	r1, #32
 8000176:	4835      	ldr	r0, [pc, #212]	; (800024c <main+0x100>)
 8000178:	f000 fec2 	bl	8000f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH0_Pin, RESET);//HIGH 출력
 800017c:	2200      	movs	r2, #0
 800017e:	2101      	movs	r1, #1
 8000180:	4832      	ldr	r0, [pc, #200]	; (800024c <main+0x100>)
 8000182:	f000 febd 	bl	8000f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH1_Pin, SET);
 8000186:	2201      	movs	r2, #1
 8000188:	2102      	movs	r1, #2
 800018a:	4830      	ldr	r0, [pc, #192]	; (800024c <main+0x100>)
 800018c:	f000 feb8 	bl	8000f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH2_Pin, SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2104      	movs	r1, #4
 8000194:	482d      	ldr	r0, [pc, #180]	; (800024c <main+0x100>)
 8000196:	f000 feb3 	bl	8000f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH3_Pin, SET);
 800019a:	2201      	movs	r2, #1
 800019c:	2108      	movs	r1, #8
 800019e:	482b      	ldr	r0, [pc, #172]	; (800024c <main+0x100>)
 80001a0:	f000 feae 	bl	8000f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH4_Pin, SET);
 80001a4:	2201      	movs	r2, #1
 80001a6:	2110      	movs	r1, #16
 80001a8:	4828      	ldr	r0, [pc, #160]	; (800024c <main+0x100>)
 80001aa:	f000 fea9 	bl	8000f00 <HAL_GPIO_WritePin>
//

	  //HAL_GPIO_TogglePin(LATCH0_GPIO_Port, LATCH0_Pin);
	  //HAL_GPIO_TogglePin(OE_GPIO_Port, OE_Pin);

	  HAL_GPIO_TogglePin(GPIOB, DB0_Pin);
 80001ae:	2101      	movs	r1, #1
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <main+0x104>)
 80001b2:	f000 febd 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB1_Pin);
 80001b6:	2102      	movs	r1, #2
 80001b8:	4825      	ldr	r0, [pc, #148]	; (8000250 <main+0x104>)
 80001ba:	f000 feb9 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB2_Pin);
 80001be:	2104      	movs	r1, #4
 80001c0:	4823      	ldr	r0, [pc, #140]	; (8000250 <main+0x104>)
 80001c2:	f000 feb5 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB3_Pin);
 80001c6:	2108      	movs	r1, #8
 80001c8:	4821      	ldr	r0, [pc, #132]	; (8000250 <main+0x104>)
 80001ca:	f000 feb1 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB4_Pin);
 80001ce:	2110      	movs	r1, #16
 80001d0:	481f      	ldr	r0, [pc, #124]	; (8000250 <main+0x104>)
 80001d2:	f000 fead 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB5_Pin);
 80001d6:	2120      	movs	r1, #32
 80001d8:	481d      	ldr	r0, [pc, #116]	; (8000250 <main+0x104>)
 80001da:	f000 fea9 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB6_Pin);
 80001de:	2140      	movs	r1, #64	; 0x40
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <main+0x104>)
 80001e2:	f000 fea5 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB7_Pin);
 80001e6:	2180      	movs	r1, #128	; 0x80
 80001e8:	4819      	ldr	r0, [pc, #100]	; (8000250 <main+0x104>)
 80001ea:	f000 fea1 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB8_Pin);
 80001ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f2:	4817      	ldr	r0, [pc, #92]	; (8000250 <main+0x104>)
 80001f4:	f000 fe9c 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB9_Pin);
 80001f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001fc:	4814      	ldr	r0, [pc, #80]	; (8000250 <main+0x104>)
 80001fe:	f000 fe97 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB10_Pin);
 8000202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000206:	4812      	ldr	r0, [pc, #72]	; (8000250 <main+0x104>)
 8000208:	f000 fe92 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB11_Pin);
 800020c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <main+0x104>)
 8000212:	f000 fe8d 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB12_Pin);
 8000216:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800021a:	480d      	ldr	r0, [pc, #52]	; (8000250 <main+0x104>)
 800021c:	f000 fe88 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB13_Pin);
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <main+0x104>)
 8000226:	f000 fe83 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB14_Pin);
 800022a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <main+0x104>)
 8000230:	f000 fe7e 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, DB15_Pin);
 8000234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000238:	4805      	ldr	r0, [pc, #20]	; (8000250 <main+0x104>)
 800023a:	f000 fe79 	bl	8000f30 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800023e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000242:	f000 fba7 	bl	8000994 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, DB0_Pin);
 8000246:	e7b2      	b.n	80001ae <main+0x62>
 8000248:	20000084 	.word	0x20000084
 800024c:	40010800 	.word	0x40010800
 8000250:	40010c00 	.word	0x40010c00

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b094      	sub	sp, #80	; 0x50
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025e:	2228      	movs	r2, #40	; 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fe10 	bl	8002e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000284:	2309      	movs	r3, #9
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 ff6e 	bl	8001190 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ba:	f000 f9b3 	bl	8000624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 f9d8 	bl	8001690 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002e6:	f000 f99d 	bl	8000624 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80002ea:	2311      	movs	r3, #17
 80002ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002f4:	2300      	movs	r3, #0
 80002f6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fb62 	bl	80019c4 <HAL_RCCEx_PeriphCLKConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000306:	f000 f98d 	bl	8000624 <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3750      	adds	r7, #80	; 0x50
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2100      	movs	r1, #0
 800031e:	460a      	mov	r2, r1
 8000320:	801a      	strh	r2, [r3, #0]
 8000322:	460a      	mov	r2, r1
 8000324:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000326:	2300      	movs	r3, #0
 8000328:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800032a:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <MX_RTC_Init+0x8c>)
 800032c:	4a1d      	ldr	r2, [pc, #116]	; (80003a4 <MX_RTC_Init+0x90>)
 800032e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_RTC_Init+0x8c>)
 8000332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000336:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_RTC_Init+0x8c>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800033e:	4818      	ldr	r0, [pc, #96]	; (80003a0 <MX_RTC_Init+0x8c>)
 8000340:	f001 fcba 	bl	8001cb8 <HAL_RTC_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800034a:	f000 f96b 	bl	8000624 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2200      	movs	r2, #0
 800035e:	4619      	mov	r1, r3
 8000360:	480f      	ldr	r0, [pc, #60]	; (80003a0 <MX_RTC_Init+0x8c>)
 8000362:	f001 fd3f 	bl	8001de4 <HAL_RTC_SetTime>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800036c:	f000 f95a 	bl	8000624 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000370:	2301      	movs	r3, #1
 8000372:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000374:	2301      	movs	r3, #1
 8000376:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8000378:	2301      	movs	r3, #1
 800037a:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000380:	463b      	mov	r3, r7
 8000382:	2200      	movs	r2, #0
 8000384:	4619      	mov	r1, r3
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MX_RTC_Init+0x8c>)
 8000388:	f001 fdc4 	bl	8001f14 <HAL_RTC_SetDate>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000392:	f000 f947 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000070 	.word	0x20000070
 80003a4:	40002800 	.word	0x40002800

080003a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003bc:	463b      	mov	r3, r7
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003c4:	4b1d      	ldr	r3, [pc, #116]	; (800043c <MX_TIM2_Init+0x94>)
 80003c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_TIM2_Init+0x94>)
 80003ce:	2209      	movs	r2, #9
 80003d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <MX_TIM2_Init+0x94>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 360-1;
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_TIM2_Init+0x94>)
 80003da:	f240 1267 	movw	r2, #359	; 0x167
 80003de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <MX_TIM2_Init+0x94>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_TIM2_Init+0x94>)
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ec:	4813      	ldr	r0, [pc, #76]	; (800043c <MX_TIM2_Init+0x94>)
 80003ee:	f001 fff1 	bl	80023d4 <HAL_TIM_Base_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003f8:	f000 f914 	bl	8000624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	4619      	mov	r1, r3
 8000408:	480c      	ldr	r0, [pc, #48]	; (800043c <MX_TIM2_Init+0x94>)
 800040a:	f002 f98d 	bl	8002728 <HAL_TIM_ConfigClockSource>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000414:	f000 f906 	bl	8000624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000418:	2300      	movs	r3, #0
 800041a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000420:	463b      	mov	r3, r7
 8000422:	4619      	mov	r1, r3
 8000424:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_TIM2_Init+0x94>)
 8000426:	f002 fb5f 	bl	8002ae8 <HAL_TIMEx_MasterConfigSynchronization>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000430:	f000 f8f8 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000084 	.word	0x20000084

08000440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <MX_USART1_UART_Init+0x50>)
 8000448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <MX_USART1_UART_Init+0x4c>)
 800044c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_USART1_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000466:	220c      	movs	r2, #12
 8000468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_USART1_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000478:	f002 fba6 	bl	8002bc8 <HAL_UART_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000482:	f000 f8cf 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	2000002c 	.word	0x2000002c
 8000490:	40013800 	.word	0x40013800

08000494 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <MX_USB_PCD_Init+0x40>)
 800049c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004a0:	2208      	movs	r2, #8
 80004a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004a6:	2202      	movs	r2, #2
 80004a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004be:	f000 fd50 	bl	8000f62 <HAL_PCD_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80004c8:	f000 f8ac 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	200000cc 	.word	0x200000cc
 80004d4:	40005c00 	.word	0x40005c00

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ec:	4b3e      	ldr	r3, [pc, #248]	; (80005e8 <MX_GPIO_Init+0x110>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a3d      	ldr	r2, [pc, #244]	; (80005e8 <MX_GPIO_Init+0x110>)
 80004f2:	f043 0310 	orr.w	r3, r3, #16
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b3b      	ldr	r3, [pc, #236]	; (80005e8 <MX_GPIO_Init+0x110>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0310 	and.w	r3, r3, #16
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000504:	4b38      	ldr	r3, [pc, #224]	; (80005e8 <MX_GPIO_Init+0x110>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a37      	ldr	r2, [pc, #220]	; (80005e8 <MX_GPIO_Init+0x110>)
 800050a:	f043 0320 	orr.w	r3, r3, #32
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b35      	ldr	r3, [pc, #212]	; (80005e8 <MX_GPIO_Init+0x110>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0320 	and.w	r3, r3, #32
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b32      	ldr	r3, [pc, #200]	; (80005e8 <MX_GPIO_Init+0x110>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a31      	ldr	r2, [pc, #196]	; (80005e8 <MX_GPIO_Init+0x110>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b2f      	ldr	r3, [pc, #188]	; (80005e8 <MX_GPIO_Init+0x110>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000534:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <MX_GPIO_Init+0x110>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a2b      	ldr	r2, [pc, #172]	; (80005e8 <MX_GPIO_Init+0x110>)
 800053a:	f043 0308 	orr.w	r3, r3, #8
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <MX_GPIO_Init+0x110>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0308 	and.w	r3, r3, #8
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000552:	4826      	ldr	r0, [pc, #152]	; (80005ec <MX_GPIO_Init+0x114>)
 8000554:	f000 fcd4 	bl	8000f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LATCH0_Pin|LATCH1_Pin|LATCH2_Pin|LATCH3_Pin
 8000558:	2200      	movs	r2, #0
 800055a:	213f      	movs	r1, #63	; 0x3f
 800055c:	4824      	ldr	r0, [pc, #144]	; (80005f0 <MX_GPIO_Init+0x118>)
 800055e:	f000 fccf 	bl	8000f00 <HAL_GPIO_WritePin>
                          |LATCH4_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB0_Pin|DB1_Pin|DB2_Pin|DB10_Pin
 8000562:	2200      	movs	r2, #0
 8000564:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000568:	4822      	ldr	r0, [pc, #136]	; (80005f4 <MX_GPIO_Init+0x11c>)
 800056a:	f000 fcc9 	bl	8000f00 <HAL_GPIO_WritePin>
                          |DB11_Pin|DB12_Pin|DB13_Pin|DB14_Pin
                          |DB15_Pin|DB3_Pin|DB4_Pin|DB5_Pin
                          |DB6_Pin|DB7_Pin|DB8_Pin|DB9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800056e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	2301      	movs	r3, #1
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	2302      	movs	r3, #2
 800057e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4619      	mov	r1, r3
 8000586:	4819      	ldr	r0, [pc, #100]	; (80005ec <MX_GPIO_Init+0x114>)
 8000588:	f000 fb36 	bl	8000bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LATCH0_Pin LATCH1_Pin LATCH2_Pin LATCH3_Pin
                           LATCH4_Pin OE_Pin */
  GPIO_InitStruct.Pin = LATCH0_Pin|LATCH1_Pin|LATCH2_Pin|LATCH3_Pin
 800058c:	233f      	movs	r3, #63	; 0x3f
 800058e:	613b      	str	r3, [r7, #16]
                          |LATCH4_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2302      	movs	r3, #2
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	4619      	mov	r1, r3
 80005a2:	4813      	ldr	r0, [pc, #76]	; (80005f0 <MX_GPIO_Init+0x118>)
 80005a4:	f000 fb28 	bl	8000bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 80005a8:	f248 13c0 	movw	r3, #33216	; 0x81c0
 80005ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4619      	mov	r1, r3
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <MX_GPIO_Init+0x118>)
 80005be:	f000 fb1b 	bl	8000bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB0_Pin DB1_Pin DB2_Pin DB10_Pin
                           DB11_Pin DB12_Pin DB13_Pin DB14_Pin
                           DB15_Pin DB3_Pin DB4_Pin DB5_Pin
                           DB6_Pin DB7_Pin DB8_Pin DB9_Pin */
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB10_Pin
 80005c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c6:	613b      	str	r3, [r7, #16]
                          |DB11_Pin|DB12_Pin|DB13_Pin|DB14_Pin
                          |DB15_Pin|DB3_Pin|DB4_Pin|DB5_Pin
                          |DB6_Pin|DB7_Pin|DB8_Pin|DB9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <MX_GPIO_Init+0x11c>)
 80005dc:	f000 fb0c 	bl	8000bf8 <HAL_GPIO_Init>

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40011000 	.word	0x40011000
 80005f0:	40010800 	.word	0x40010800
 80005f4:	40010c00 	.word	0x40010c00

080005f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000608:	d105      	bne.n	8000616 <HAL_TIM_PeriodElapsedCallback+0x1e>
		++timer_Check;
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000614:	701a      	strb	r2, [r3, #0]

	}


}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	20000028 	.word	0x20000028

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062c:	e7fe      	b.n	800062c <Error_Handler+0x8>
	...

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <HAL_MspInit+0x6c>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <HAL_MspInit+0x6c>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <HAL_MspInit+0x6c>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <HAL_MspInit+0x6c>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <HAL_MspInit+0x6c>)
 8000654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_MspInit+0x6c>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	2005      	movs	r0, #5
 800066c:	f000 fa8d 	bl	8000b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000670:	2005      	movs	r0, #5
 8000672:	f000 faa6 	bl	8000bc2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_MspInit+0x70>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <HAL_MspInit+0x70>)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010000 	.word	0x40010000

080006a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <HAL_RTC_MspInit+0x3c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d110      	bne.n	80006d8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80006b6:	f000 fd5f 	bl	8001178 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <HAL_RTC_MspInit+0x40>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <HAL_RTC_MspInit+0x40>)
 80006c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <HAL_RTC_MspInit+0x40>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_RTC_MspInit+0x44>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40002800 	.word	0x40002800
 80006e4:	40021000 	.word	0x40021000
 80006e8:	4242043c 	.word	0x4242043c

080006ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006fc:	d113      	bne.n	8000726 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_TIM_Base_MspInit+0x44>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <HAL_TIM_Base_MspInit+0x44>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_TIM_Base_MspInit+0x44>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	201c      	movs	r0, #28
 800071c:	f000 fa35 	bl	8000b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000720:	201c      	movs	r0, #28
 8000722:	f000 fa4e 	bl	8000bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <HAL_UART_MspInit+0x8c>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d131      	bne.n	80007b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_MspInit+0x90>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <HAL_UART_MspInit+0x90>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <HAL_UART_MspInit+0x90>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_UART_MspInit+0x90>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <HAL_UART_MspInit+0x90>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_UART_MspInit+0x90>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin;
 8000784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <HAL_UART_MspInit+0x94>)
 800079a:	f000 fa2d 	bl	8000bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_RX_Pin;
 800079e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <HAL_UART_MspInit+0x94>)
 80007b4:	f000 fa20 	bl	8000bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40013800 	.word	0x40013800
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800

080007cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a09      	ldr	r2, [pc, #36]	; (8000800 <HAL_PCD_MspInit+0x34>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d10b      	bne.n	80007f6 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_PCD_MspInit+0x38>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_PCD_MspInit+0x38>)
 80007e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_PCD_MspInit+0x38>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	40005c00 	.word	0x40005c00
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084e:	f000 f885 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}

08000856 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
	...

08000864 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <TIM2_IRQHandler+0x10>)
 800086a:	f001 fe55 	bl	8002518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000084 	.word	0x20000084

08000878 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	; (80008c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008aa:	f7ff ffe5 	bl	8000878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ae:	f002 fac7 	bl	8002e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fc4b 	bl	800014c <main>
  bx lr
 80008b6:	4770      	bx	lr
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c0:	08002ef0 	.word	0x08002ef0
  ldr r2, =_sbss
 80008c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c8:	200003bc 	.word	0x200003bc

080008cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_2_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_Init+0x28>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_Init+0x28>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 f947 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e6:	200f      	movs	r0, #15
 80008e8:	f000 f808 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff fea0 	bl	8000630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40022000 	.word	0x40022000

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x54>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f95f 	bl	8000bde <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e00e      	b.n	8000948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d80a      	bhi.n	8000946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000938:	f000 f927 	bl	8000b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <HAL_InitTick+0x5c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a03      	ldr	r2, [pc, #12]	; (800097c <HAL_IncTick+0x20>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000008 	.word	0x20000008
 800097c:	200003b8 	.word	0x200003b8

08000980 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	; (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	200003b8 	.word	0x200003b8

08000994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff fff0 	bl	8000980 <HAL_GetTick>
 80009a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009ac:	d005      	beq.n	80009ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_Delay+0x44>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ba:	bf00      	nop
 80009bc:	f7ff ffe0 	bl	8000980 <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d8f7      	bhi.n	80009bc <HAL_Delay+0x28>
  {
  }
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4906      	ldr	r1, [pc, #24]	; (8000a74 <__NVIC_EnableIRQ+0x34>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db0a      	blt.n	8000aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <__NVIC_SetPriority+0x4c>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa0:	e00a      	b.n	8000ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4908      	ldr	r1, [pc, #32]	; (8000ac8 <__NVIC_SetPriority+0x50>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	761a      	strb	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43d9      	mvns	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	4313      	orrs	r3, r2
         );
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3724      	adds	r7, #36	; 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	f7ff ff90 	bl	8000a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff2d 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9c:	f7ff ff42 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	6978      	ldr	r0, [r7, #20]
 8000ba8:	f7ff ff90 	bl	8000acc <NVIC_EncodePriority>
 8000bac:	4602      	mov	r2, r0
 8000bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff5f 	bl	8000a78 <__NVIC_SetPriority>
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff35 	bl	8000a40 <__NVIC_EnableIRQ>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ffa2 	bl	8000b30 <SysTick_Config>
 8000bec:	4603      	mov	r3, r0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b08b      	sub	sp, #44	; 0x2c
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0a:	e169      	b.n	8000ee0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	f040 8158 	bne.w	8000eda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	4a9a      	ldr	r2, [pc, #616]	; (8000e98 <HAL_GPIO_Init+0x2a0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d05e      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
 8000c34:	4a98      	ldr	r2, [pc, #608]	; (8000e98 <HAL_GPIO_Init+0x2a0>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d875      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c3a:	4a98      	ldr	r2, [pc, #608]	; (8000e9c <HAL_GPIO_Init+0x2a4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d058      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
 8000c40:	4a96      	ldr	r2, [pc, #600]	; (8000e9c <HAL_GPIO_Init+0x2a4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d86f      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c46:	4a96      	ldr	r2, [pc, #600]	; (8000ea0 <HAL_GPIO_Init+0x2a8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d052      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
 8000c4c:	4a94      	ldr	r2, [pc, #592]	; (8000ea0 <HAL_GPIO_Init+0x2a8>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d869      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c52:	4a94      	ldr	r2, [pc, #592]	; (8000ea4 <HAL_GPIO_Init+0x2ac>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d04c      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
 8000c58:	4a92      	ldr	r2, [pc, #584]	; (8000ea4 <HAL_GPIO_Init+0x2ac>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d863      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c5e:	4a92      	ldr	r2, [pc, #584]	; (8000ea8 <HAL_GPIO_Init+0x2b0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d046      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
 8000c64:	4a90      	ldr	r2, [pc, #576]	; (8000ea8 <HAL_GPIO_Init+0x2b0>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d85d      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c6a:	2b12      	cmp	r3, #18
 8000c6c:	d82a      	bhi.n	8000cc4 <HAL_GPIO_Init+0xcc>
 8000c6e:	2b12      	cmp	r3, #18
 8000c70:	d859      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <HAL_GPIO_Init+0x80>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000cf3 	.word	0x08000cf3
 8000c7c:	08000ccd 	.word	0x08000ccd
 8000c80:	08000cdf 	.word	0x08000cdf
 8000c84:	08000d21 	.word	0x08000d21
 8000c88:	08000d27 	.word	0x08000d27
 8000c8c:	08000d27 	.word	0x08000d27
 8000c90:	08000d27 	.word	0x08000d27
 8000c94:	08000d27 	.word	0x08000d27
 8000c98:	08000d27 	.word	0x08000d27
 8000c9c:	08000d27 	.word	0x08000d27
 8000ca0:	08000d27 	.word	0x08000d27
 8000ca4:	08000d27 	.word	0x08000d27
 8000ca8:	08000d27 	.word	0x08000d27
 8000cac:	08000d27 	.word	0x08000d27
 8000cb0:	08000d27 	.word	0x08000d27
 8000cb4:	08000d27 	.word	0x08000d27
 8000cb8:	08000d27 	.word	0x08000d27
 8000cbc:	08000cd5 	.word	0x08000cd5
 8000cc0:	08000ce9 	.word	0x08000ce9
 8000cc4:	4a79      	ldr	r2, [pc, #484]	; (8000eac <HAL_GPIO_Init+0x2b4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d013      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cca:	e02c      	b.n	8000d26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	623b      	str	r3, [r7, #32]
          break;
 8000cd2:	e029      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	623b      	str	r3, [r7, #32]
          break;
 8000cdc:	e024      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	3308      	adds	r3, #8
 8000ce4:	623b      	str	r3, [r7, #32]
          break;
 8000ce6:	e01f      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	330c      	adds	r3, #12
 8000cee:	623b      	str	r3, [r7, #32]
          break;
 8000cf0:	e01a      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	623b      	str	r3, [r7, #32]
          break;
 8000cfe:	e013      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d105      	bne.n	8000d14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d08:	2308      	movs	r3, #8
 8000d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	611a      	str	r2, [r3, #16]
          break;
 8000d12:	e009      	b.n	8000d28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d14:	2308      	movs	r3, #8
 8000d16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	615a      	str	r2, [r3, #20]
          break;
 8000d1e:	e003      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
          break;
 8000d24:	e000      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          break;
 8000d26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2bff      	cmp	r3, #255	; 0xff
 8000d2c:	d801      	bhi.n	8000d32 <HAL_GPIO_Init+0x13a>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	e001      	b.n	8000d36 <HAL_GPIO_Init+0x13e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3304      	adds	r3, #4
 8000d36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	2bff      	cmp	r3, #255	; 0xff
 8000d3c:	d802      	bhi.n	8000d44 <HAL_GPIO_Init+0x14c>
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	e002      	b.n	8000d4a <HAL_GPIO_Init+0x152>
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	3b08      	subs	r3, #8
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	210f      	movs	r1, #15
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	6a39      	ldr	r1, [r7, #32]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	431a      	orrs	r2, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 80b1 	beq.w	8000eda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d78:	4b4d      	ldr	r3, [pc, #308]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a4c      	ldr	r2, [pc, #304]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b4a      	ldr	r3, [pc, #296]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d90:	4a48      	ldr	r2, [pc, #288]	; (8000eb4 <HAL_GPIO_Init+0x2bc>)
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	3302      	adds	r3, #2
 8000d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a40      	ldr	r2, [pc, #256]	; (8000eb8 <HAL_GPIO_Init+0x2c0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d013      	beq.n	8000de4 <HAL_GPIO_Init+0x1ec>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a3f      	ldr	r2, [pc, #252]	; (8000ebc <HAL_GPIO_Init+0x2c4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d00d      	beq.n	8000de0 <HAL_GPIO_Init+0x1e8>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3e      	ldr	r2, [pc, #248]	; (8000ec0 <HAL_GPIO_Init+0x2c8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d007      	beq.n	8000ddc <HAL_GPIO_Init+0x1e4>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a3d      	ldr	r2, [pc, #244]	; (8000ec4 <HAL_GPIO_Init+0x2cc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d101      	bne.n	8000dd8 <HAL_GPIO_Init+0x1e0>
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e006      	b.n	8000de6 <HAL_GPIO_Init+0x1ee>
 8000dd8:	2304      	movs	r3, #4
 8000dda:	e004      	b.n	8000de6 <HAL_GPIO_Init+0x1ee>
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e002      	b.n	8000de6 <HAL_GPIO_Init+0x1ee>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <HAL_GPIO_Init+0x1ee>
 8000de4:	2300      	movs	r3, #0
 8000de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de8:	f002 0203 	and.w	r2, r2, #3
 8000dec:	0092      	lsls	r2, r2, #2
 8000dee:	4093      	lsls	r3, r2
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000df6:	492f      	ldr	r1, [pc, #188]	; (8000eb4 <HAL_GPIO_Init+0x2bc>)
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e10:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	492c      	ldr	r1, [pc, #176]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	4928      	ldr	r1, [pc, #160]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d006      	beq.n	8000e46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	4922      	ldr	r1, [pc, #136]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	491e      	ldr	r1, [pc, #120]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d006      	beq.n	8000e6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	4918      	ldr	r1, [pc, #96]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	608b      	str	r3, [r1, #8]
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	4914      	ldr	r1, [pc, #80]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d021      	beq.n	8000ecc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	60cb      	str	r3, [r1, #12]
 8000e94:	e021      	b.n	8000eda <HAL_GPIO_Init+0x2e2>
 8000e96:	bf00      	nop
 8000e98:	10320000 	.word	0x10320000
 8000e9c:	10310000 	.word	0x10310000
 8000ea0:	10220000 	.word	0x10220000
 8000ea4:	10210000 	.word	0x10210000
 8000ea8:	10120000 	.word	0x10120000
 8000eac:	10110000 	.word	0x10110000
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010000 	.word	0x40010000
 8000eb8:	40010800 	.word	0x40010800
 8000ebc:	40010c00 	.word	0x40010c00
 8000ec0:	40011000 	.word	0x40011000
 8000ec4:	40011400 	.word	0x40011400
 8000ec8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	4909      	ldr	r1, [pc, #36]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	3301      	adds	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f47f ae8e 	bne.w	8000c0c <HAL_GPIO_Init+0x14>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	372c      	adds	r7, #44	; 0x2c
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f10:	787b      	ldrb	r3, [r7, #1]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f1c:	e003      	b.n	8000f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	041a      	lsls	r2, r3, #16
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	611a      	str	r2, [r3, #16]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4013      	ands	r3, r2
 8000f48:	041a      	lsls	r2, r3, #16
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43d9      	mvns	r1, r3
 8000f4e:	887b      	ldrh	r3, [r7, #2]
 8000f50:	400b      	ands	r3, r1
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	611a      	str	r2, [r3, #16]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f64:	b08b      	sub	sp, #44	; 0x2c
 8000f66:	af06      	add	r7, sp, #24
 8000f68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e0fd      	b.n	8001170 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d106      	bne.n	8000f8e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff fc1f 	bl	80007cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2203      	movs	r2, #3
 8000f92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 ff00 	bl	8002da0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	687e      	ldr	r6, [r7, #4]
 8000fa8:	466d      	mov	r5, sp
 8000faa:	f106 0410 	add.w	r4, r6, #16
 8000fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	602b      	str	r3, [r5, #0]
 8000fb6:	1d33      	adds	r3, r6, #4
 8000fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f001 fee0 	bl	8002d80 <USB_CoreInit>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e0ce      	b.n	8001170 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fefb 	bl	8002dd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e04c      	b.n	800107e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	b298      	uxth	r0, r3
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	440b      	add	r3, r1
 8001020:	3336      	adds	r3, #54	; 0x36
 8001022:	4602      	mov	r2, r0
 8001024:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	3303      	adds	r3, #3
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	3338      	adds	r3, #56	; 0x38
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	333c      	adds	r3, #60	; 0x3c
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	440b      	add	r3, r1
 8001072:	3340      	adds	r3, #64	; 0x40
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	3301      	adds	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3ad      	bcc.n	8000fe4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e044      	b.n	8001118 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	f203 1369 	addw	r3, r3, #361	; 0x169
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	440b      	add	r3, r1
 80010b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	440b      	add	r3, r1
 800110a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	3301      	adds	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3b5      	bcc.n	800108e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	687e      	ldr	r6, [r7, #4]
 800112a:	466d      	mov	r5, sp
 800112c:	f106 0410 	add.w	r4, r6, #16
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	602b      	str	r3, [r5, #0]
 8001138:	1d33      	adds	r3, r6, #4
 800113a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800113c:	6838      	ldr	r0, [r7, #0]
 800113e:	f001 fe55 	bl	8002dec <USB_DevInit>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e00d      	b.n	8001170 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f001 fe5f 	bl	8002e2c <USB_DevDisconnect>

  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001178 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_PWR_EnableBkUpAccess+0x14>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	420e0020 	.word	0x420e0020

08001190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e26c      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8087 	beq.w	80012be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b0:	4b92      	ldr	r3, [pc, #584]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d00c      	beq.n	80011d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011bc:	4b8f      	ldr	r3, [pc, #572]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d112      	bne.n	80011ee <HAL_RCC_OscConfig+0x5e>
 80011c8:	4b8c      	ldr	r3, [pc, #560]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d10b      	bne.n	80011ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d6:	4b89      	ldr	r3, [pc, #548]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d06c      	beq.n	80012bc <HAL_RCC_OscConfig+0x12c>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d168      	bne.n	80012bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e246      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x76>
 80011f8:	4b80      	ldr	r3, [pc, #512]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a7f      	ldr	r2, [pc, #508]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e02e      	b.n	8001264 <HAL_RCC_OscConfig+0xd4>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x98>
 800120e:	4b7b      	ldr	r3, [pc, #492]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a7a      	ldr	r2, [pc, #488]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b78      	ldr	r3, [pc, #480]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a77      	ldr	r2, [pc, #476]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e01d      	b.n	8001264 <HAL_RCC_OscConfig+0xd4>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0xbc>
 8001232:	4b72      	ldr	r3, [pc, #456]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a71      	ldr	r2, [pc, #452]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	4b6f      	ldr	r3, [pc, #444]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a6e      	ldr	r2, [pc, #440]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e00b      	b.n	8001264 <HAL_RCC_OscConfig+0xd4>
 800124c:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a6a      	ldr	r2, [pc, #424]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b68      	ldr	r3, [pc, #416]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a67      	ldr	r2, [pc, #412]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 800125e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fb88 	bl	8000980 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fb84 	bl	8000980 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e1fa      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	4b5d      	ldr	r3, [pc, #372]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0xe4>
 8001292:	e014      	b.n	80012be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fb74 	bl	8000980 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fb70 	bl	8000980 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e1e6      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	4b53      	ldr	r3, [pc, #332]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x10c>
 80012ba:	e000      	b.n	80012be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d063      	beq.n	8001392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ca:	4b4c      	ldr	r3, [pc, #304]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00b      	beq.n	80012ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012d6:	4b49      	ldr	r3, [pc, #292]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d11c      	bne.n	800131c <HAL_RCC_OscConfig+0x18c>
 80012e2:	4b46      	ldr	r3, [pc, #280]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d116      	bne.n	800131c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	4b43      	ldr	r3, [pc, #268]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <HAL_RCC_OscConfig+0x176>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e1ba      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001306:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4939      	ldr	r1, [pc, #228]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	e03a      	b.n	8001392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d020      	beq.n	8001366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001324:	4b36      	ldr	r3, [pc, #216]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb29 	bl	8000980 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001332:	f7ff fb25 	bl	8000980 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e19b      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4927      	ldr	r1, [pc, #156]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]
 8001364:	e015      	b.n	8001392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fb08 	bl	8000980 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001374:	f7ff fb04 	bl	8000980 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e17a      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d03a      	beq.n	8001414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d019      	beq.n	80013da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_RCC_OscConfig+0x274>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fae8 	bl	8000980 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b4:	f7ff fae4 	bl	8000980 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e15a      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_RCC_OscConfig+0x26c>)
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f000 fad8 	bl	8001988 <RCC_Delay>
 80013d8:	e01c      	b.n	8001414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_RCC_OscConfig+0x274>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e0:	f7ff face 	bl	8000980 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e6:	e00f      	b.n	8001408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e8:	f7ff faca 	bl	8000980 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d908      	bls.n	8001408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e140      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	42420000 	.word	0x42420000
 8001404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	4b9e      	ldr	r3, [pc, #632]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1e9      	bne.n	80013e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80a6 	beq.w	800156e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001426:	4b97      	ldr	r3, [pc, #604]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10d      	bne.n	800144e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b94      	ldr	r3, [pc, #592]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a93      	ldr	r2, [pc, #588]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	61d3      	str	r3, [r2, #28]
 800143e:	4b91      	ldr	r3, [pc, #580]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b8e      	ldr	r3, [pc, #568]	; (8001688 <HAL_RCC_OscConfig+0x4f8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d118      	bne.n	800148c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145a:	4b8b      	ldr	r3, [pc, #556]	; (8001688 <HAL_RCC_OscConfig+0x4f8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a8a      	ldr	r2, [pc, #552]	; (8001688 <HAL_RCC_OscConfig+0x4f8>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001466:	f7ff fa8b 	bl	8000980 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146e:	f7ff fa87 	bl	8000980 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b64      	cmp	r3, #100	; 0x64
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e0fd      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	4b81      	ldr	r3, [pc, #516]	; (8001688 <HAL_RCC_OscConfig+0x4f8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x312>
 8001494:	4b7b      	ldr	r3, [pc, #492]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4a7a      	ldr	r2, [pc, #488]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6213      	str	r3, [r2, #32]
 80014a0:	e02d      	b.n	80014fe <HAL_RCC_OscConfig+0x36e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x334>
 80014aa:	4b76      	ldr	r3, [pc, #472]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	4a75      	ldr	r2, [pc, #468]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6213      	str	r3, [r2, #32]
 80014b6:	4b73      	ldr	r3, [pc, #460]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a72      	ldr	r2, [pc, #456]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	e01c      	b.n	80014fe <HAL_RCC_OscConfig+0x36e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d10c      	bne.n	80014e6 <HAL_RCC_OscConfig+0x356>
 80014cc:	4b6d      	ldr	r3, [pc, #436]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4a6c      	ldr	r2, [pc, #432]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6213      	str	r3, [r2, #32]
 80014d8:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4a69      	ldr	r2, [pc, #420]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6213      	str	r3, [r2, #32]
 80014e4:	e00b      	b.n	80014fe <HAL_RCC_OscConfig+0x36e>
 80014e6:	4b67      	ldr	r3, [pc, #412]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4a66      	ldr	r2, [pc, #408]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6213      	str	r3, [r2, #32]
 80014f2:	4b64      	ldr	r3, [pc, #400]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4a63      	ldr	r2, [pc, #396]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d015      	beq.n	8001532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fa3b 	bl	8000980 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fa37 	bl	8000980 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	; 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e0ab      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001524:	4b57      	ldr	r3, [pc, #348]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0ee      	beq.n	800150e <HAL_RCC_OscConfig+0x37e>
 8001530:	e014      	b.n	800155c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fa25 	bl	8000980 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fa21 	bl	8000980 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e095      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ee      	bne.n	800153a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d105      	bne.n	800156e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001562:	4b48      	ldr	r3, [pc, #288]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a47      	ldr	r2, [pc, #284]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 8001568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8081 	beq.w	800167a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001578:	4b42      	ldr	r3, [pc, #264]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b08      	cmp	r3, #8
 8001582:	d061      	beq.n	8001648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d146      	bne.n	800161a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158c:	4b3f      	ldr	r3, [pc, #252]	; (800168c <HAL_RCC_OscConfig+0x4fc>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff f9f5 	bl	8000980 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff f9f1 	bl	8000980 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e067      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ac:	4b35      	ldr	r3, [pc, #212]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c0:	d108      	bne.n	80015d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	492d      	ldr	r1, [pc, #180]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a19      	ldr	r1, [r3, #32]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	430b      	orrs	r3, r1
 80015e6:	4927      	ldr	r1, [pc, #156]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_RCC_OscConfig+0x4fc>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff f9c5 	bl	8000980 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff f9c1 	bl	8000980 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e037      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x46a>
 8001618:	e02f      	b.n	800167a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <HAL_RCC_OscConfig+0x4fc>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff f9ae 	bl	8000980 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff f9aa 	bl	8000980 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e020      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x498>
 8001646:	e018      	b.n	800167a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e013      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	429a      	cmp	r2, r3
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	40007000 	.word	0x40007000
 800168c:	42420060 	.word	0x42420060

08001690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0d0      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d910      	bls.n	80016d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b67      	ldr	r3, [pc, #412]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0207 	bic.w	r2, r3, #7
 80016ba:	4965      	ldr	r1, [pc, #404]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b63      	ldr	r3, [pc, #396]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0b8      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ec:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a58      	ldr	r2, [pc, #352]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001704:	4b53      	ldr	r3, [pc, #332]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800170e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001710:	4b50      	ldr	r3, [pc, #320]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	494d      	ldr	r1, [pc, #308]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d040      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d115      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e07f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	4b41      	ldr	r3, [pc, #260]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e073      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e06b      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176e:	4b39      	ldr	r3, [pc, #228]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f023 0203 	bic.w	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4936      	ldr	r1, [pc, #216]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff f8fe 	bl	8000980 <HAL_GetTick>
 8001784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	e00a      	b.n	800179e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff f8fa 	bl	8000980 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e053      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 020c 	and.w	r2, r3, #12
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1eb      	bne.n	8001788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d210      	bcs.n	80017e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 0207 	bic.w	r2, r3, #7
 80017c6:	4922      	ldr	r1, [pc, #136]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e032      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4916      	ldr	r1, [pc, #88]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	490e      	ldr	r1, [pc, #56]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	4313      	orrs	r3, r2
 800181c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800181e:	f000 f821 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 8001822:	4602      	mov	r2, r0
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	490a      	ldr	r1, [pc, #40]	; (8001858 <HAL_RCC_ClockConfig+0x1c8>)
 8001830:	5ccb      	ldrb	r3, [r1, r3]
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	4a09      	ldr	r2, [pc, #36]	; (800185c <HAL_RCC_ClockConfig+0x1cc>)
 8001838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_RCC_ClockConfig+0x1d0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f85c 	bl	80008fc <HAL_InitTick>

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40022000 	.word	0x40022000
 8001854:	40021000 	.word	0x40021000
 8001858:	08002ed0 	.word	0x08002ed0
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	b490      	push	{r4, r7}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800186a:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_RCC_GetSysClockFreq+0xb0>)
 800186c:	1d3c      	adds	r4, r7, #4
 800186e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001874:	f240 2301 	movw	r3, #513	; 0x201
 8001878:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b04      	cmp	r3, #4
 800189c:	d002      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x40>
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d003      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0x46>
 80018a2:	e02d      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a6:	623b      	str	r3, [r7, #32]
      break;
 80018a8:	e02d      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	0c9b      	lsrs	r3, r3, #18
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018b6:	4413      	add	r3, r2
 80018b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	0c5b      	lsrs	r3, r3, #17
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018d6:	4413      	add	r3, r2
 80018d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e2:	fb02 f203 	mul.w	r2, r2, r3
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	e004      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	623b      	str	r3, [r7, #32]
      break;
 80018fe:	e002      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001902:	623b      	str	r3, [r7, #32]
      break;
 8001904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001906:	6a3b      	ldr	r3, [r7, #32]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bc90      	pop	{r4, r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	08002eb0 	.word	0x08002eb0
 8001918:	40021000 	.word	0x40021000
 800191c:	007a1200 	.word	0x007a1200
 8001920:	003d0900 	.word	0x003d0900

08001924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001928:	4b02      	ldr	r3, [pc, #8]	; (8001934 <HAL_RCC_GetHCLKFreq+0x10>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	20000000 	.word	0x20000000

08001938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800193c:	f7ff fff2 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	; (800195c <HAL_RCC_GetPCLK1Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	08002ee0 	.word	0x08002ee0

08001960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001964:	f7ff ffde 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 8001968:	4602      	mov	r2, r0
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	0adb      	lsrs	r3, r3, #11
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	4903      	ldr	r1, [pc, #12]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000
 8001984:	08002ee0 	.word	0x08002ee0

08001988 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <RCC_Delay+0x34>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <RCC_Delay+0x38>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0a5b      	lsrs	r3, r3, #9
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019a4:	bf00      	nop
  }
  while (Delay --);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1e5a      	subs	r2, r3, #1
 80019aa:	60fa      	str	r2, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f9      	bne.n	80019a4 <RCC_Delay+0x1c>
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	20000000 	.word	0x20000000
 80019c0:	10624dd3 	.word	0x10624dd3

080019c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d07d      	beq.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10d      	bne.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	61d3      	str	r3, [r2, #28]
 80019fc:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b46      	ldr	r3, [pc, #280]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d118      	bne.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a42      	ldr	r2, [pc, #264]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a24:	f7fe ffac 	bl	8000980 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	e008      	b.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2c:	f7fe ffa8 	bl	8000980 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e06d      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a4a:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d02e      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d027      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a68:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a78:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a7e:	4a29      	ldr	r2, [pc, #164]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d014      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7fe ff77 	bl	8000980 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7fe ff73 	bl	8000980 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e036      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ee      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4917      	ldr	r1, [pc, #92]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ada:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	490b      	ldr	r1, [pc, #44]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	4904      	ldr	r1, [pc, #16]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	42420440 	.word	0x42420440

08001b30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b08d      	sub	sp, #52	; 0x34
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b38:	4b5a      	ldr	r3, [pc, #360]	; (8001ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001b3a:	f107 040c 	add.w	r4, r7, #12
 8001b3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b44:	f240 2301 	movw	r3, #513	; 0x201
 8001b48:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b10      	cmp	r3, #16
 8001b62:	d00a      	beq.n	8001b7a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	f200 8091 	bhi.w	8001c8e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d04c      	beq.n	8001c0c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d07c      	beq.n	8001c72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001b78:	e089      	b.n	8001c8e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001b7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001b80:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8082 	beq.w	8001c92 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	0c9b      	lsrs	r3, r3, #18
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ba0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d018      	beq.n	8001bde <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bac:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	0c5b      	lsrs	r3, r3, #17
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bba:	4413      	add	r3, r2
 8001bbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00d      	beq.n	8001be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001bcc:	4a37      	ldr	r2, [pc, #220]	; (8001cac <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bdc:	e004      	b.n	8001be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	4a33      	ldr	r2, [pc, #204]	; (8001cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001be8:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bf4:	d102      	bne.n	8001bfc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001bfa:	e04a      	b.n	8001c92 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4a2c      	ldr	r2, [pc, #176]	; (8001cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001c0a:	e042      	b.n	8001c92 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001c0c:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c1c:	d108      	bne.n	8001c30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2e:	e01f      	b.n	8001c70 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c3a:	d109      	bne.n	8001c50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001c48:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c4e:	e00f      	b.n	8001c70 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c5a:	d11c      	bne.n	8001c96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d016      	beq.n	8001c96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001c68:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001c6e:	e012      	b.n	8001c96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001c70:	e011      	b.n	8001c96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001c72:	f7ff fe75 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	0b9b      	lsrs	r3, r3, #14
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	3301      	adds	r3, #1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001c8c:	e004      	b.n	8001c98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001c8e:	bf00      	nop
 8001c90:	e002      	b.n	8001c98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001c92:	bf00      	nop
 8001c94:	e000      	b.n	8001c98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001c96:	bf00      	nop
    }
  }
  return (frequency);
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3734      	adds	r7, #52	; 0x34
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	08002ec0 	.word	0x08002ec0
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	007a1200 	.word	0x007a1200
 8001cb0:	003d0900 	.word	0x003d0900
 8001cb4:	aaaaaaab 	.word	0xaaaaaaab

08001cb8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e084      	b.n	8001dd8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7c5b      	ldrb	r3, [r3, #17]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d105      	bne.n	8001ce4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe fce0 	bl	80006a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f9c8 	bl	8002080 <HAL_RTC_WaitForSynchro>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e06b      	b.n	8001dd8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fa81 	bl	8002208 <RTC_EnterInitMode>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d004      	beq.n	8001d16 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2204      	movs	r2, #4
 8001d10:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e060      	b.n	8001dd8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0207 	bic.w	r2, r2, #7
 8001d24:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_RTC_Init+0x128>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <HAL_RTC_Init+0x128>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_RTC_Init+0x128>)
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	4926      	ldr	r1, [pc, #152]	; (8001de0 <HAL_RTC_Init+0x128>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d54:	d003      	beq.n	8001d5e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e00e      	b.n	8001d7c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff fee6 	bl	8001b30 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d64:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2204      	movs	r2, #4
 8001d70:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e030      	b.n	8001dd8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f023 010f 	bic.w	r1, r3, #15
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	0c1a      	lsrs	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	041b      	lsls	r3, r3, #16
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	b291      	uxth	r1, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fa55 	bl	8002258 <RTC_ExitInitMode>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d004      	beq.n	8001dbe <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2204      	movs	r2, #4
 8001db8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00c      	b.n	8001dd8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
  }
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40006c00 	.word	0x40006c00

08001de4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_RTC_SetTime+0x20>
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e080      	b.n	8001f0a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	7c1b      	ldrb	r3, [r3, #16]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_RTC_SetTime+0x30>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e07a      	b.n	8001f0a <HAL_RTC_SetTime+0x126>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d113      	bne.n	8001e4e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001e30:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	785b      	ldrb	r3, [r3, #1]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	1a5b      	subs	r3, r3, r1
 8001e40:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001e42:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001e48:	4413      	add	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	e01e      	b.n	8001e8c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fa28 	bl	80022a8 <RTC_Bcd2ToByte>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001e60:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	785b      	ldrb	r3, [r3, #1]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fa1d 	bl	80022a8 <RTC_Bcd2ToByte>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	4613      	mov	r3, r2
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	1a9b      	subs	r3, r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001e7a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	789b      	ldrb	r3, [r3, #2]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fa11 	bl	80022a8 <RTC_Bcd2ToByte>
 8001e86:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001e88:	4423      	add	r3, r4
 8001e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001e8c:	6979      	ldr	r1, [r7, #20]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f953 	bl	800213a <RTC_WriteTimeCounter>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e02f      	b.n	8001f0a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0205 	bic.w	r2, r2, #5
 8001eb8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f964 	bl	8002188 <RTC_ReadAlarmCounter>
 8001ec0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec8:	d018      	beq.n	8001efc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d214      	bcs.n	8001efc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001ed8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001edc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001ede:	6939      	ldr	r1, [r7, #16]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f96a 	bl	80021ba <RTC_WriteAlarmCounter>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e006      	b.n	8001f0a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001f08:	2300      	movs	r3, #0
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}
	...

08001f14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_RTC_SetDate+0x24>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e097      	b.n	800206c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	7c1b      	ldrb	r3, [r3, #16]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_RTC_SetDate+0x34>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e091      	b.n	800206c <HAL_RTC_SetDate+0x158>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2202      	movs	r2, #2
 8001f52:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	78da      	ldrb	r2, [r3, #3]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	785a      	ldrb	r2, [r3, #1]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	789a      	ldrb	r2, [r3, #2]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	739a      	strb	r2, [r3, #14]
 8001f72:	e01a      	b.n	8001faa <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	78db      	ldrb	r3, [r3, #3]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f995 	bl	80022a8 <RTC_Bcd2ToByte>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	785b      	ldrb	r3, [r3, #1]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f98c 	bl	80022a8 <RTC_Bcd2ToByte>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	789b      	ldrb	r3, [r3, #2]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f983 	bl	80022a8 <RTC_Bcd2ToByte>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	7bdb      	ldrb	r3, [r3, #15]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	7b59      	ldrb	r1, [r3, #13]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	7b9b      	ldrb	r3, [r3, #14]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f000 f993 	bl	80022e4 <RTC_WeekDayNum>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	7b1a      	ldrb	r2, [r3, #12]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f883 	bl	80020da <RTC_ReadTimeCounter>
 8001fd4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <HAL_RTC_SetDate+0x160>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	0adb      	lsrs	r3, r3, #11
 8001fe0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b18      	cmp	r3, #24
 8001fe6:	d93a      	bls.n	800205e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	4a23      	ldr	r2, [pc, #140]	; (8002078 <HAL_RTC_SetDate+0x164>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_RTC_SetDate+0x168>)
 8001ff4:	fb02 f303 	mul.w	r3, r2, r3
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001ffe:	69f9      	ldr	r1, [r7, #28]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f89a 	bl	800213a <RTC_WriteTimeCounter>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2204      	movs	r2, #4
 8002010:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e027      	b.n	800206c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f8b3 	bl	8002188 <RTC_ReadAlarmCounter>
 8002022:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800202a:	d018      	beq.n	800205e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	429a      	cmp	r2, r3
 8002032:	d214      	bcs.n	800205e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800203a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800203e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002040:	69b9      	ldr	r1, [r7, #24]
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f8b9 	bl	80021ba <RTC_WriteAlarmCounter>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2204      	movs	r2, #4
 8002052:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e006      	b.n	800206c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	91a2b3c5 	.word	0x91a2b3c5
 8002078:	aaaaaaab 	.word	0xaaaaaaab
 800207c:	00015180 	.word	0x00015180

08002080 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e01d      	b.n	80020d2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0208 	bic.w	r2, r2, #8
 80020a4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80020a6:	f7fe fc6b 	bl	8000980 <HAL_GetTick>
 80020aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80020ac:	e009      	b.n	80020c2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020ae:	f7fe fc67 	bl	8000980 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020bc:	d901      	bls.n	80020c2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e007      	b.n	80020d2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ee      	beq.n	80020ae <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80020da:	b480      	push	{r7}
 80020dc:	b087      	sub	sp, #28
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	827b      	strh	r3, [r7, #18]
 80020e6:	2300      	movs	r3, #0
 80020e8:	823b      	strh	r3, [r7, #16]
 80020ea:	2300      	movs	r3, #0
 80020ec:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800210a:	8a7a      	ldrh	r2, [r7, #18]
 800210c:	8a3b      	ldrh	r3, [r7, #16]
 800210e:	429a      	cmp	r2, r3
 8002110:	d008      	beq.n	8002124 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002112:	8a3b      	ldrh	r3, [r7, #16]
 8002114:	041a      	lsls	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	b29b      	uxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e004      	b.n	800212e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002124:	8a7b      	ldrh	r3, [r7, #18]
 8002126:	041a      	lsls	r2, r3, #16
 8002128:	89fb      	ldrh	r3, [r7, #14]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800212e:	697b      	ldr	r3, [r7, #20]
}
 8002130:	4618      	mov	r0, r3
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f85d 	bl	8002208 <RTC_EnterInitMode>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e011      	b.n	800217e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	0c12      	lsrs	r2, r2, #16
 8002162:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	b292      	uxth	r2, r2
 800216c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f872 	bl	8002258 <RTC_ExitInitMode>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	81fb      	strh	r3, [r7, #14]
 8002194:	2300      	movs	r3, #0
 8002196:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80021a8:	89fb      	ldrh	r3, [r7, #14]
 80021aa:	041a      	lsls	r2, r3, #16
 80021ac:	89bb      	ldrh	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f81d 	bl	8002208 <RTC_EnterInitMode>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e011      	b.n	80021fe <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	0c12      	lsrs	r2, r2, #16
 80021e2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	b292      	uxth	r2, r2
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f832 	bl	8002258 <RTC_ExitInitMode>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002214:	f7fe fbb4 	bl	8000980 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800221a:	e009      	b.n	8002230 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800221c:	f7fe fbb0 	bl	8000980 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800222a:	d901      	bls.n	8002230 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e00f      	b.n	8002250 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0ee      	beq.n	800221c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0210 	orr.w	r2, r2, #16
 800224c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0210 	bic.w	r2, r2, #16
 8002272:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002274:	f7fe fb84 	bl	8000980 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800227a:	e009      	b.n	8002290 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800227c:	f7fe fb80 	bl	8000980 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800228a:	d901      	bls.n	8002290 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e007      	b.n	80022a0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ee      	beq.n	800227c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	b2db      	uxtb	r3, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
	...

080022e4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
 80022f0:	4613      	mov	r3, r2
 80022f2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002302:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d82d      	bhi.n	8002366 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	4a2c      	ldr	r2, [pc, #176]	; (80023c8 <RTC_WeekDayNum+0xe4>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	085a      	lsrs	r2, r3, #1
 800231e:	78bb      	ldrb	r3, [r7, #2]
 8002320:	441a      	add	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	441a      	add	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3b01      	subs	r3, #1
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	441a      	add	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3b01      	subs	r3, #1
 8002332:	4926      	ldr	r1, [pc, #152]	; (80023cc <RTC_WeekDayNum+0xe8>)
 8002334:	fba1 1303 	umull	r1, r3, r1, r3
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	1ad2      	subs	r2, r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	3b01      	subs	r3, #1
 8002340:	4922      	ldr	r1, [pc, #136]	; (80023cc <RTC_WeekDayNum+0xe8>)
 8002342:	fba1 1303 	umull	r1, r3, r1, r3
 8002346:	09db      	lsrs	r3, r3, #7
 8002348:	4413      	add	r3, r2
 800234a:	1d1a      	adds	r2, r3, #4
 800234c:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <RTC_WeekDayNum+0xec>)
 800234e:	fba3 1302 	umull	r1, r3, r3, r2
 8002352:	1ad1      	subs	r1, r2, r3
 8002354:	0849      	lsrs	r1, r1, #1
 8002356:	440b      	add	r3, r1
 8002358:	0899      	lsrs	r1, r3, #2
 800235a:	460b      	mov	r3, r1
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	1a5b      	subs	r3, r3, r1
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e029      	b.n	80023ba <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	4a15      	ldr	r2, [pc, #84]	; (80023c8 <RTC_WeekDayNum+0xe4>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	085a      	lsrs	r2, r3, #1
 800237a:	78bb      	ldrb	r3, [r7, #2]
 800237c:	441a      	add	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	441a      	add	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	441a      	add	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4910      	ldr	r1, [pc, #64]	; (80023cc <RTC_WeekDayNum+0xe8>)
 800238c:	fba1 1303 	umull	r1, r3, r1, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	1ad2      	subs	r2, r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	490d      	ldr	r1, [pc, #52]	; (80023cc <RTC_WeekDayNum+0xe8>)
 8002398:	fba1 1303 	umull	r1, r3, r1, r3
 800239c:	09db      	lsrs	r3, r3, #7
 800239e:	4413      	add	r3, r2
 80023a0:	1c9a      	adds	r2, r3, #2
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <RTC_WeekDayNum+0xec>)
 80023a4:	fba3 1302 	umull	r1, r3, r3, r2
 80023a8:	1ad1      	subs	r1, r2, r3
 80023aa:	0849      	lsrs	r1, r1, #1
 80023ac:	440b      	add	r3, r1
 80023ae:	0899      	lsrs	r1, r3, #2
 80023b0:	460b      	mov	r3, r1
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a5b      	subs	r3, r3, r1
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	b2db      	uxtb	r3, r3
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	38e38e39 	.word	0x38e38e39
 80023cc:	51eb851f 	.word	0x51eb851f
 80023d0:	24924925 	.word	0x24924925

080023d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e041      	b.n	800246a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe f976 	bl	80006ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f000 fa70 	bl	80028f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d001      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e03a      	b.n	8002502 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <HAL_TIM_Base_Start_IT+0x98>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00e      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x58>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b6:	d009      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x58>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <HAL_TIM_Base_Start_IT+0x9c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x58>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a13      	ldr	r2, [pc, #76]	; (8002514 <HAL_TIM_Base_Start_IT+0xa0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d111      	bne.n	80024f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d010      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ee:	e007      	b.n	8002500 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	40012c00 	.word	0x40012c00
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800

08002518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b02      	cmp	r3, #2
 800252c:	d122      	bne.n	8002574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b02      	cmp	r3, #2
 800253a:	d11b      	bne.n	8002574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0202 	mvn.w	r2, #2
 8002544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f9b1 	bl	80028c2 <HAL_TIM_IC_CaptureCallback>
 8002560:	e005      	b.n	800256e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f9a4 	bl	80028b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f9b3 	bl	80028d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b04      	cmp	r3, #4
 8002580:	d122      	bne.n	80025c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b04      	cmp	r3, #4
 800258e:	d11b      	bne.n	80025c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0204 	mvn.w	r2, #4
 8002598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f987 	bl	80028c2 <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f97a 	bl	80028b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f989 	bl	80028d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d122      	bne.n	800261c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d11b      	bne.n	800261c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0208 	mvn.w	r2, #8
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2204      	movs	r2, #4
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f95d 	bl	80028c2 <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f950 	bl	80028b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f95f 	bl	80028d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b10      	cmp	r3, #16
 8002628:	d122      	bne.n	8002670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b10      	cmp	r3, #16
 8002636:	d11b      	bne.n	8002670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0210 	mvn.w	r2, #16
 8002640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2208      	movs	r2, #8
 8002646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f933 	bl	80028c2 <HAL_TIM_IC_CaptureCallback>
 800265c:	e005      	b.n	800266a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f926 	bl	80028b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f935 	bl	80028d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b01      	cmp	r3, #1
 800267c:	d10e      	bne.n	800269c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0201 	mvn.w	r2, #1
 8002694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fd ffae 	bl	80005f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b80      	cmp	r3, #128	; 0x80
 80026a8:	d10e      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	d107      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa77 	bl	8002bb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d2:	2b40      	cmp	r3, #64	; 0x40
 80026d4:	d10e      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e0:	2b40      	cmp	r3, #64	; 0x40
 80026e2:	d107      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8f9 	bl	80028e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d10e      	bne.n	8002720 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b20      	cmp	r3, #32
 800270e:	d107      	bne.n	8002720 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0220 	mvn.w	r2, #32
 8002718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fa42 	bl	8002ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_TIM_ConfigClockSource+0x18>
 800273c:	2302      	movs	r3, #2
 800273e:	e0b3      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0x180>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800275e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002766:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002778:	d03e      	beq.n	80027f8 <HAL_TIM_ConfigClockSource+0xd0>
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	f200 8087 	bhi.w	8002890 <HAL_TIM_ConfigClockSource+0x168>
 8002782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002786:	f000 8085 	beq.w	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 800278a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278e:	d87f      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x168>
 8002790:	2b70      	cmp	r3, #112	; 0x70
 8002792:	d01a      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0xa2>
 8002794:	2b70      	cmp	r3, #112	; 0x70
 8002796:	d87b      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x168>
 8002798:	2b60      	cmp	r3, #96	; 0x60
 800279a:	d050      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x116>
 800279c:	2b60      	cmp	r3, #96	; 0x60
 800279e:	d877      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x168>
 80027a0:	2b50      	cmp	r3, #80	; 0x50
 80027a2:	d03c      	beq.n	800281e <HAL_TIM_ConfigClockSource+0xf6>
 80027a4:	2b50      	cmp	r3, #80	; 0x50
 80027a6:	d873      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x168>
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d058      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x136>
 80027ac:	2b40      	cmp	r3, #64	; 0x40
 80027ae:	d86f      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x168>
 80027b0:	2b30      	cmp	r3, #48	; 0x30
 80027b2:	d064      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x156>
 80027b4:	2b30      	cmp	r3, #48	; 0x30
 80027b6:	d86b      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x168>
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d060      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x156>
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d867      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x168>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d05c      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x156>
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d05a      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027c8:	e062      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f000 f966 	bl	8002aaa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	609a      	str	r2, [r3, #8]
      break;
 80027f6:	e04e      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f000 f94f 	bl	8002aaa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800281a:	609a      	str	r2, [r3, #8]
      break;
 800281c:	e03b      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6859      	ldr	r1, [r3, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	461a      	mov	r2, r3
 800282c:	f000 f8c6 	bl	80029bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2150      	movs	r1, #80	; 0x50
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f91d 	bl	8002a76 <TIM_ITRx_SetConfig>
      break;
 800283c:	e02b      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	461a      	mov	r2, r3
 800284c:	f000 f8e4 	bl	8002a18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2160      	movs	r1, #96	; 0x60
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f90d 	bl	8002a76 <TIM_ITRx_SetConfig>
      break;
 800285c:	e01b      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	461a      	mov	r2, r3
 800286c:	f000 f8a6 	bl	80029bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2140      	movs	r1, #64	; 0x40
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f8fd 	bl	8002a76 <TIM_ITRx_SetConfig>
      break;
 800287c:	e00b      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4619      	mov	r1, r3
 8002888:	4610      	mov	r0, r2
 800288a:	f000 f8f4 	bl	8002a76 <TIM_ITRx_SetConfig>
        break;
 800288e:	e002      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002890:	bf00      	nop
 8002892:	e000      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002894:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <TIM_Base_SetConfig+0xb8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00b      	beq.n	8002928 <TIM_Base_SetConfig+0x30>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002916:	d007      	beq.n	8002928 <TIM_Base_SetConfig+0x30>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a26      	ldr	r2, [pc, #152]	; (80029b4 <TIM_Base_SetConfig+0xbc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_Base_SetConfig+0x30>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a25      	ldr	r2, [pc, #148]	; (80029b8 <TIM_Base_SetConfig+0xc0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d108      	bne.n	800293a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <TIM_Base_SetConfig+0xb8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_Base_SetConfig+0x62>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002948:	d007      	beq.n	800295a <TIM_Base_SetConfig+0x62>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <TIM_Base_SetConfig+0xbc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_Base_SetConfig+0x62>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <TIM_Base_SetConfig+0xc0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <TIM_Base_SetConfig+0xb8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d103      	bne.n	80029a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	615a      	str	r2, [r3, #20]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40000400 	.word	0x40000400
 80029b8:	40000800 	.word	0x40000800

080029bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f023 0201 	bic.w	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f023 030a 	bic.w	r3, r3, #10
 80029f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	621a      	str	r2, [r3, #32]
}
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f023 0210 	bic.w	r2, r3, #16
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	031b      	lsls	r3, r3, #12
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	621a      	str	r2, [r3, #32]
}
 8002a6c:	bf00      	nop
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f043 0307 	orr.w	r3, r3, #7
 8002a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b087      	sub	sp, #28
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	021a      	lsls	r2, r3, #8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	609a      	str	r2, [r3, #8]
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e046      	b.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4c:	d009      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10c      	bne.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	40012c00 	.word	0x40012c00
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800

08002ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e03f      	b.n	8002c5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd fda0 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f829 	bl	8002c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c9e:	f023 030c 	bic.w	r3, r3, #12
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <UART_SetConfig+0x114>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d103      	bne.n	8002cd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ccc:	f7fe fe48 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	e002      	b.n	8002cda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cd4:	f7fe fe30 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 8002cd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <UART_SetConfig+0x118>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	0119      	lsls	r1, r3, #4
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009a      	lsls	r2, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <UART_SetConfig+0x118>)
 8002d12:	fba3 0302 	umull	r0, r3, r3, r2
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2064      	movs	r0, #100	; 0x64
 8002d1a:	fb00 f303 	mul.w	r3, r0, r3
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	3332      	adds	r3, #50	; 0x32
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <UART_SetConfig+0x118>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d30:	4419      	add	r1, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009a      	lsls	r2, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <UART_SetConfig+0x118>)
 8002d4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2064      	movs	r0, #100	; 0x64
 8002d52:	fb00 f303 	mul.w	r3, r0, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	3332      	adds	r3, #50	; 0x32
 8002d5c:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <UART_SetConfig+0x118>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	f003 020f 	and.w	r2, r3, #15
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	440a      	add	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	51eb851f 	.word	0x51eb851f

08002d80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d80:	b084      	sub	sp, #16
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	f107 0014 	add.w	r0, r7, #20
 8002d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	b004      	add	sp, #16
 8002d9e:	4770      	bx	lr

08002da0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002da8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002dac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002dec:	b084      	sub	sp, #16
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	f107 0014 	add.w	r0, r7, #20
 8002dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	b004      	add	sp, #16
 8002e2a:	4770      	bx	lr

08002e2c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <__libc_init_array>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	2600      	movs	r6, #0
 8002e44:	4d0c      	ldr	r5, [pc, #48]	; (8002e78 <__libc_init_array+0x38>)
 8002e46:	4c0d      	ldr	r4, [pc, #52]	; (8002e7c <__libc_init_array+0x3c>)
 8002e48:	1b64      	subs	r4, r4, r5
 8002e4a:	10a4      	asrs	r4, r4, #2
 8002e4c:	42a6      	cmp	r6, r4
 8002e4e:	d109      	bne.n	8002e64 <__libc_init_array+0x24>
 8002e50:	f000 f822 	bl	8002e98 <_init>
 8002e54:	2600      	movs	r6, #0
 8002e56:	4d0a      	ldr	r5, [pc, #40]	; (8002e80 <__libc_init_array+0x40>)
 8002e58:	4c0a      	ldr	r4, [pc, #40]	; (8002e84 <__libc_init_array+0x44>)
 8002e5a:	1b64      	subs	r4, r4, r5
 8002e5c:	10a4      	asrs	r4, r4, #2
 8002e5e:	42a6      	cmp	r6, r4
 8002e60:	d105      	bne.n	8002e6e <__libc_init_array+0x2e>
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e68:	4798      	blx	r3
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	e7ee      	b.n	8002e4c <__libc_init_array+0xc>
 8002e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e72:	4798      	blx	r3
 8002e74:	3601      	adds	r6, #1
 8002e76:	e7f2      	b.n	8002e5e <__libc_init_array+0x1e>
 8002e78:	08002ee8 	.word	0x08002ee8
 8002e7c:	08002ee8 	.word	0x08002ee8
 8002e80:	08002ee8 	.word	0x08002ee8
 8002e84:	08002eec 	.word	0x08002eec

08002e88 <memset>:
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4402      	add	r2, r0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memset+0xa>
 8002e90:	4770      	bx	lr
 8002e92:	f803 1b01 	strb.w	r1, [r3], #1
 8002e96:	e7f9      	b.n	8002e8c <memset+0x4>

08002e98 <_init>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr

08002ea4 <_fini>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	bf00      	nop
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr
