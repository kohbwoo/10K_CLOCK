
10K_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e04  08002e04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e04  08002e04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e04  08002e04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e08  08002e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  2000000c  08002e18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08002e18  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f651  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d0  00000000  00000000  0002f686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00031958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  000328d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d44  00000000  00000000  00033770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fec3  00000000  00000000  0004b4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be68  00000000  00000000  0005b377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e71df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004134  00000000  00000000  000e7234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002db4 	.word	0x08002db4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002db4 	.word	0x08002db4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	const int Segment[10] = {0x3, 0x9F, 0x25, 0xD, 0x99, 0x49, 0x41, 0x1F, 0x1, 0x9 };
	int output = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fb6d 	bl	8000834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f837 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f977 	bl	8000450 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f929 	bl	80003b8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000166:	f000 f951 	bl	800040c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800016a:	f000 f8d9 	bl	8000320 <MX_TIM2_Init>
  MX_RTC_Init();
 800016e:	f000 f88d 	bl	800028c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);//타이머 활성화
 8000172:	4811      	ldr	r0, [pc, #68]	; (80001b8 <main+0x6c>)
 8000174:	f002 f90c 	bl	8002390 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017e:	480f      	ldr	r0, [pc, #60]	; (80001bc <main+0x70>)
 8000180:	f000 fe4c 	bl	8000e1c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, SET);
 8000184:	2201      	movs	r2, #1
 8000186:	2120      	movs	r1, #32
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <main+0x74>)
 800018a:	f000 fe47 	bl	8000e1c <HAL_GPIO_WritePin>
//	  HAL_Delay(1000);
//	  output = (Segment[0]<<8) + Segment[1];
//	  HAL_GPIO_WritePin(GPIOB, DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin|DB5_Pin|DB6_Pin|DB7_Pin, SET);
//
//	  HAL_Delay(1000);
	  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH0_Pin, SET);
 800018e:	2201      	movs	r2, #1
 8000190:	2101      	movs	r1, #1
 8000192:	480b      	ldr	r0, [pc, #44]	; (80001c0 <main+0x74>)
 8000194:	f000 fe42 	bl	8000e1c <HAL_GPIO_WritePin>
	  if (timer_Check > 0){
 8000198:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <main+0x78>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d0f1      	beq.n	8000184 <main+0x38>
		  HAL_GPIO_TogglePin(DB0_GPIO_Port, DB0_Pin);
 80001a0:	2101      	movs	r1, #1
 80001a2:	4809      	ldr	r0, [pc, #36]	; (80001c8 <main+0x7c>)
 80001a4:	f000 fe52 	bl	8000e4c <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LATCH0_GPIO_Port, LATCH0_Pin);
 80001a8:	2101      	movs	r1, #1
 80001aa:	4805      	ldr	r0, [pc, #20]	; (80001c0 <main+0x74>)
 80001ac:	f000 fe4e 	bl	8000e4c <HAL_GPIO_TogglePin>
		  timer_Check  = 0;
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <main+0x78>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, SET);
 80001b6:	e7e5      	b.n	8000184 <main+0x38>
 80001b8:	20000084 	.word	0x20000084
 80001bc:	40011000 	.word	0x40011000
 80001c0:	40010800 	.word	0x40010800
 80001c4:	20000028 	.word	0x20000028
 80001c8:	40010c00 	.word	0x40010c00

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b094      	sub	sp, #80	; 0x50
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 fde2 	bl	8002da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
 80001ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80001fc:	2309      	movs	r3, #9
 80001fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000204:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000212:	2302      	movs	r3, #2
 8000214:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800021c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000220:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000226:	4618      	mov	r0, r3
 8000228:	f000 ff40 	bl	80010ac <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000232:	f000 f9a9 	bl	8000588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000246:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2102      	movs	r1, #2
 8000252:	4618      	mov	r0, r3
 8000254:	f001 f9aa 	bl	80015ac <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800025e:	f000 f993 	bl	8000588 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000262:	2311      	movs	r3, #17
 8000264:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800026a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800026c:	2300      	movs	r3, #0
 800026e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fb34 	bl	80018e0 <HAL_RCCEx_PeriphCLKConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800027e:	f000 f983 	bl	8000588 <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3750      	adds	r7, #80	; 0x50
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2100      	movs	r1, #0
 8000296:	460a      	mov	r2, r1
 8000298:	801a      	strh	r2, [r3, #0]
 800029a:	460a      	mov	r2, r1
 800029c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800029e:	2300      	movs	r3, #0
 80002a0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002a2:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <MX_RTC_Init+0x8c>)
 80002a4:	4a1d      	ldr	r2, [pc, #116]	; (800031c <MX_RTC_Init+0x90>)
 80002a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <MX_RTC_Init+0x8c>)
 80002aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80002b0:	4b19      	ldr	r3, [pc, #100]	; (8000318 <MX_RTC_Init+0x8c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002b6:	4818      	ldr	r0, [pc, #96]	; (8000318 <MX_RTC_Init+0x8c>)
 80002b8:	f001 fc8c 	bl	8001bd4 <HAL_RTC_Init>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80002c2:	f000 f961 	bl	8000588 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	480f      	ldr	r0, [pc, #60]	; (8000318 <MX_RTC_Init+0x8c>)
 80002da:	f001 fd11 	bl	8001d00 <HAL_RTC_SetTime>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80002e4:	f000 f950 	bl	8000588 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80002e8:	2301      	movs	r3, #1
 80002ea:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80002ec:	2301      	movs	r3, #1
 80002ee:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 80002f0:	2301      	movs	r3, #1
 80002f2:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80002f8:	463b      	mov	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	4619      	mov	r1, r3
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <MX_RTC_Init+0x8c>)
 8000300:	f001 fd96 	bl	8001e30 <HAL_RTC_SetDate>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800030a:	f000 f93d 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000070 	.word	0x20000070
 800031c:	40002800 	.word	0x40002800

08000320 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	f107 0308 	add.w	r3, r7, #8
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000334:	463b      	mov	r3, r7
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800033c:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <MX_TIM2_Init+0x94>)
 800033e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000342:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <MX_TIM2_Init+0x94>)
 8000346:	2209      	movs	r2, #9
 8000348:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_TIM2_Init+0x94>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 360-1;
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_TIM2_Init+0x94>)
 8000352:	f240 1267 	movw	r2, #359	; 0x167
 8000356:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <MX_TIM2_Init+0x94>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_TIM2_Init+0x94>)
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000364:	4813      	ldr	r0, [pc, #76]	; (80003b4 <MX_TIM2_Init+0x94>)
 8000366:	f001 ffc3 	bl	80022f0 <HAL_TIM_Base_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000370:	f000 f90a 	bl	8000588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000378:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	4619      	mov	r1, r3
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <MX_TIM2_Init+0x94>)
 8000382:	f002 f95f 	bl	8002644 <HAL_TIM_ConfigClockSource>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800038c:	f000 f8fc 	bl	8000588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000390:	2300      	movs	r3, #0
 8000392:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000394:	2300      	movs	r3, #0
 8000396:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000398:	463b      	mov	r3, r7
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_TIM2_Init+0x94>)
 800039e:	f002 fb31 	bl	8002a04 <HAL_TIMEx_MasterConfigSynchronization>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003a8:	f000 f8ee 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	3718      	adds	r7, #24
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000084 	.word	0x20000084

080003b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003be:	4a12      	ldr	r2, [pc, #72]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003de:	220c      	movs	r2, #12
 80003e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003f0:	f002 fb78 	bl	8002ae4 <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fa:	f000 f8c5 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	2000002c 	.word	0x2000002c
 8000408:	40013800 	.word	0x40013800

0800040c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000410:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <MX_USB_PCD_Init+0x3c>)
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <MX_USB_PCD_Init+0x40>)
 8000414:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_USB_PCD_Init+0x3c>)
 8000418:	2208      	movs	r2, #8
 800041a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <MX_USB_PCD_Init+0x3c>)
 800041e:	2202      	movs	r2, #2
 8000420:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_USB_PCD_Init+0x3c>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <MX_USB_PCD_Init+0x3c>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_USB_PCD_Init+0x3c>)
 8000430:	2200      	movs	r2, #0
 8000432:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000434:	4804      	ldr	r0, [pc, #16]	; (8000448 <MX_USB_PCD_Init+0x3c>)
 8000436:	f000 fd22 	bl	8000e7e <HAL_PCD_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000440:	f000 f8a2 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	200000cc 	.word	0x200000cc
 800044c:	40005c00 	.word	0x40005c00

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	f107 0310 	add.w	r3, r7, #16
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000464:	4b39      	ldr	r3, [pc, #228]	; (800054c <MX_GPIO_Init+0xfc>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a38      	ldr	r2, [pc, #224]	; (800054c <MX_GPIO_Init+0xfc>)
 800046a:	f043 0310 	orr.w	r3, r3, #16
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b36      	ldr	r3, [pc, #216]	; (800054c <MX_GPIO_Init+0xfc>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0310 	and.w	r3, r3, #16
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800047c:	4b33      	ldr	r3, [pc, #204]	; (800054c <MX_GPIO_Init+0xfc>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a32      	ldr	r2, [pc, #200]	; (800054c <MX_GPIO_Init+0xfc>)
 8000482:	f043 0320 	orr.w	r3, r3, #32
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b30      	ldr	r3, [pc, #192]	; (800054c <MX_GPIO_Init+0xfc>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0320 	and.w	r3, r3, #32
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	4b2d      	ldr	r3, [pc, #180]	; (800054c <MX_GPIO_Init+0xfc>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a2c      	ldr	r2, [pc, #176]	; (800054c <MX_GPIO_Init+0xfc>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b2a      	ldr	r3, [pc, #168]	; (800054c <MX_GPIO_Init+0xfc>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ac:	4b27      	ldr	r3, [pc, #156]	; (800054c <MX_GPIO_Init+0xfc>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a26      	ldr	r2, [pc, #152]	; (800054c <MX_GPIO_Init+0xfc>)
 80004b2:	f043 0308 	orr.w	r3, r3, #8
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b24      	ldr	r3, [pc, #144]	; (800054c <MX_GPIO_Init+0xfc>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0308 	and.w	r3, r3, #8
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ca:	4821      	ldr	r0, [pc, #132]	; (8000550 <MX_GPIO_Init+0x100>)
 80004cc:	f000 fca6 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LATCH0_Pin|LATCH1_Pin|LATCH2_Pin|LATCH3_Pin
 80004d0:	2200      	movs	r2, #0
 80004d2:	f248 11ff 	movw	r1, #33279	; 0x81ff
 80004d6:	481f      	ldr	r0, [pc, #124]	; (8000554 <MX_GPIO_Init+0x104>)
 80004d8:	f000 fca0 	bl	8000e1c <HAL_GPIO_WritePin>
                          |LATCH4_Pin|OE_Pin|SW0_Pin|SW1_Pin
                          |SW2_Pin|SW3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB0_Pin|DB1_Pin|DB2_Pin|DB10_Pin
 80004dc:	2200      	movs	r2, #0
 80004de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004e2:	481d      	ldr	r0, [pc, #116]	; (8000558 <MX_GPIO_Init+0x108>)
 80004e4:	f000 fc9a 	bl	8000e1c <HAL_GPIO_WritePin>
                          |DB11_Pin|DB12_Pin|DB13_Pin|DB14_Pin
                          |DB15_Pin|DB3_Pin|DB4_Pin|DB5_Pin
                          |DB6_Pin|DB7_Pin|DB8_Pin|DB9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ee:	2301      	movs	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	2302      	movs	r3, #2
 80004f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	4619      	mov	r1, r3
 8000500:	4813      	ldr	r0, [pc, #76]	; (8000550 <MX_GPIO_Init+0x100>)
 8000502:	f000 fb07 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LATCH0_Pin LATCH1_Pin LATCH2_Pin LATCH3_Pin
                           LATCH4_Pin OE_Pin SW0_Pin SW1_Pin
                           SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = LATCH0_Pin|LATCH1_Pin|LATCH2_Pin|LATCH3_Pin
 8000506:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800050a:	613b      	str	r3, [r7, #16]
                          |LATCH4_Pin|OE_Pin|SW0_Pin|SW1_Pin
                          |SW2_Pin|SW3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	2301      	movs	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2302      	movs	r3, #2
 8000516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	480d      	ldr	r0, [pc, #52]	; (8000554 <MX_GPIO_Init+0x104>)
 8000520:	f000 faf8 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB0_Pin DB1_Pin DB2_Pin DB10_Pin
                           DB11_Pin DB12_Pin DB13_Pin DB14_Pin
                           DB15_Pin DB3_Pin DB4_Pin DB5_Pin
                           DB6_Pin DB7_Pin DB8_Pin DB9_Pin */
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB10_Pin
 8000524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000528:	613b      	str	r3, [r7, #16]
                          |DB11_Pin|DB12_Pin|DB13_Pin|DB14_Pin
                          |DB15_Pin|DB3_Pin|DB4_Pin|DB5_Pin
                          |DB6_Pin|DB7_Pin|DB8_Pin|DB9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	2301      	movs	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2302      	movs	r3, #2
 8000534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4619      	mov	r1, r3
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <MX_GPIO_Init+0x108>)
 800053e:	f000 fae9 	bl	8000b14 <HAL_GPIO_Init>

}
 8000542:	bf00      	nop
 8000544:	3720      	adds	r7, #32
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	40011000 	.word	0x40011000
 8000554:	40010800 	.word	0x40010800
 8000558:	40010c00 	.word	0x40010c00

0800055c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800056c:	d105      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x1e>
		++timer_Check;
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b03      	ldr	r3, [pc, #12]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000578:	701a      	strb	r2, [r3, #0]

	}


}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	20000028 	.word	0x20000028

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000590:	e7fe      	b.n	8000590 <Error_Handler+0x8>
	...

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <HAL_MspInit+0x6c>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <HAL_MspInit+0x6c>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_MspInit+0x6c>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_MspInit+0x6c>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <HAL_MspInit+0x6c>)
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_MspInit+0x6c>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2005      	movs	r0, #5
 80005d0:	f000 fa69 	bl	8000aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80005d4:	2005      	movs	r0, #5
 80005d6:	f000 fa82 	bl	8000ade <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_MspInit+0x70>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <HAL_MspInit+0x70>)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	40010000 	.word	0x40010000

08000608 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <HAL_RTC_MspInit+0x3c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d110      	bne.n	800063c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800061a:	f000 fd3b 	bl	8001094 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_RTC_MspInit+0x40>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <HAL_RTC_MspInit+0x40>)
 8000624:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_RTC_MspInit+0x40>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_RTC_MspInit+0x44>)
 8000638:	2201      	movs	r2, #1
 800063a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40002800 	.word	0x40002800
 8000648:	40021000 	.word	0x40021000
 800064c:	4242043c 	.word	0x4242043c

08000650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000660:	d113      	bne.n	800068a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_TIM_Base_MspInit+0x44>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <HAL_TIM_Base_MspInit+0x44>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_TIM_Base_MspInit+0x44>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	201c      	movs	r0, #28
 8000680:	f000 fa11 	bl	8000aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000684:	201c      	movs	r0, #28
 8000686:	f000 fa2a 	bl	8000ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <HAL_UART_MspInit+0x8c>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d131      	bne.n	800071c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin;
 80006e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4619      	mov	r1, r3
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <HAL_UART_MspInit+0x94>)
 80006fe:	f000 fa09 	bl	8000b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_RX_Pin;
 8000702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4619      	mov	r1, r3
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <HAL_UART_MspInit+0x94>)
 8000718:	f000 f9fc 	bl	8000b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40013800 	.word	0x40013800
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800

08000730 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <HAL_PCD_MspInit+0x34>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d10b      	bne.n	800075a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_PCD_MspInit+0x38>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_PCD_MspInit+0x38>)
 8000748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_PCD_MspInit+0x38>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40005c00 	.word	0x40005c00
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b2:	f000 f885 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}

080007ba <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
	...

080007c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <TIM2_IRQHandler+0x10>)
 80007ce:	f001 fe31 	bl	8002434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000084 	.word	0x20000084

080007dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ea:	490d      	ldr	r1, [pc, #52]	; (8000820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000800:	4c0a      	ldr	r4, [pc, #40]	; (800082c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800080e:	f7ff ffe5 	bl	80007dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000812:	f002 faa3 	bl	8002d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000816:	f7ff fc99 	bl	800014c <main>
  bx lr
 800081a:	4770      	bx	lr
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000824:	08002e0c 	.word	0x08002e0c
  ldr r2, =_sbss
 8000828:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800082c:	200003bc 	.word	0x200003bc

08000830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC1_2_IRQHandler>
	...

08000834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_Init+0x28>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_Init+0x28>)
 800083e:	f043 0310 	orr.w	r3, r3, #16
 8000842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f923 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084a:	200f      	movs	r0, #15
 800084c:	f000 f808 	bl	8000860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000850:	f7ff fea0 	bl	8000594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40022000 	.word	0x40022000

08000860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_InitTick+0x54>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_InitTick+0x58>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000876:	fbb3 f3f1 	udiv	r3, r3, r1
 800087a:	fbb2 f3f3 	udiv	r3, r2, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f93b 	bl	8000afa <HAL_SYSTICK_Config>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e00e      	b.n	80008ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d80a      	bhi.n	80008aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800089c:	f000 f903 	bl	8000aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a0:	4a06      	ldr	r2, [pc, #24]	; (80008bc <HAL_InitTick+0x5c>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e000      	b.n	80008ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000004 	.word	0x20000004

080008c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_IncTick+0x1c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x20>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a03      	ldr	r2, [pc, #12]	; (80008e0 <HAL_IncTick+0x20>)
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	20000008 	.word	0x20000008
 80008e0:	200003b8 	.word	0x200003b8

080008e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;
 80008e8:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <HAL_GetTick+0x10>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	200003b8 	.word	0x200003b8

080008f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	60d3      	str	r3, [r2, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <__NVIC_GetPriorityGrouping+0x18>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	f003 0307 	and.w	r3, r3, #7
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	2b00      	cmp	r3, #0
 800096c:	db0b      	blt.n	8000986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	f003 021f 	and.w	r2, r3, #31
 8000974:	4906      	ldr	r1, [pc, #24]	; (8000990 <__NVIC_EnableIRQ+0x34>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	095b      	lsrs	r3, r3, #5
 800097c:	2001      	movs	r0, #1
 800097e:	fa00 f202 	lsl.w	r2, r0, r2
 8000982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	e000e100 	.word	0xe000e100

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	; 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a70:	f7ff ff90 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff2d 	bl	80008f8 <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff42 	bl	8000940 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff90 	bl	80009e8 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5f 	bl	8000994 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff35 	bl	800095c <__NVIC_EnableIRQ>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffa2 	bl	8000a4c <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b08b      	sub	sp, #44	; 0x2c
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b26:	e169      	b.n	8000dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	f040 8158 	bne.w	8000df6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a9a      	ldr	r2, [pc, #616]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d05e      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b50:	4a98      	ldr	r2, [pc, #608]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d875      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b56:	4a98      	ldr	r2, [pc, #608]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d058      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b5c:	4a96      	ldr	r2, [pc, #600]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d86f      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b62:	4a96      	ldr	r2, [pc, #600]	; (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d052      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b68:	4a94      	ldr	r2, [pc, #592]	; (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d869      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b6e:	4a94      	ldr	r2, [pc, #592]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d04c      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b74:	4a92      	ldr	r2, [pc, #584]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d863      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b7a:	4a92      	ldr	r2, [pc, #584]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d046      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b80:	4a90      	ldr	r2, [pc, #576]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d85d      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d82a      	bhi.n	8000be0 <HAL_GPIO_Init+0xcc>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d859      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <HAL_GPIO_Init+0x80>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000c0f 	.word	0x08000c0f
 8000b98:	08000be9 	.word	0x08000be9
 8000b9c:	08000bfb 	.word	0x08000bfb
 8000ba0:	08000c3d 	.word	0x08000c3d
 8000ba4:	08000c43 	.word	0x08000c43
 8000ba8:	08000c43 	.word	0x08000c43
 8000bac:	08000c43 	.word	0x08000c43
 8000bb0:	08000c43 	.word	0x08000c43
 8000bb4:	08000c43 	.word	0x08000c43
 8000bb8:	08000c43 	.word	0x08000c43
 8000bbc:	08000c43 	.word	0x08000c43
 8000bc0:	08000c43 	.word	0x08000c43
 8000bc4:	08000c43 	.word	0x08000c43
 8000bc8:	08000c43 	.word	0x08000c43
 8000bcc:	08000c43 	.word	0x08000c43
 8000bd0:	08000c43 	.word	0x08000c43
 8000bd4:	08000c43 	.word	0x08000c43
 8000bd8:	08000bf1 	.word	0x08000bf1
 8000bdc:	08000c05 	.word	0x08000c05
 8000be0:	4a79      	ldr	r2, [pc, #484]	; (8000dc8 <HAL_GPIO_Init+0x2b4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d013      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be6:	e02c      	b.n	8000c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e029      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	623b      	str	r3, [r7, #32]
          break;
 8000bf8:	e024      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	623b      	str	r3, [r7, #32]
          break;
 8000c02:	e01f      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	330c      	adds	r3, #12
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e01a      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c16:	2304      	movs	r3, #4
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e013      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d105      	bne.n	8000c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c24:	2308      	movs	r3, #8
 8000c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	611a      	str	r2, [r3, #16]
          break;
 8000c2e:	e009      	b.n	8000c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c30:	2308      	movs	r3, #8
 8000c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	615a      	str	r2, [r3, #20]
          break;
 8000c3a:	e003      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e000      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          break;
 8000c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2bff      	cmp	r3, #255	; 0xff
 8000c48:	d801      	bhi.n	8000c4e <HAL_GPIO_Init+0x13a>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	e001      	b.n	8000c52 <HAL_GPIO_Init+0x13e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3304      	adds	r3, #4
 8000c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2bff      	cmp	r3, #255	; 0xff
 8000c58:	d802      	bhi.n	8000c60 <HAL_GPIO_Init+0x14c>
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	e002      	b.n	8000c66 <HAL_GPIO_Init+0x152>
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3b08      	subs	r3, #8
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	401a      	ands	r2, r3
 8000c78:	6a39      	ldr	r1, [r7, #32]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c94:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a4c      	ldr	r2, [pc, #304]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b4a      	ldr	r3, [pc, #296]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cac:	4a48      	ldr	r2, [pc, #288]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a40      	ldr	r2, [pc, #256]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d013      	beq.n	8000d00 <HAL_GPIO_Init+0x1ec>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3f      	ldr	r2, [pc, #252]	; (8000dd8 <HAL_GPIO_Init+0x2c4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d00d      	beq.n	8000cfc <HAL_GPIO_Init+0x1e8>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <HAL_GPIO_Init+0x2c8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d007      	beq.n	8000cf8 <HAL_GPIO_Init+0x1e4>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <HAL_GPIO_Init+0x2cc>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d101      	bne.n	8000cf4 <HAL_GPIO_Init+0x1e0>
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e006      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	e004      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e002      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e000      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000d00:	2300      	movs	r3, #0
 8000d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d04:	f002 0203 	and.w	r2, r2, #3
 8000d08:	0092      	lsls	r2, r2, #2
 8000d0a:	4093      	lsls	r3, r2
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d12:	492f      	ldr	r1, [pc, #188]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	3302      	adds	r3, #2
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d006      	beq.n	8000d3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	492c      	ldr	r1, [pc, #176]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]
 8000d38:	e006      	b.n	8000d48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4928      	ldr	r1, [pc, #160]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	4922      	ldr	r1, [pc, #136]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	604b      	str	r3, [r1, #4]
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	491e      	ldr	r1, [pc, #120]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	4918      	ldr	r1, [pc, #96]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	608b      	str	r3, [r1, #8]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4914      	ldr	r1, [pc, #80]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d021      	beq.n	8000de8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	490e      	ldr	r1, [pc, #56]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60cb      	str	r3, [r1, #12]
 8000db0:	e021      	b.n	8000df6 <HAL_GPIO_Init+0x2e2>
 8000db2:	bf00      	nop
 8000db4:	10320000 	.word	0x10320000
 8000db8:	10310000 	.word	0x10310000
 8000dbc:	10220000 	.word	0x10220000
 8000dc0:	10210000 	.word	0x10210000
 8000dc4:	10120000 	.word	0x10120000
 8000dc8:	10110000 	.word	0x10110000
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40011400 	.word	0x40011400
 8000de4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_GPIO_Init+0x304>)
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	4909      	ldr	r1, [pc, #36]	; (8000e18 <HAL_GPIO_Init+0x304>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	3301      	adds	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	fa22 f303 	lsr.w	r3, r2, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f47f ae8e 	bne.w	8000b28 <HAL_GPIO_Init+0x14>
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	372c      	adds	r7, #44	; 0x2c
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e38:	e003      	b.n	8000e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	041a      	lsls	r2, r3, #16
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	611a      	str	r2, [r3, #16]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4013      	ands	r3, r2
 8000e64:	041a      	lsls	r2, r3, #16
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43d9      	mvns	r1, r3
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	611a      	str	r2, [r3, #16]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e80:	b08b      	sub	sp, #44	; 0x2c
 8000e82:	af06      	add	r7, sp, #24
 8000e84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e0fd      	b.n	800108c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d106      	bne.n	8000eaa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fc43 	bl	8000730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2203      	movs	r2, #3
 8000eae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 ff00 	bl	8002cbc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	687e      	ldr	r6, [r7, #4]
 8000ec4:	466d      	mov	r5, sp
 8000ec6:	f106 0410 	add.w	r4, r6, #16
 8000eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	602b      	str	r3, [r5, #0]
 8000ed2:	1d33      	adds	r3, r6, #4
 8000ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed6:	6838      	ldr	r0, [r7, #0]
 8000ed8:	f001 fee0 	bl	8002c9c <USB_CoreInit>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d005      	beq.n	8000eee <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0ce      	b.n	800108c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fefb 	bl	8002cf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e04c      	b.n	8000f9a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	3301      	adds	r3, #1
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	b298      	uxth	r0, r3
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3336      	adds	r3, #54	; 0x36
 8000f3e:	4602      	mov	r2, r0
 8000f40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	440b      	add	r3, r1
 8000f52:	3303      	adds	r3, #3
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	440b      	add	r3, r1
 8000f66:	3338      	adds	r3, #56	; 0x38
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	333c      	adds	r3, #60	; 0x3c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f80:	7bfa      	ldrb	r2, [r7, #15]
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3340      	adds	r3, #64	; 0x40
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3301      	adds	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d3ad      	bcc.n	8000f00 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e044      	b.n	8001034 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000faa:	7bfa      	ldrb	r2, [r7, #15]
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	440b      	add	r3, r1
 8000fce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	3301      	adds	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3b5      	bcc.n	8000faa <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	687e      	ldr	r6, [r7, #4]
 8001046:	466d      	mov	r5, sp
 8001048:	f106 0410 	add.w	r4, r6, #16
 800104c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	602b      	str	r3, [r5, #0]
 8001054:	1d33      	adds	r3, r6, #4
 8001056:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f001 fe55 	bl	8002d08 <USB_DevInit>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2202      	movs	r2, #2
 8001068:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e00d      	b.n	800108c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fe5f 	bl	8002d48 <USB_DevDisconnect>

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001094 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_PWR_EnableBkUpAccess+0x14>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	420e0020 	.word	0x420e0020

080010ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e26c      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8087 	beq.w	80011da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010cc:	4b92      	ldr	r3, [pc, #584]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d00c      	beq.n	80010f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d8:	4b8f      	ldr	r3, [pc, #572]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d112      	bne.n	800110a <HAL_RCC_OscConfig+0x5e>
 80010e4:	4b8c      	ldr	r3, [pc, #560]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f0:	d10b      	bne.n	800110a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f2:	4b89      	ldr	r3, [pc, #548]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d06c      	beq.n	80011d8 <HAL_RCC_OscConfig+0x12c>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d168      	bne.n	80011d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e246      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001112:	d106      	bne.n	8001122 <HAL_RCC_OscConfig+0x76>
 8001114:	4b80      	ldr	r3, [pc, #512]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a7f      	ldr	r2, [pc, #508]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e02e      	b.n	8001180 <HAL_RCC_OscConfig+0xd4>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x98>
 800112a:	4b7b      	ldr	r3, [pc, #492]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a7a      	ldr	r2, [pc, #488]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b78      	ldr	r3, [pc, #480]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a77      	ldr	r2, [pc, #476]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800113c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e01d      	b.n	8001180 <HAL_RCC_OscConfig+0xd4>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0xbc>
 800114e:	4b72      	ldr	r3, [pc, #456]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a71      	ldr	r2, [pc, #452]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a6e      	ldr	r2, [pc, #440]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e00b      	b.n	8001180 <HAL_RCC_OscConfig+0xd4>
 8001168:	4b6b      	ldr	r3, [pc, #428]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a6a      	ldr	r2, [pc, #424]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800116e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b68      	ldr	r3, [pc, #416]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a67      	ldr	r2, [pc, #412]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d013      	beq.n	80011b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fbac 	bl	80008e4 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fba8 	bl	80008e4 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1fa      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0xe4>
 80011ae:	e014      	b.n	80011da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fb98 	bl	80008e4 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fb94 	bl	80008e4 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e1e6      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ca:	4b53      	ldr	r3, [pc, #332]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x10c>
 80011d6:	e000      	b.n	80011da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d063      	beq.n	80012ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e6:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d11c      	bne.n	8001238 <HAL_RCC_OscConfig+0x18c>
 80011fe:	4b46      	ldr	r3, [pc, #280]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d116      	bne.n	8001238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	4b43      	ldr	r3, [pc, #268]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <HAL_RCC_OscConfig+0x176>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d001      	beq.n	8001222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e1ba      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4939      	ldr	r1, [pc, #228]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	e03a      	b.n	80012ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d020      	beq.n	8001282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_RCC_OscConfig+0x270>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fb4d 	bl	80008e4 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124e:	f7ff fb49 	bl	80008e4 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e19b      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4927      	ldr	r1, [pc, #156]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
 8001280:	e015      	b.n	80012ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_RCC_OscConfig+0x270>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fb2c 	bl	80008e4 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fb28 	bl	80008e4 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e17a      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d03a      	beq.n	8001330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d019      	beq.n	80012f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_RCC_OscConfig+0x274>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fb0c 	bl	80008e4 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff fb08 	bl	80008e4 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e15a      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f000 fad8 	bl	80018a4 <RCC_Delay>
 80012f4:	e01c      	b.n	8001330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_RCC_OscConfig+0x274>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fc:	f7ff faf2 	bl	80008e4 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001302:	e00f      	b.n	8001324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff faee 	bl	80008e4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d908      	bls.n	8001324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e140      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	42420000 	.word	0x42420000
 8001320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001324:	4b9e      	ldr	r3, [pc, #632]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1e9      	bne.n	8001304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80a6 	beq.w	800148a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001342:	4b97      	ldr	r3, [pc, #604]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10d      	bne.n	800136a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b94      	ldr	r3, [pc, #592]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a93      	ldr	r2, [pc, #588]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b91      	ldr	r3, [pc, #580]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001366:	2301      	movs	r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136a:	4b8e      	ldr	r3, [pc, #568]	; (80015a4 <HAL_RCC_OscConfig+0x4f8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d118      	bne.n	80013a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001376:	4b8b      	ldr	r3, [pc, #556]	; (80015a4 <HAL_RCC_OscConfig+0x4f8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a8a      	ldr	r2, [pc, #552]	; (80015a4 <HAL_RCC_OscConfig+0x4f8>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001382:	f7ff faaf 	bl	80008e4 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138a:	f7ff faab 	bl	80008e4 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b64      	cmp	r3, #100	; 0x64
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e0fd      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	4b81      	ldr	r3, [pc, #516]	; (80015a4 <HAL_RCC_OscConfig+0x4f8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x312>
 80013b0:	4b7b      	ldr	r3, [pc, #492]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4a7a      	ldr	r2, [pc, #488]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6213      	str	r3, [r2, #32]
 80013bc:	e02d      	b.n	800141a <HAL_RCC_OscConfig+0x36e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x334>
 80013c6:	4b76      	ldr	r3, [pc, #472]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a75      	ldr	r2, [pc, #468]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	6213      	str	r3, [r2, #32]
 80013d2:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4a72      	ldr	r2, [pc, #456]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	f023 0304 	bic.w	r3, r3, #4
 80013dc:	6213      	str	r3, [r2, #32]
 80013de:	e01c      	b.n	800141a <HAL_RCC_OscConfig+0x36e>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d10c      	bne.n	8001402 <HAL_RCC_OscConfig+0x356>
 80013e8:	4b6d      	ldr	r3, [pc, #436]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4a6c      	ldr	r2, [pc, #432]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6213      	str	r3, [r2, #32]
 80013f4:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4a69      	ldr	r2, [pc, #420]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6213      	str	r3, [r2, #32]
 8001400:	e00b      	b.n	800141a <HAL_RCC_OscConfig+0x36e>
 8001402:	4b67      	ldr	r3, [pc, #412]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a66      	ldr	r2, [pc, #408]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6213      	str	r3, [r2, #32]
 800140e:	4b64      	ldr	r3, [pc, #400]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4a63      	ldr	r2, [pc, #396]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	f023 0304 	bic.w	r3, r3, #4
 8001418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d015      	beq.n	800144e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fa5f 	bl	80008e4 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff fa5b 	bl	80008e4 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e0ab      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001440:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ee      	beq.n	800142a <HAL_RCC_OscConfig+0x37e>
 800144c:	e014      	b.n	8001478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fa49 	bl	80008e4 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fa45 	bl	80008e4 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e095      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146c:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ee      	bne.n	8001456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d105      	bne.n	800148a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147e:	4b48      	ldr	r3, [pc, #288]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a47      	ldr	r2, [pc, #284]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8081 	beq.w	8001596 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001494:	4b42      	ldr	r3, [pc, #264]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d061      	beq.n	8001564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d146      	bne.n	8001536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a8:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <HAL_RCC_OscConfig+0x4fc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fa19 	bl	80008e4 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fa15 	bl	80008e4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e067      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014dc:	d108      	bne.n	80014f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	492d      	ldr	r1, [pc, #180]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a19      	ldr	r1, [r3, #32]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	430b      	orrs	r3, r1
 8001502:	4927      	ldr	r1, [pc, #156]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_RCC_OscConfig+0x4fc>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff f9e9 	bl	80008e4 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff f9e5 	bl	80008e4 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e037      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x46a>
 8001534:	e02f      	b.n	8001596 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_RCC_OscConfig+0x4fc>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff f9d2 	bl	80008e4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff f9ce 	bl	80008e4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e020      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x498>
 8001562:	e018      	b.n	8001596 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e013      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	429a      	cmp	r2, r3
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40007000 	.word	0x40007000
 80015a8:	42420060 	.word	0x42420060

080015ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0d0      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c0:	4b6a      	ldr	r3, [pc, #424]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d910      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b67      	ldr	r3, [pc, #412]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 0207 	bic.w	r2, r3, #7
 80015d6:	4965      	ldr	r1, [pc, #404]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0b8      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a58      	ldr	r2, [pc, #352]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a52      	ldr	r2, [pc, #328]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800162a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b50      	ldr	r3, [pc, #320]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	494d      	ldr	r1, [pc, #308]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d040      	beq.n	80016cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d115      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e07f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e073      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e06b      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f023 0203 	bic.w	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4936      	ldr	r1, [pc, #216]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff f922 	bl	80008e4 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a4:	f7ff f91e 	bl	80008e4 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e053      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 020c 	and.w	r2, r3, #12
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1eb      	bne.n	80016a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d210      	bcs.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0207 	bic.w	r2, r3, #7
 80016e2:	4922      	ldr	r1, [pc, #136]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e032      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4916      	ldr	r1, [pc, #88]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	490e      	ldr	r1, [pc, #56]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173a:	f000 f821 	bl	8001780 <HAL_RCC_GetSysClockFreq>
 800173e:	4602      	mov	r2, r0
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	490a      	ldr	r1, [pc, #40]	; (8001774 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	5ccb      	ldrb	r3, [r1, r3]
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <HAL_RCC_ClockConfig+0x1cc>)
 8001754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_RCC_ClockConfig+0x1d0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f880 	bl	8000860 <HAL_InitTick>

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40022000 	.word	0x40022000
 8001770:	40021000 	.word	0x40021000
 8001774:	08002dec 	.word	0x08002dec
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004

08001780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001780:	b490      	push	{r4, r7}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001786:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001788:	1d3c      	adds	r4, r7, #4
 800178a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800178c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001790:	f240 2301 	movw	r3, #513	; 0x201
 8001794:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d002      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x40>
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x46>
 80017be:	e02d      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c2:	623b      	str	r3, [r7, #32]
      break;
 80017c4:	e02d      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	0c9b      	lsrs	r3, r3, #18
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017d2:	4413      	add	r3, r2
 80017d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	0c5b      	lsrs	r3, r3, #17
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017f2:	4413      	add	r3, r2
 80017f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017fe:	fb02 f203 	mul.w	r2, r2, r3
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	fbb2 f3f3 	udiv	r3, r2, r3
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	e004      	b.n	8001816 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	623b      	str	r3, [r7, #32]
      break;
 800181a:	e002      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800181e:	623b      	str	r3, [r7, #32]
      break;
 8001820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001822:	6a3b      	ldr	r3, [r7, #32]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bc90      	pop	{r4, r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	08002dcc 	.word	0x08002dcc
 8001834:	40021000 	.word	0x40021000
 8001838:	007a1200 	.word	0x007a1200
 800183c:	003d0900 	.word	0x003d0900

08001840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <HAL_RCC_GetHCLKFreq+0x10>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000000 	.word	0x20000000

08001854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001858:	f7ff fff2 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 800185c:	4602      	mov	r2, r0
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	4903      	ldr	r1, [pc, #12]	; (8001878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	08002dfc 	.word	0x08002dfc

0800187c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001880:	f7ff ffde 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 8001884:	4602      	mov	r2, r0
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	0adb      	lsrs	r3, r3, #11
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	4903      	ldr	r1, [pc, #12]	; (80018a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001892:	5ccb      	ldrb	r3, [r1, r3]
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001898:	4618      	mov	r0, r3
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000
 80018a0:	08002dfc 	.word	0x08002dfc

080018a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <RCC_Delay+0x34>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <RCC_Delay+0x38>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0a5b      	lsrs	r3, r3, #9
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018c0:	bf00      	nop
  }
  while (Delay --);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	60fa      	str	r2, [r7, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f9      	bne.n	80018c0 <RCC_Delay+0x1c>
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000000 	.word	0x20000000
 80018dc:	10624dd3 	.word	0x10624dd3

080018e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d07d      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001900:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10d      	bne.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001916:	61d3      	str	r3, [r2, #28]
 8001918:	4b49      	ldr	r3, [pc, #292]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001924:	2301      	movs	r3, #1
 8001926:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001928:	4b46      	ldr	r3, [pc, #280]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d118      	bne.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001940:	f7fe ffd0 	bl	80008e4 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001946:	e008      	b.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001948:	f7fe ffcc 	bl	80008e4 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e06d      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001966:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800196e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d02e      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d027      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001984:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800198c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800199a:	4a29      	ldr	r2, [pc, #164]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d014      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7fe ff9b 	bl	80008e4 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7fe ff97 	bl	80008e4 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e036      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ee      	beq.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4917      	ldr	r1, [pc, #92]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	490b      	ldr	r1, [pc, #44]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4904      	ldr	r1, [pc, #16]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40007000 	.word	0x40007000
 8001a48:	42420440 	.word	0x42420440

08001a4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b08d      	sub	sp, #52	; 0x34
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a54:	4b5a      	ldr	r3, [pc, #360]	; (8001bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001a56:	f107 040c 	add.w	r4, r7, #12
 8001a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a60:	f240 2301 	movw	r3, #513	; 0x201
 8001a64:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b10      	cmp	r3, #16
 8001a7e:	d00a      	beq.n	8001a96 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	f200 8091 	bhi.w	8001baa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d04c      	beq.n	8001b28 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d07c      	beq.n	8001b8e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001a94:	e089      	b.n	8001baa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001a96:	4b4b      	ldr	r3, [pc, #300]	; (8001bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001a9c:	4b49      	ldr	r3, [pc, #292]	; (8001bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 8082 	beq.w	8001bae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	0c9b      	lsrs	r3, r3, #18
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001abc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d018      	beq.n	8001afa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ac8:	4b3e      	ldr	r3, [pc, #248]	; (8001bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0c5b      	lsrs	r3, r3, #17
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00d      	beq.n	8001b04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001ae8:	4a37      	ldr	r2, [pc, #220]	; (8001bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af8:	e004      	b.n	8001b04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	4a33      	ldr	r2, [pc, #204]	; (8001bcc <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001b04:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b10:	d102      	bne.n	8001b18 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b16:	e04a      	b.n	8001bae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4a2c      	ldr	r2, [pc, #176]	; (8001bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b26:	e042      	b.n	8001bae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001b28:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b38:	d108      	bne.n	8001b4c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b4a:	e01f      	b.n	8001b8c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b56:	d109      	bne.n	8001b6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001b64:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b6a:	e00f      	b.n	8001b8c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b76:	d11c      	bne.n	8001bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d016      	beq.n	8001bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001b84:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b8a:	e012      	b.n	8001bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001b8c:	e011      	b.n	8001bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001b8e:	f7ff fe75 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	0b9b      	lsrs	r3, r3, #14
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ba8:	e004      	b.n	8001bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001baa:	bf00      	nop
 8001bac:	e002      	b.n	8001bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001bae:	bf00      	nop
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001bb2:	bf00      	nop
    }
  }
  return (frequency);
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3734      	adds	r7, #52	; 0x34
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd90      	pop	{r4, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	08002ddc 	.word	0x08002ddc
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	007a1200 	.word	0x007a1200
 8001bcc:	003d0900 	.word	0x003d0900
 8001bd0:	aaaaaaab 	.word	0xaaaaaaab

08001bd4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e084      	b.n	8001cf4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7c5b      	ldrb	r3, [r3, #17]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe fd04 	bl	8000608 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f9c8 	bl	8001f9c <HAL_RTC_WaitForSynchro>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2204      	movs	r2, #4
 8001c16:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e06b      	b.n	8001cf4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fa81 	bl	8002124 <RTC_EnterInitMode>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e060      	b.n	8001cf4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0207 	bic.w	r2, r2, #7
 8001c40:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <HAL_RTC_Init+0x128>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a2b      	ldr	r2, [pc, #172]	; (8001cfc <HAL_RTC_Init+0x128>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <HAL_RTC_Init+0x128>)
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4926      	ldr	r1, [pc, #152]	; (8001cfc <HAL_RTC_Init+0x128>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c70:	d003      	beq.n	8001c7a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	e00e      	b.n	8001c98 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f7ff fee6 	bl	8001a4c <HAL_RCCEx_GetPeriphCLKFreq>
 8001c80:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d104      	bne.n	8001c92 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e030      	b.n	8001cf4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 010f 	bic.w	r1, r3, #15
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	0c1a      	lsrs	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0c1b      	lsrs	r3, r3, #16
 8001cb6:	041b      	lsls	r3, r3, #16
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	b291      	uxth	r1, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fa55 	bl	8002174 <RTC_ExitInitMode>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00c      	b.n	8001cf4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
  }
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40006c00 	.word	0x40006c00

08001d00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_RTC_SetTime+0x20>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e080      	b.n	8001e26 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	7c1b      	ldrb	r3, [r3, #16]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_RTC_SetTime+0x30>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e07a      	b.n	8001e26 <HAL_RTC_SetTime+0x126>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2201      	movs	r2, #1
 8001d34:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d113      	bne.n	8001d6a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d4c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	785b      	ldrb	r3, [r3, #1]
 8001d54:	4619      	mov	r1, r3
 8001d56:	460b      	mov	r3, r1
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	1a5b      	subs	r3, r3, r1
 8001d5c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d5e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d64:	4413      	add	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e01e      	b.n	8001da8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fa28 	bl	80021c4 <RTC_Bcd2ToByte>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d7c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	785b      	ldrb	r3, [r3, #1]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fa1d 	bl	80021c4 <RTC_Bcd2ToByte>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4613      	mov	r3, r2
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d96:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	789b      	ldrb	r3, [r3, #2]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 fa11 	bl	80021c4 <RTC_Bcd2ToByte>
 8001da2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001da4:	4423      	add	r3, r4
 8001da6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001da8:	6979      	ldr	r1, [r7, #20]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f953 	bl	8002056 <RTC_WriteTimeCounter>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2204      	movs	r2, #4
 8001dba:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e02f      	b.n	8001e26 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0205 	bic.w	r2, r2, #5
 8001dd4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f964 	bl	80020a4 <RTC_ReadAlarmCounter>
 8001ddc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001de4:	d018      	beq.n	8001e18 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d214      	bcs.n	8001e18 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001df4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001df8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001dfa:	6939      	ldr	r1, [r7, #16]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f96a 	bl	80020d6 <RTC_WriteAlarmCounter>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e006      	b.n	8001e26 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001e24:	2300      	movs	r3, #0
  }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd90      	pop	{r4, r7, pc}
	...

08001e30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_RTC_SetDate+0x24>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e097      	b.n	8001f88 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	7c1b      	ldrb	r3, [r3, #16]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_RTC_SetDate+0x34>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e091      	b.n	8001f88 <HAL_RTC_SetDate+0x158>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	78da      	ldrb	r2, [r3, #3]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	785a      	ldrb	r2, [r3, #1]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	789a      	ldrb	r2, [r3, #2]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	739a      	strb	r2, [r3, #14]
 8001e8e:	e01a      	b.n	8001ec6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	78db      	ldrb	r3, [r3, #3]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 f995 	bl	80021c4 <RTC_Bcd2ToByte>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	785b      	ldrb	r3, [r3, #1]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f98c 	bl	80021c4 <RTC_Bcd2ToByte>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	789b      	ldrb	r3, [r3, #2]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 f983 	bl	80021c4 <RTC_Bcd2ToByte>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	7bdb      	ldrb	r3, [r3, #15]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	7b59      	ldrb	r1, [r3, #13]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	7b9b      	ldrb	r3, [r3, #14]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f000 f993 	bl	8002200 <RTC_WeekDayNum>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	7b1a      	ldrb	r2, [r3, #12]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f883 	bl	8001ff6 <RTC_ReadTimeCounter>
 8001ef0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <HAL_RTC_SetDate+0x160>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0adb      	lsrs	r3, r3, #11
 8001efc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b18      	cmp	r3, #24
 8001f02:	d93a      	bls.n	8001f7a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	4a23      	ldr	r2, [pc, #140]	; (8001f94 <HAL_RTC_SetDate+0x164>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	4a22      	ldr	r2, [pc, #136]	; (8001f98 <HAL_RTC_SetDate+0x168>)
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001f1a:	69f9      	ldr	r1, [r7, #28]
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 f89a 	bl	8002056 <RTC_WriteTimeCounter>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e027      	b.n	8001f88 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f8b3 	bl	80020a4 <RTC_ReadAlarmCounter>
 8001f3e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f46:	d018      	beq.n	8001f7a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d214      	bcs.n	8001f7a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001f56:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f5a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001f5c:	69b9      	ldr	r1, [r7, #24]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f8b9 	bl	80020d6 <RTC_WriteAlarmCounter>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e006      	b.n	8001f88 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	91a2b3c5 	.word	0x91a2b3c5
 8001f94:	aaaaaaab 	.word	0xaaaaaaab
 8001f98:	00015180 	.word	0x00015180

08001f9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e01d      	b.n	8001fee <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0208 	bic.w	r2, r2, #8
 8001fc0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001fc2:	f7fe fc8f 	bl	80008e4 <HAL_GetTick>
 8001fc6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001fc8:	e009      	b.n	8001fde <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001fca:	f7fe fc8b 	bl	80008e4 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd8:	d901      	bls.n	8001fde <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e007      	b.n	8001fee <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ee      	beq.n	8001fca <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b087      	sub	sp, #28
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	827b      	strh	r3, [r7, #18]
 8002002:	2300      	movs	r3, #0
 8002004:	823b      	strh	r3, [r7, #16]
 8002006:	2300      	movs	r3, #0
 8002008:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002026:	8a7a      	ldrh	r2, [r7, #18]
 8002028:	8a3b      	ldrh	r3, [r7, #16]
 800202a:	429a      	cmp	r2, r3
 800202c:	d008      	beq.n	8002040 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800202e:	8a3b      	ldrh	r3, [r7, #16]
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	b29b      	uxth	r3, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e004      	b.n	800204a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002040:	8a7b      	ldrh	r3, [r7, #18]
 8002042:	041a      	lsls	r2, r3, #16
 8002044:	89fb      	ldrh	r3, [r7, #14]
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800204a:	697b      	ldr	r3, [r7, #20]
}
 800204c:	4618      	mov	r0, r3
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f85d 	bl	8002124 <RTC_EnterInitMode>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e011      	b.n	800209a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	0c12      	lsrs	r2, r2, #16
 800207e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	b292      	uxth	r2, r2
 8002088:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f872 	bl	8002174 <RTC_ExitInitMode>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	81fb      	strh	r3, [r7, #14]
 80020b0:	2300      	movs	r3, #0
 80020b2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80020c4:	89fb      	ldrh	r3, [r7, #14]
 80020c6:	041a      	lsls	r2, r3, #16
 80020c8:	89bb      	ldrh	r3, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f81d 	bl	8002124 <RTC_EnterInitMode>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e011      	b.n	800211a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	0c12      	lsrs	r2, r2, #16
 80020fe:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b292      	uxth	r2, r2
 8002108:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f832 	bl	8002174 <RTC_ExitInitMode>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002130:	f7fe fbd8 	bl	80008e4 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002136:	e009      	b.n	800214c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002138:	f7fe fbd4 	bl	80008e4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002146:	d901      	bls.n	800214c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e00f      	b.n	800216c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0ee      	beq.n	8002138 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0210 	orr.w	r2, r2, #16
 8002168:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0210 	bic.w	r2, r2, #16
 800218e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002190:	f7fe fba8 	bl	80008e4 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002196:	e009      	b.n	80021ac <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002198:	f7fe fba4 	bl	80008e4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a6:	d901      	bls.n	80021ac <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e007      	b.n	80021bc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ee      	beq.n	8002198 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	b2db      	uxtb	r3, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
	...

08002200 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	70fb      	strb	r3, [r7, #3]
 800220c:	4613      	mov	r3, r2
 800220e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800221e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d82d      	bhi.n	8002282 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	4a2c      	ldr	r2, [pc, #176]	; (80022e4 <RTC_WeekDayNum+0xe4>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	085a      	lsrs	r2, r3, #1
 800223a:	78bb      	ldrb	r3, [r7, #2]
 800223c:	441a      	add	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	441a      	add	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	3b01      	subs	r3, #1
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	441a      	add	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3b01      	subs	r3, #1
 800224e:	4926      	ldr	r1, [pc, #152]	; (80022e8 <RTC_WeekDayNum+0xe8>)
 8002250:	fba1 1303 	umull	r1, r3, r1, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	1ad2      	subs	r2, r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3b01      	subs	r3, #1
 800225c:	4922      	ldr	r1, [pc, #136]	; (80022e8 <RTC_WeekDayNum+0xe8>)
 800225e:	fba1 1303 	umull	r1, r3, r1, r3
 8002262:	09db      	lsrs	r3, r3, #7
 8002264:	4413      	add	r3, r2
 8002266:	1d1a      	adds	r2, r3, #4
 8002268:	4b20      	ldr	r3, [pc, #128]	; (80022ec <RTC_WeekDayNum+0xec>)
 800226a:	fba3 1302 	umull	r1, r3, r3, r2
 800226e:	1ad1      	subs	r1, r2, r3
 8002270:	0849      	lsrs	r1, r1, #1
 8002272:	440b      	add	r3, r1
 8002274:	0899      	lsrs	r1, r3, #2
 8002276:	460b      	mov	r3, r1
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	1a5b      	subs	r3, r3, r1
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	e029      	b.n	80022d6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <RTC_WeekDayNum+0xe4>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	085a      	lsrs	r2, r3, #1
 8002296:	78bb      	ldrb	r3, [r7, #2]
 8002298:	441a      	add	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	441a      	add	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	441a      	add	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4910      	ldr	r1, [pc, #64]	; (80022e8 <RTC_WeekDayNum+0xe8>)
 80022a8:	fba1 1303 	umull	r1, r3, r1, r3
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	1ad2      	subs	r2, r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	490d      	ldr	r1, [pc, #52]	; (80022e8 <RTC_WeekDayNum+0xe8>)
 80022b4:	fba1 1303 	umull	r1, r3, r1, r3
 80022b8:	09db      	lsrs	r3, r3, #7
 80022ba:	4413      	add	r3, r2
 80022bc:	1c9a      	adds	r2, r3, #2
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <RTC_WeekDayNum+0xec>)
 80022c0:	fba3 1302 	umull	r1, r3, r3, r2
 80022c4:	1ad1      	subs	r1, r2, r3
 80022c6:	0849      	lsrs	r1, r1, #1
 80022c8:	440b      	add	r3, r1
 80022ca:	0899      	lsrs	r1, r3, #2
 80022cc:	460b      	mov	r3, r1
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	1a5b      	subs	r3, r3, r1
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	b2db      	uxtb	r3, r3
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	38e38e39 	.word	0x38e38e39
 80022e8:	51eb851f 	.word	0x51eb851f
 80022ec:	24924925 	.word	0x24924925

080022f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e041      	b.n	8002386 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe f99a 	bl	8000650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f000 fa70 	bl	8002814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d001      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e03a      	b.n	800241e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_TIM_Base_Start_IT+0x98>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00e      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x58>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d2:	d009      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x58>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <HAL_TIM_Base_Start_IT+0x9c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x58>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <HAL_TIM_Base_Start_IT+0xa0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d111      	bne.n	800240c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d010      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240a:	e007      	b.n	800241c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	40012c00 	.word	0x40012c00
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800

08002434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d122      	bne.n	8002490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d11b      	bne.n	8002490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0202 	mvn.w	r2, #2
 8002460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f9b1 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9a4 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f9b3 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b04      	cmp	r3, #4
 800249c:	d122      	bne.n	80024e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d11b      	bne.n	80024e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0204 	mvn.w	r2, #4
 80024b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f987 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f97a 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f989 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d122      	bne.n	8002538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d11b      	bne.n	8002538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0208 	mvn.w	r2, #8
 8002508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2204      	movs	r2, #4
 800250e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f95d 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f950 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f95f 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b10      	cmp	r3, #16
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b10      	cmp	r3, #16
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0210 	mvn.w	r2, #16
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2208      	movs	r2, #8
 8002562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f933 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f926 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f935 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0201 	mvn.w	r2, #1
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fd ffd2 	bl	800055c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c2:	2b80      	cmp	r3, #128	; 0x80
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d0:	2b80      	cmp	r3, #128	; 0x80
 80025d2:	d107      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fa77 	bl	8002ad2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d10e      	bne.n	8002610 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d107      	bne.n	8002610 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8f9 	bl	8002802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b20      	cmp	r3, #32
 800261c:	d10e      	bne.n	800263c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b20      	cmp	r3, #32
 800262a:	d107      	bne.n	800263c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0220 	mvn.w	r2, #32
 8002634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fa42 	bl	8002ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_TIM_ConfigClockSource+0x18>
 8002658:	2302      	movs	r3, #2
 800265a:	e0b3      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x180>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800267a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002682:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002694:	d03e      	beq.n	8002714 <HAL_TIM_ConfigClockSource+0xd0>
 8002696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269a:	f200 8087 	bhi.w	80027ac <HAL_TIM_ConfigClockSource+0x168>
 800269e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a2:	f000 8085 	beq.w	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026aa:	d87f      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026ac:	2b70      	cmp	r3, #112	; 0x70
 80026ae:	d01a      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0xa2>
 80026b0:	2b70      	cmp	r3, #112	; 0x70
 80026b2:	d87b      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026b4:	2b60      	cmp	r3, #96	; 0x60
 80026b6:	d050      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x116>
 80026b8:	2b60      	cmp	r3, #96	; 0x60
 80026ba:	d877      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026bc:	2b50      	cmp	r3, #80	; 0x50
 80026be:	d03c      	beq.n	800273a <HAL_TIM_ConfigClockSource+0xf6>
 80026c0:	2b50      	cmp	r3, #80	; 0x50
 80026c2:	d873      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d058      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x136>
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d86f      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026cc:	2b30      	cmp	r3, #48	; 0x30
 80026ce:	d064      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
 80026d0:	2b30      	cmp	r3, #48	; 0x30
 80026d2:	d86b      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d060      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d867      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d05c      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d05a      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026e4:	e062      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f000 f966 	bl	80029c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002708:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	609a      	str	r2, [r3, #8]
      break;
 8002712:	e04e      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6899      	ldr	r1, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f000 f94f 	bl	80029c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002736:	609a      	str	r2, [r3, #8]
      break;
 8002738:	e03b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	461a      	mov	r2, r3
 8002748:	f000 f8c6 	bl	80028d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2150      	movs	r1, #80	; 0x50
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f91d 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 8002758:	e02b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	461a      	mov	r2, r3
 8002768:	f000 f8e4 	bl	8002934 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2160      	movs	r1, #96	; 0x60
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f90d 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 8002778:	e01b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	461a      	mov	r2, r3
 8002788:	f000 f8a6 	bl	80028d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2140      	movs	r1, #64	; 0x40
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f8fd 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 8002798:	e00b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f000 f8f4 	bl	8002992 <TIM_ITRx_SetConfig>
        break;
 80027aa:	e002      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027ac:	bf00      	nop
 80027ae:	e000      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a29      	ldr	r2, [pc, #164]	; (80028cc <TIM_Base_SetConfig+0xb8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00b      	beq.n	8002844 <TIM_Base_SetConfig+0x30>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002832:	d007      	beq.n	8002844 <TIM_Base_SetConfig+0x30>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <TIM_Base_SetConfig+0xbc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <TIM_Base_SetConfig+0x30>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <TIM_Base_SetConfig+0xc0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <TIM_Base_SetConfig+0xb8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00b      	beq.n	8002876 <TIM_Base_SetConfig+0x62>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d007      	beq.n	8002876 <TIM_Base_SetConfig+0x62>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <TIM_Base_SetConfig+0xbc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d003      	beq.n	8002876 <TIM_Base_SetConfig+0x62>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <TIM_Base_SetConfig+0xc0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d108      	bne.n	8002888 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <TIM_Base_SetConfig+0xb8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d103      	bne.n	80028bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	615a      	str	r2, [r3, #20]
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40000800 	.word	0x40000800

080028d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f023 0201 	bic.w	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f023 030a 	bic.w	r3, r3, #10
 8002914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	621a      	str	r2, [r3, #32]
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f023 0210 	bic.w	r2, r3, #16
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800295e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	031b      	lsls	r3, r3, #12
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002970:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	621a      	str	r2, [r3, #32]
}
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f043 0307 	orr.w	r3, r3, #7
 80029b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	609a      	str	r2, [r3, #8]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b087      	sub	sp, #28
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	021a      	lsls	r2, r3, #8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	609a      	str	r2, [r3, #8]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e046      	b.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a16      	ldr	r2, [pc, #88]	; (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a68:	d009      	beq.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a10      	ldr	r2, [pc, #64]	; (8002abc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10c      	bne.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000800 	.word	0x40000800

08002ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e03f      	b.n	8002b76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fd fdc4 	bl	8000698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f829 	bl	8002b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bba:	f023 030c 	bic.w	r3, r3, #12
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a2c      	ldr	r2, [pc, #176]	; (8002c94 <UART_SetConfig+0x114>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d103      	bne.n	8002bf0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002be8:	f7fe fe48 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	e002      	b.n	8002bf6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bf0:	f7fe fe30 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 8002bf4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009a      	lsls	r2, r3, #2
 8002c00:	441a      	add	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <UART_SetConfig+0x118>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	0119      	lsls	r1, r3, #4
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	441a      	add	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <UART_SetConfig+0x118>)
 8002c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2064      	movs	r0, #100	; 0x64
 8002c36:	fb00 f303 	mul.w	r3, r0, r3
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	3332      	adds	r3, #50	; 0x32
 8002c40:	4a15      	ldr	r2, [pc, #84]	; (8002c98 <UART_SetConfig+0x118>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c4c:	4419      	add	r1, r3
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	009a      	lsls	r2, r3, #2
 8002c58:	441a      	add	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <UART_SetConfig+0x118>)
 8002c66:	fba3 0302 	umull	r0, r3, r3, r2
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2064      	movs	r0, #100	; 0x64
 8002c6e:	fb00 f303 	mul.w	r3, r0, r3
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	3332      	adds	r3, #50	; 0x32
 8002c78:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <UART_SetConfig+0x118>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	f003 020f 	and.w	r2, r3, #15
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	440a      	add	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40013800 	.word	0x40013800
 8002c98:	51eb851f 	.word	0x51eb851f

08002c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	f107 0014 	add.w	r0, r7, #20
 8002caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	b004      	add	sp, #16
 8002cba:	4770      	bx	lr

08002cbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cc4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cc8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	4013      	ands	r3, r2
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d08:	b084      	sub	sp, #16
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	f107 0014 	add.w	r0, r7, #20
 8002d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	b004      	add	sp, #16
 8002d46:	4770      	bx	lr

08002d48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <__libc_init_array>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	2600      	movs	r6, #0
 8002d60:	4d0c      	ldr	r5, [pc, #48]	; (8002d94 <__libc_init_array+0x38>)
 8002d62:	4c0d      	ldr	r4, [pc, #52]	; (8002d98 <__libc_init_array+0x3c>)
 8002d64:	1b64      	subs	r4, r4, r5
 8002d66:	10a4      	asrs	r4, r4, #2
 8002d68:	42a6      	cmp	r6, r4
 8002d6a:	d109      	bne.n	8002d80 <__libc_init_array+0x24>
 8002d6c:	f000 f822 	bl	8002db4 <_init>
 8002d70:	2600      	movs	r6, #0
 8002d72:	4d0a      	ldr	r5, [pc, #40]	; (8002d9c <__libc_init_array+0x40>)
 8002d74:	4c0a      	ldr	r4, [pc, #40]	; (8002da0 <__libc_init_array+0x44>)
 8002d76:	1b64      	subs	r4, r4, r5
 8002d78:	10a4      	asrs	r4, r4, #2
 8002d7a:	42a6      	cmp	r6, r4
 8002d7c:	d105      	bne.n	8002d8a <__libc_init_array+0x2e>
 8002d7e:	bd70      	pop	{r4, r5, r6, pc}
 8002d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d84:	4798      	blx	r3
 8002d86:	3601      	adds	r6, #1
 8002d88:	e7ee      	b.n	8002d68 <__libc_init_array+0xc>
 8002d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8e:	4798      	blx	r3
 8002d90:	3601      	adds	r6, #1
 8002d92:	e7f2      	b.n	8002d7a <__libc_init_array+0x1e>
 8002d94:	08002e04 	.word	0x08002e04
 8002d98:	08002e04 	.word	0x08002e04
 8002d9c:	08002e04 	.word	0x08002e04
 8002da0:	08002e08 	.word	0x08002e08

08002da4 <memset>:
 8002da4:	4603      	mov	r3, r0
 8002da6:	4402      	add	r2, r0
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d100      	bne.n	8002dae <memset+0xa>
 8002dac:	4770      	bx	lr
 8002dae:	f803 1b01 	strb.w	r1, [r3], #1
 8002db2:	e7f9      	b.n	8002da8 <memset+0x4>

08002db4 <_init>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr

08002dc0 <_fini>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	bf00      	nop
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr
