
10K_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bac  08003bac  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003bac  08003bac  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bac  08003bac  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000020  08003bd4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08003bd4  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d0e  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002788  00000000  00000000  00030d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  000334e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  000345a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018112  00000000  00000000  00035568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a0a  00000000  00000000  0004d67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c356  00000000  00000000  0005f084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb3da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004664  00000000  00000000  000eb430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b20 	.word	0x08003b20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08003b20 	.word	0x08003b20

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b092      	sub	sp, #72	; 0x48
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd8b 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f9b1 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fb0d 	bl	8000778 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 fabf 	bl	80006e0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000162:	f000 fae7 	bl	8000734 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000166:	f000 fa6f 	bl	8000648 <MX_TIM2_Init>
  MX_RTC_Init();
 800016a:	f000 fa23 	bl	80005b4 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800016e:	f000 fa04 	bl	800057a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);//타이머 활성화
 8000172:	485e      	ldr	r0, [pc, #376]	; (80002ec <main+0x1a0>)
 8000174:	f002 fc38 	bl	80029e8 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, RESET);//LOW출력
 8000178:	2200      	movs	r2, #0
 800017a:	2120      	movs	r1, #32
 800017c:	485c      	ldr	r0, [pc, #368]	; (80002f0 <main+0x1a4>)
 800017e:	f001 f919 	bl	80013b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH0_Pin, RESET);//HIGH 출력
 8000182:	2200      	movs	r2, #0
 8000184:	2101      	movs	r1, #1
 8000186:	485a      	ldr	r0, [pc, #360]	; (80002f0 <main+0x1a4>)
 8000188:	f001 f914 	bl	80013b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH1_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2102      	movs	r1, #2
 8000190:	4857      	ldr	r0, [pc, #348]	; (80002f0 <main+0x1a4>)
 8000192:	f001 f90f 	bl	80013b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH2_Pin, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2104      	movs	r1, #4
 800019a:	4855      	ldr	r0, [pc, #340]	; (80002f0 <main+0x1a4>)
 800019c:	f001 f90a 	bl	80013b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH3_Pin, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2108      	movs	r1, #8
 80001a4:	4852      	ldr	r0, [pc, #328]	; (80002f0 <main+0x1a4>)
 80001a6:	f001 f905 	bl	80013b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH4_Pin, RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2110      	movs	r1, #16
 80001ae:	4850      	ldr	r0, [pc, #320]	; (80002f0 <main+0x1a4>)
 80001b0:	f001 f900 	bl	80013b4 <HAL_GPIO_WritePin>


  HAL_UART_Receive_IT(&huart1, &rx1_data, 8);
 80001b4:	2208      	movs	r2, #8
 80001b6:	494f      	ldr	r1, [pc, #316]	; (80002f4 <main+0x1a8>)
 80001b8:	484f      	ldr	r0, [pc, #316]	; (80002f8 <main+0x1ac>)
 80001ba:	f003 f80c 	bl	80031d6 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (rx1_data[7] == 'E'){
 80001be:	4b4d      	ldr	r3, [pc, #308]	; (80002f4 <main+0x1a8>)
 80001c0:	79db      	ldrb	r3, [r3, #7]
 80001c2:	2b45      	cmp	r3, #69	; 0x45
 80001c4:	d145      	bne.n	8000252 <main+0x106>
		  for(int i  = 0; i < 8; i++){
 80001c6:	2300      	movs	r3, #0
 80001c8:	647b      	str	r3, [r7, #68]	; 0x44
 80001ca:	e012      	b.n	80001f2 <main+0xa6>
			  uart_Time[i] = rx1_data[i]-48;
 80001cc:	4a49      	ldr	r2, [pc, #292]	; (80002f4 <main+0x1a8>)
 80001ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80001d0:	4413      	add	r3, r2
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	3b30      	subs	r3, #48	; 0x30
 80001d6:	b2d9      	uxtb	r1, r3
 80001d8:	4a48      	ldr	r2, [pc, #288]	; (80002fc <main+0x1b0>)
 80001da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80001dc:	4413      	add	r3, r2
 80001de:	460a      	mov	r2, r1
 80001e0:	701a      	strb	r2, [r3, #0]
			  rx1_data[i] = 0;
 80001e2:	4a44      	ldr	r2, [pc, #272]	; (80002f4 <main+0x1a8>)
 80001e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80001e6:	4413      	add	r3, r2
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
		  for(int i  = 0; i < 8; i++){
 80001ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80001ee:	3301      	adds	r3, #1
 80001f0:	647b      	str	r3, [r7, #68]	; 0x44
 80001f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80001f4:	2b07      	cmp	r3, #7
 80001f6:	dde9      	ble.n	80001cc <main+0x80>
		  }


		  num[0] = uart_Time[1]*10+uart_Time[2];
 80001f8:	4b40      	ldr	r3, [pc, #256]	; (80002fc <main+0x1b0>)
 80001fa:	785b      	ldrb	r3, [r3, #1]
 80001fc:	461a      	mov	r2, r3
 80001fe:	4613      	mov	r3, r2
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	4413      	add	r3, r2
 8000204:	005b      	lsls	r3, r3, #1
 8000206:	461a      	mov	r2, r3
 8000208:	4b3c      	ldr	r3, [pc, #240]	; (80002fc <main+0x1b0>)
 800020a:	789b      	ldrb	r3, [r3, #2]
 800020c:	4413      	add	r3, r2
 800020e:	4a3c      	ldr	r2, [pc, #240]	; (8000300 <main+0x1b4>)
 8000210:	6013      	str	r3, [r2, #0]
		  num[1] = uart_Time[3]*10+uart_Time[4];
 8000212:	4b3a      	ldr	r3, [pc, #232]	; (80002fc <main+0x1b0>)
 8000214:	78db      	ldrb	r3, [r3, #3]
 8000216:	461a      	mov	r2, r3
 8000218:	4613      	mov	r3, r2
 800021a:	009b      	lsls	r3, r3, #2
 800021c:	4413      	add	r3, r2
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	461a      	mov	r2, r3
 8000222:	4b36      	ldr	r3, [pc, #216]	; (80002fc <main+0x1b0>)
 8000224:	791b      	ldrb	r3, [r3, #4]
 8000226:	4413      	add	r3, r2
 8000228:	4a35      	ldr	r2, [pc, #212]	; (8000300 <main+0x1b4>)
 800022a:	6053      	str	r3, [r2, #4]
		  num[2] = uart_Time[5]*10+uart_Time[6];
 800022c:	4b33      	ldr	r3, [pc, #204]	; (80002fc <main+0x1b0>)
 800022e:	795b      	ldrb	r3, [r3, #5]
 8000230:	461a      	mov	r2, r3
 8000232:	4613      	mov	r3, r2
 8000234:	009b      	lsls	r3, r3, #2
 8000236:	4413      	add	r3, r2
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	461a      	mov	r2, r3
 800023c:	4b2f      	ldr	r3, [pc, #188]	; (80002fc <main+0x1b0>)
 800023e:	799b      	ldrb	r3, [r3, #6]
 8000240:	4413      	add	r3, r2
 8000242:	4a2f      	ldr	r2, [pc, #188]	; (8000300 <main+0x1b4>)
 8000244:	6093      	str	r3, [r2, #8]
		  num[4] = 0;
 8000246:	4b2e      	ldr	r3, [pc, #184]	; (8000300 <main+0x1b4>)
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
		  num[5] = 0;
 800024c:	4b2c      	ldr	r3, [pc, #176]	; (8000300 <main+0x1b4>)
 800024e:	2200      	movs	r2, #0
 8000250:	615a      	str	r2, [r3, #20]

	  }



	  if (num[0] > 23){
 8000252:	4b2b      	ldr	r3, [pc, #172]	; (8000300 <main+0x1b4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b17      	cmp	r3, #23
 8000258:	dd02      	ble.n	8000260 <main+0x114>
		  num[0] = 0;
 800025a:	4b29      	ldr	r3, [pc, #164]	; (8000300 <main+0x1b4>)
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
	  }

	  if (num[1] == 60){
 8000260:	4b27      	ldr	r3, [pc, #156]	; (8000300 <main+0x1b4>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	2b3c      	cmp	r3, #60	; 0x3c
 8000266:	d107      	bne.n	8000278 <main+0x12c>
		  num[1] = 0;
 8000268:	4b25      	ldr	r3, [pc, #148]	; (8000300 <main+0x1b4>)
 800026a:	2200      	movs	r2, #0
 800026c:	605a      	str	r2, [r3, #4]
		  num[0]++;
 800026e:	4b24      	ldr	r3, [pc, #144]	; (8000300 <main+0x1b4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3301      	adds	r3, #1
 8000274:	4a22      	ldr	r2, [pc, #136]	; (8000300 <main+0x1b4>)
 8000276:	6013      	str	r3, [r2, #0]
	  }
	  if (num[2] == 60){
 8000278:	4b21      	ldr	r3, [pc, #132]	; (8000300 <main+0x1b4>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	2b3c      	cmp	r3, #60	; 0x3c
 800027e:	d107      	bne.n	8000290 <main+0x144>
		  num[2] = 0;
 8000280:	4b1f      	ldr	r3, [pc, #124]	; (8000300 <main+0x1b4>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
		  num[1]++;
 8000286:	4b1e      	ldr	r3, [pc, #120]	; (8000300 <main+0x1b4>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	3301      	adds	r3, #1
 800028c:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <main+0x1b4>)
 800028e:	6053      	str	r3, [r2, #4]
	  }
	  if(num[4] == 100){
 8000290:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <main+0x1b4>)
 8000292:	691b      	ldr	r3, [r3, #16]
 8000294:	2b64      	cmp	r3, #100	; 0x64
 8000296:	d107      	bne.n	80002a8 <main+0x15c>

		  num[4] = 0;
 8000298:	4b19      	ldr	r3, [pc, #100]	; (8000300 <main+0x1b4>)
 800029a:	2200      	movs	r2, #0
 800029c:	611a      	str	r2, [r3, #16]
		  num[3]++;
 800029e:	4b18      	ldr	r3, [pc, #96]	; (8000300 <main+0x1b4>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	3301      	adds	r3, #1
 80002a4:	4a16      	ldr	r2, [pc, #88]	; (8000300 <main+0x1b4>)
 80002a6:	60d3      	str	r3, [r2, #12]
	  }
	  if(num[3] == 100){
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <main+0x1b4>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	2b64      	cmp	r3, #100	; 0x64
 80002ae:	d107      	bne.n	80002c0 <main+0x174>
		  num[3] = 0;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <main+0x1b4>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
		  num[2]++;
 80002b6:	4b12      	ldr	r3, [pc, #72]	; (8000300 <main+0x1b4>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	3301      	adds	r3, #1
 80002bc:	4a10      	ldr	r2, [pc, #64]	; (8000300 <main+0x1b4>)
 80002be:	6093      	str	r3, [r2, #8]





	  int Segment[10] = { 0xC0, 0xF9, 0xA4 ,0xB0, 0x99, 0x92, 0x82, 0xD8, 0x80, 0x90}; //16진수 -> segmen 정보
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <main+0x1b8>)
 80002c2:	1d3c      	adds	r4, r7, #4
 80002c4:	461d      	mov	r5, r3
 80002c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002d2:	e884 0003 	stmia.w	r4, {r0, r1}
	  int testPCB_Latch_Adrr[5] = {LATCH0_Pin, LATCH1_Pin, LATCH2_Pin, LATCH3_Pin, LATCH4_Pin}; //테스트 pcb 래치 핀 주소
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <main+0x1bc>)
 80002d8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80002dc:	461d      	mov	r5, r3
 80002de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e2:	682b      	ldr	r3, [r5, #0]
 80002e4:	6023      	str	r3, [r4, #0]




	  for(int i = 0; i < 5; i++){
 80002e6:	2300      	movs	r3, #0
 80002e8:	643b      	str	r3, [r7, #64]	; 0x40
 80002ea:	e0da      	b.n	80004a2 <main+0x356>
 80002ec:	200000a4 	.word	0x200000a4
 80002f0:	40010800 	.word	0x40010800
 80002f4:	2000009c 	.word	0x2000009c
 80002f8:	20000044 	.word	0x20000044
 80002fc:	2000003c 	.word	0x2000003c
 8000300:	20000000 	.word	0x20000000
 8000304:	08003b38 	.word	0x08003b38
 8000308:	08003b60 	.word	0x08003b60
		  HAL_GPIO_WritePin(GPIOB, Segment[num[i]/10]+(Segment[num[i]%10]<<8), SET);
 800030c:	4a67      	ldr	r2, [pc, #412]	; (80004ac <main+0x360>)
 800030e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000314:	4a66      	ldr	r2, [pc, #408]	; (80004b0 <main+0x364>)
 8000316:	fb82 1203 	smull	r1, r2, r2, r3
 800031a:	1092      	asrs	r2, r2, #2
 800031c:	17db      	asrs	r3, r3, #31
 800031e:	1ad3      	subs	r3, r2, r3
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000326:	4413      	add	r3, r2
 8000328:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800032c:	b298      	uxth	r0, r3
 800032e:	4a5f      	ldr	r2, [pc, #380]	; (80004ac <main+0x360>)
 8000330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000332:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000336:	4b5e      	ldr	r3, [pc, #376]	; (80004b0 <main+0x364>)
 8000338:	fb83 2301 	smull	r2, r3, r3, r1
 800033c:	109a      	asrs	r2, r3, #2
 800033e:	17cb      	asrs	r3, r1, #31
 8000340:	1ad2      	subs	r2, r2, r3
 8000342:	4613      	mov	r3, r2
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	4413      	add	r3, r2
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	1aca      	subs	r2, r1, r3
 800034c:	0093      	lsls	r3, r2, #2
 800034e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000352:	4413      	add	r3, r2
 8000354:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000358:	b29b      	uxth	r3, r3
 800035a:	021b      	lsls	r3, r3, #8
 800035c:	b29b      	uxth	r3, r3
 800035e:	4403      	add	r3, r0
 8000360:	b29b      	uxth	r3, r3
 8000362:	2201      	movs	r2, #1
 8000364:	4619      	mov	r1, r3
 8000366:	4853      	ldr	r0, [pc, #332]	; (80004b4 <main+0x368>)
 8000368:	f001 f824 	bl	80013b4 <HAL_GPIO_WritePin>


		  HAL_GPIO_WritePin(GPIOB, ~(Segment[num[i]/10]+(Segment[num[i]%10]<<8)), RESET);
 800036c:	4a4f      	ldr	r2, [pc, #316]	; (80004ac <main+0x360>)
 800036e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000374:	4a4e      	ldr	r2, [pc, #312]	; (80004b0 <main+0x364>)
 8000376:	fb82 1203 	smull	r1, r2, r2, r3
 800037a:	1092      	asrs	r2, r2, #2
 800037c:	17db      	asrs	r3, r3, #31
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000386:	4413      	add	r3, r2
 8000388:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800038c:	b298      	uxth	r0, r3
 800038e:	4a47      	ldr	r2, [pc, #284]	; (80004ac <main+0x360>)
 8000390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000392:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000396:	4b46      	ldr	r3, [pc, #280]	; (80004b0 <main+0x364>)
 8000398:	fb83 2301 	smull	r2, r3, r3, r1
 800039c:	109a      	asrs	r2, r3, #2
 800039e:	17cb      	asrs	r3, r1, #31
 80003a0:	1ad2      	subs	r2, r2, r3
 80003a2:	4613      	mov	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4413      	add	r3, r2
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	1aca      	subs	r2, r1, r3
 80003ac:	0093      	lsls	r3, r2, #2
 80003ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80003b2:	4413      	add	r3, r2
 80003b4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	021b      	lsls	r3, r3, #8
 80003bc:	b29b      	uxth	r3, r3
 80003be:	4403      	add	r3, r0
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	43db      	mvns	r3, r3
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	2200      	movs	r2, #0
 80003c8:	4619      	mov	r1, r3
 80003ca:	483a      	ldr	r0, [pc, #232]	; (80004b4 <main+0x368>)
 80003cc:	f000 fff2 	bl	80013b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, ~(Segment[num[i]/10]+(Segment[num[i]%10]<<8)), RESET);
 80003d0:	4a36      	ldr	r2, [pc, #216]	; (80004ac <main+0x360>)
 80003d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d8:	4a35      	ldr	r2, [pc, #212]	; (80004b0 <main+0x364>)
 80003da:	fb82 1203 	smull	r1, r2, r2, r3
 80003de:	1092      	asrs	r2, r2, #2
 80003e0:	17db      	asrs	r3, r3, #31
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80003ea:	4413      	add	r3, r2
 80003ec:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80003f0:	b298      	uxth	r0, r3
 80003f2:	4a2e      	ldr	r2, [pc, #184]	; (80004ac <main+0x360>)
 80003f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80003fa:	4b2d      	ldr	r3, [pc, #180]	; (80004b0 <main+0x364>)
 80003fc:	fb83 2301 	smull	r2, r3, r3, r1
 8000400:	109a      	asrs	r2, r3, #2
 8000402:	17cb      	asrs	r3, r1, #31
 8000404:	1ad2      	subs	r2, r2, r3
 8000406:	4613      	mov	r3, r2
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	4413      	add	r3, r2
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	1aca      	subs	r2, r1, r3
 8000410:	0093      	lsls	r3, r2, #2
 8000412:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000416:	4413      	add	r3, r2
 8000418:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800041c:	b29b      	uxth	r3, r3
 800041e:	021b      	lsls	r3, r3, #8
 8000420:	b29b      	uxth	r3, r3
 8000422:	4403      	add	r3, r0
 8000424:	b29b      	uxth	r3, r3
 8000426:	43db      	mvns	r3, r3
 8000428:	b29b      	uxth	r3, r3
 800042a:	2200      	movs	r2, #0
 800042c:	4619      	mov	r1, r3
 800042e:	4821      	ldr	r0, [pc, #132]	; (80004b4 <main+0x368>)
 8000430:	f000 ffc0 	bl	80013b4 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(OE_GPIO_Port, testPCB_Latch_Adrr[i], SET);
 8000434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800043c:	4413      	add	r3, r2
 800043e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000442:	b29b      	uxth	r3, r3
 8000444:	2201      	movs	r2, #1
 8000446:	4619      	mov	r1, r3
 8000448:	481b      	ldr	r0, [pc, #108]	; (80004b8 <main+0x36c>)
 800044a:	f000 ffb3 	bl	80013b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OE_GPIO_Port, testPCB_Latch_Adrr[i], SET);
 800044e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000456:	4413      	add	r3, r2
 8000458:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800045c:	b29b      	uxth	r3, r3
 800045e:	2201      	movs	r2, #1
 8000460:	4619      	mov	r1, r3
 8000462:	4815      	ldr	r0, [pc, #84]	; (80004b8 <main+0x36c>)
 8000464:	f000 ffa6 	bl	80013b4 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(OE_GPIO_Port, testPCB_Latch_Adrr[i], RESET);
 8000468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000470:	4413      	add	r3, r2
 8000472:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000476:	b29b      	uxth	r3, r3
 8000478:	2200      	movs	r2, #0
 800047a:	4619      	mov	r1, r3
 800047c:	480e      	ldr	r0, [pc, #56]	; (80004b8 <main+0x36c>)
 800047e:	f000 ff99 	bl	80013b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OE_GPIO_Port, testPCB_Latch_Adrr[i], RESET);
 8000482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800048a:	4413      	add	r3, r2
 800048c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000490:	b29b      	uxth	r3, r3
 8000492:	2200      	movs	r2, #0
 8000494:	4619      	mov	r1, r3
 8000496:	4808      	ldr	r0, [pc, #32]	; (80004b8 <main+0x36c>)
 8000498:	f000 ff8c 	bl	80013b4 <HAL_GPIO_WritePin>
	  for(int i = 0; i < 5; i++){
 800049c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800049e:	3301      	adds	r3, #1
 80004a0:	643b      	str	r3, [r7, #64]	; 0x40
 80004a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	f77f af31 	ble.w	800030c <main+0x1c0>
  {
 80004aa:	e688      	b.n	80001be <main+0x72>
 80004ac:	20000000 	.word	0x20000000
 80004b0:	66666667 	.word	0x66666667
 80004b4:	40010c00 	.word	0x40010c00
 80004b8:	40010800 	.word	0x40010800

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b094      	sub	sp, #80	; 0x50
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004c6:	2228      	movs	r2, #40	; 0x28
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f003 fb20 	bl	8003b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80004ec:	2309      	movs	r3, #9
 80004ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	2301      	movs	r3, #1
 80004fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004fe:	2301      	movs	r3, #1
 8000500:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000502:	2302      	movs	r3, #2
 8000504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800050a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800050c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000510:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000516:	4618      	mov	r0, r3
 8000518:	f001 f8ac 	bl	8001674 <HAL_RCC_OscConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000522:	f000 fa0d 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	230f      	movs	r3, #15
 8000528:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052a:	2302      	movs	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000536:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	2102      	movs	r1, #2
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fb16 	bl	8001b74 <HAL_RCC_ClockConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800054e:	f000 f9f7 	bl	8000940 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000552:	2311      	movs	r3, #17
 8000554:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800055a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fca0 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800056e:	f000 f9e7 	bl	8000940 <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3750      	adds	r7, #80	; 0x50
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2028      	movs	r0, #40	; 0x28
 8000584:	f000 fcab 	bl	8000ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000588:	2028      	movs	r0, #40	; 0x28
 800058a:	f000 fcc4 	bl	8000f16 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	2017      	movs	r0, #23
 8000594:	f000 fca3 	bl	8000ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000598:	2017      	movs	r0, #23
 800059a:	f000 fcbc 	bl	8000f16 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	2025      	movs	r0, #37	; 0x25
 80005a4:	f000 fc9b 	bl	8000ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005a8:	2025      	movs	r0, #37	; 0x25
 80005aa:	f000 fcb4 	bl	8000f16 <HAL_NVIC_EnableIRQ>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2100      	movs	r1, #0
 80005be:	460a      	mov	r2, r1
 80005c0:	801a      	strh	r2, [r3, #0]
 80005c2:	460a      	mov	r2, r1
 80005c4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_RTC_Init+0x8c>)
 80005cc:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <MX_RTC_Init+0x90>)
 80005ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_RTC_Init+0x8c>)
 80005d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_RTC_Init+0x8c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005de:	4818      	ldr	r0, [pc, #96]	; (8000640 <MX_RTC_Init+0x8c>)
 80005e0:	f001 fddc 	bl	800219c <HAL_RTC_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80005ea:	f000 f9a9 	bl	8000940 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	4619      	mov	r1, r3
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <MX_RTC_Init+0x8c>)
 8000602:	f001 fe61 	bl	80022c8 <HAL_RTC_SetTime>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800060c:	f000 f998 	bl	8000940 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000610:	2301      	movs	r3, #1
 8000612:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000614:	2301      	movs	r3, #1
 8000616:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	4619      	mov	r1, r3
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <MX_RTC_Init+0x8c>)
 8000628:	f001 fee6 	bl	80023f8 <HAL_RTC_SetDate>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000632:	f000 f985 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000088 	.word	0x20000088
 8000644:	40002800 	.word	0x40002800

08000648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_TIM2_Init+0x94>)
 8000666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800066a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_TIM2_Init+0x94>)
 800066e:	2209      	movs	r2, #9
 8000670:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_TIM2_Init+0x94>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 720-1;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_TIM2_Init+0x94>)
 800067a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800067e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_TIM2_Init+0x94>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_TIM2_Init+0x94>)
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800068c:	4813      	ldr	r0, [pc, #76]	; (80006dc <MX_TIM2_Init+0x94>)
 800068e:	f002 f95c 	bl	800294a <HAL_TIM_Base_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000698:	f000 f952 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	4619      	mov	r1, r3
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <MX_TIM2_Init+0x94>)
 80006aa:	f002 faf7 	bl	8002c9c <HAL_TIM_ConfigClockSource>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006b4:	f000 f944 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_TIM2_Init+0x94>)
 80006c6:	f002 fcc9 	bl	800305c <HAL_TIMEx_MasterConfigSynchronization>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006d0:	f000 f936 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000a4 	.word	0x200000a4

080006e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART1_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_USART1_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USART1_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART1_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART1_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART1_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART1_UART_Init+0x4c>)
 8000718:	f002 fd10 	bl	800313c <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f90d 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000044 	.word	0x20000044
 8000730:	40013800 	.word	0x40013800

08000734 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_USB_PCD_Init+0x3c>)
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <MX_USB_PCD_Init+0x40>)
 800073c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USB_PCD_Init+0x3c>)
 8000740:	2208      	movs	r2, #8
 8000742:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_USB_PCD_Init+0x3c>)
 8000746:	2202      	movs	r2, #2
 8000748:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USB_PCD_Init+0x3c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_USB_PCD_Init+0x3c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USB_PCD_Init+0x3c>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_USB_PCD_Init+0x3c>)
 800075e:	f000 fe59 	bl	8001414 <HAL_PCD_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000768:	f000 f8ea 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000ec 	.word	0x200000ec
 8000774:	40005c00 	.word	0x40005c00

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078c:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <MX_GPIO_Init+0x128>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a43      	ldr	r2, [pc, #268]	; (80008a0 <MX_GPIO_Init+0x128>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <MX_GPIO_Init+0x128>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0310 	and.w	r3, r3, #16
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a3d      	ldr	r2, [pc, #244]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0320 	and.w	r3, r3, #32
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a37      	ldr	r2, [pc, #220]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a31      	ldr	r2, [pc, #196]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f2:	482c      	ldr	r0, [pc, #176]	; (80008a4 <MX_GPIO_Init+0x12c>)
 80007f4:	f000 fdde 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LATCH0_Pin|LATCH1_Pin|LATCH2_Pin|LATCH3_Pin
 80007f8:	2200      	movs	r2, #0
 80007fa:	213f      	movs	r1, #63	; 0x3f
 80007fc:	482a      	ldr	r0, [pc, #168]	; (80008a8 <MX_GPIO_Init+0x130>)
 80007fe:	f000 fdd9 	bl	80013b4 <HAL_GPIO_WritePin>
                          |LATCH4_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB0_Pin|DB1_Pin|DB2_Pin|DB10_Pin
 8000802:	2200      	movs	r2, #0
 8000804:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000808:	4828      	ldr	r0, [pc, #160]	; (80008ac <MX_GPIO_Init+0x134>)
 800080a:	f000 fdd3 	bl	80013b4 <HAL_GPIO_WritePin>
                          |DB11_Pin|DB12_Pin|DB13_Pin|DB14_Pin
                          |DB15_Pin|DB3_Pin|DB4_Pin|DB5_Pin
                          |DB6_Pin|DB7_Pin|DB8_Pin|DB9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2302      	movs	r3, #2
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	4619      	mov	r1, r3
 8000826:	481f      	ldr	r0, [pc, #124]	; (80008a4 <MX_GPIO_Init+0x12c>)
 8000828:	f000 fc40 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LATCH0_Pin LATCH1_Pin LATCH2_Pin LATCH3_Pin
                           LATCH4_Pin OE_Pin */
  GPIO_InitStruct.Pin = LATCH0_Pin|LATCH1_Pin|LATCH2_Pin|LATCH3_Pin
 800082c:	233f      	movs	r3, #63	; 0x3f
 800082e:	613b      	str	r3, [r7, #16]
                          |LATCH4_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4619      	mov	r1, r3
 8000842:	4819      	ldr	r0, [pc, #100]	; (80008a8 <MX_GPIO_Init+0x130>)
 8000844:	f000 fc32 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SW0_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin;
 8000848:	23c0      	movs	r3, #192	; 0xc0
 800084a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_GPIO_Init+0x138>)
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_GPIO_Init+0x130>)
 800085c:	f000 fc26 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DB0_Pin DB1_Pin DB2_Pin DB10_Pin
                           DB11_Pin DB12_Pin DB13_Pin DB14_Pin
                           DB15_Pin DB3_Pin DB4_Pin DB5_Pin
                           DB6_Pin DB7_Pin DB8_Pin DB9_Pin */
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB10_Pin
 8000860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000864:	613b      	str	r3, [r7, #16]
                          |DB11_Pin|DB12_Pin|DB13_Pin|DB14_Pin
                          |DB15_Pin|DB3_Pin|DB4_Pin|DB5_Pin
                          |DB6_Pin|DB7_Pin|DB8_Pin|DB9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2302      	movs	r3, #2
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	4619      	mov	r1, r3
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_GPIO_Init+0x134>)
 800087a:	f000 fc17 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 800087e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_GPIO_Init+0x13c>)
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000888:	2301      	movs	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4619      	mov	r1, r3
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_GPIO_Init+0x130>)
 8000894:	f000 fc0a 	bl	80010ac <HAL_GPIO_Init>

}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40011000 	.word	0x40011000
 80008a8:	40010800 	.word	0x40010800
 80008ac:	40010c00 	.word	0x40010c00
 80008b0:	10110000 	.word	0x10110000
 80008b4:	10210000 	.word	0x10210000

080008b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008c8:	d104      	bne.n	80008d4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		num[4]++;
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	3301      	adds	r3, #1
 80008d0:	4a03      	ldr	r2, [pc, #12]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008d2:	6113      	str	r3, [r2, #16]
	}


}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000000 	.word	0x20000000

080008e4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_15){
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008f4:	d104      	bne.n	8000900 <HAL_GPIO_EXTI_Callback+0x1c>
		num[0]++;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_GPIO_EXTI_Callback+0x58>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	4a0f      	ldr	r2, [pc, #60]	; (800093c <HAL_GPIO_EXTI_Callback+0x58>)
 80008fe:	6013      	str	r3, [r2, #0]

	}

	if (GPIO_Pin == GPIO_PIN_8){
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000906:	d104      	bne.n	8000912 <HAL_GPIO_EXTI_Callback+0x2e>
			num[0]--;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_GPIO_EXTI_Callback+0x58>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3b01      	subs	r3, #1
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <HAL_GPIO_EXTI_Callback+0x58>)
 8000910:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == GPIO_PIN_7){
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	2b80      	cmp	r3, #128	; 0x80
 8000916:	d104      	bne.n	8000922 <HAL_GPIO_EXTI_Callback+0x3e>
				num[1]++;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_GPIO_EXTI_Callback+0x58>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	3301      	adds	r3, #1
 800091e:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_GPIO_EXTI_Callback+0x58>)
 8000920:	6053      	str	r3, [r2, #4]
	}

	if (GPIO_Pin == GPIO_PIN_6){
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	2b40      	cmp	r3, #64	; 0x40
 8000926:	d104      	bne.n	8000932 <HAL_GPIO_EXTI_Callback+0x4e>
				num[1]--;
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <HAL_GPIO_EXTI_Callback+0x58>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	3b01      	subs	r3, #1
 800092e:	4a03      	ldr	r2, [pc, #12]	; (800093c <HAL_GPIO_EXTI_Callback+0x58>)
 8000930:	6053      	str	r3, [r2, #4]
	}

	UNUSED(GPIO_Pin);

}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20000000 	.word	0x20000000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <HAL_MspInit+0x7c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <HAL_MspInit+0x7c>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <HAL_MspInit+0x7c>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_MspInit+0x7c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <HAL_MspInit+0x7c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_MspInit+0x7c>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2001      	movs	r0, #1
 8000988:	f000 faa9 	bl	8000ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800098c:	2001      	movs	r0, #1
 800098e:	f000 fac2 	bl	8000f16 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2005      	movs	r0, #5
 8000998:	f000 faa1 	bl	8000ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800099c:	2005      	movs	r0, #5
 800099e:	f000 faba 	bl	8000f16 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_MspInit+0x80>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <HAL_MspInit+0x80>)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010000 	.word	0x40010000

080009d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_RTC_MspInit+0x4c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d118      	bne.n	8000a14 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80009e2:	f000 fe23 	bl	800162c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_RTC_MspInit+0x50>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <HAL_RTC_MspInit+0x50>)
 80009ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009f0:	61d3      	str	r3, [r2, #28]
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_RTC_MspInit+0x50>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_RTC_MspInit+0x54>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 fa68 	bl	8000ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f000 fa81 	bl	8000f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40002800 	.word	0x40002800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	4242043c 	.word	0x4242043c

08000a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a38:	d113      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_TIM_Base_MspInit+0x44>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_TIM_Base_MspInit+0x44>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_TIM_Base_MspInit+0x44>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	201c      	movs	r0, #28
 8000a58:	f000 fa41 	bl	8000ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a5c:	201c      	movs	r0, #28
 8000a5e:	f000 fa5a 	bl	8000f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <HAL_UART_MspInit+0x8c>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d131      	bne.n	8000af4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <HAL_UART_MspInit+0x90>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a1a      	ldr	r2, [pc, #104]	; (8000b00 <HAL_UART_MspInit+0x90>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_UART_MspInit+0x90>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_UART_MspInit+0x90>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <HAL_UART_MspInit+0x90>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_UART_MspInit+0x90>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin;
 8000ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480b      	ldr	r0, [pc, #44]	; (8000b04 <HAL_UART_MspInit+0x94>)
 8000ad6:	f000 fae9 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_RX_Pin;
 8000ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <HAL_UART_MspInit+0x94>)
 8000af0:	f000 fadc 	bl	80010ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40013800 	.word	0x40013800
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40010800 	.word	0x40010800

08000b08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <HAL_PCD_MspInit+0x34>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d10b      	bne.n	8000b32 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_PCD_MspInit+0x38>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_PCD_MspInit+0x38>)
 8000b20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b24:	61d3      	str	r3, [r2, #28]
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_PCD_MspInit+0x38>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40005c00 	.word	0x40005c00
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8a:	f000 f8b5 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000b96:	f000 fd55 	bl	8001644 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <RTC_IRQHandler+0x10>)
 8000ba6:	f001 fe87 	bl	80028b8 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000088 	.word	0x20000088

08000bb4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000bc4:	2040      	movs	r0, #64	; 0x40
 8000bc6:	f000 fc0d 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000bca:	2080      	movs	r0, #128	; 0x80
 8000bcc:	f000 fc0a 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000bd0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bd4:	f000 fc06 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM2_IRQHandler+0x10>)
 8000be2:	f001 ff53 	bl	8002a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000a4 	.word	0x200000a4

08000bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <USART1_IRQHandler+0x10>)
 8000bf6:	f002 fb1f 	bl	8003238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000044 	.word	0x20000044

08000c04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000c08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c0c:	f000 fbea 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c46:	f7ff ffe5 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f002 ff3d 	bl	8003ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4e:	f7ff fa7d 	bl	800014c <main>
  bx lr
 8000c52:	4770      	bx	lr
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c5c:	08003bb4 	.word	0x08003bb4
  ldr r2, =_sbss
 8000c60:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000c64:	200003dc 	.word	0x200003dc

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x28>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x28>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f923 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fe60 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f93b 	bl	8000f32 <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd4:	f000 f903 	bl	8000ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000014 	.word	0x20000014
 8000cf0:	2000001c 	.word	0x2000001c
 8000cf4:	20000018 	.word	0x20000018

08000cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x1c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x20>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a03      	ldr	r2, [pc, #12]	; (8000d18 <HAL_IncTick+0x20>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	2000001c 	.word	0x2000001c
 8000d18:	200003d8 	.word	0x200003d8

08000d1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <HAL_GetTick+0x10>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	200003d8 	.word	0x200003d8

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <__NVIC_EnableIRQ+0x34>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea8:	f7ff ff90 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff2d 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff42 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff90 	bl	8000e20 <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5f 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff35 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffa2 	bl	8000e84 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d008      	beq.n	8000f72 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2204      	movs	r2, #4
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e020      	b.n	8000fb4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 020e 	bic.w	r2, r2, #14
 8000f80:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0201 	bic.w	r2, r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d005      	beq.n	8000fe2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2204      	movs	r2, #4
 8000fda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e051      	b.n	8001086 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 020e 	bic.w	r2, r2, #14
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0201 	bic.w	r2, r2, #1
 8001000:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a22      	ldr	r2, [pc, #136]	; (8001090 <HAL_DMA_Abort_IT+0xd0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d029      	beq.n	8001060 <HAL_DMA_Abort_IT+0xa0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a20      	ldr	r2, [pc, #128]	; (8001094 <HAL_DMA_Abort_IT+0xd4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d022      	beq.n	800105c <HAL_DMA_Abort_IT+0x9c>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <HAL_DMA_Abort_IT+0xd8>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d01a      	beq.n	8001056 <HAL_DMA_Abort_IT+0x96>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a1d      	ldr	r2, [pc, #116]	; (800109c <HAL_DMA_Abort_IT+0xdc>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d012      	beq.n	8001050 <HAL_DMA_Abort_IT+0x90>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <HAL_DMA_Abort_IT+0xe0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d00a      	beq.n	800104a <HAL_DMA_Abort_IT+0x8a>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <HAL_DMA_Abort_IT+0xe4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d102      	bne.n	8001044 <HAL_DMA_Abort_IT+0x84>
 800103e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001042:	e00e      	b.n	8001062 <HAL_DMA_Abort_IT+0xa2>
 8001044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001048:	e00b      	b.n	8001062 <HAL_DMA_Abort_IT+0xa2>
 800104a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104e:	e008      	b.n	8001062 <HAL_DMA_Abort_IT+0xa2>
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	e005      	b.n	8001062 <HAL_DMA_Abort_IT+0xa2>
 8001056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105a:	e002      	b.n	8001062 <HAL_DMA_Abort_IT+0xa2>
 800105c:	2310      	movs	r3, #16
 800105e:	e000      	b.n	8001062 <HAL_DMA_Abort_IT+0xa2>
 8001060:	2301      	movs	r3, #1
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <HAL_DMA_Abort_IT+0xe8>)
 8001064:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	4798      	blx	r3
    } 
  }
  return status;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020008 	.word	0x40020008
 8001094:	4002001c 	.word	0x4002001c
 8001098:	40020030 	.word	0x40020030
 800109c:	40020044 	.word	0x40020044
 80010a0:	40020058 	.word	0x40020058
 80010a4:	4002006c 	.word	0x4002006c
 80010a8:	40020000 	.word	0x40020000

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b08b      	sub	sp, #44	; 0x2c
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010be:	e169      	b.n	8001394 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010c0:	2201      	movs	r2, #1
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 8158 	bne.w	800138e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4a9a      	ldr	r2, [pc, #616]	; (800134c <HAL_GPIO_Init+0x2a0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d05e      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 80010e8:	4a98      	ldr	r2, [pc, #608]	; (800134c <HAL_GPIO_Init+0x2a0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d875      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 80010ee:	4a98      	ldr	r2, [pc, #608]	; (8001350 <HAL_GPIO_Init+0x2a4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d058      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 80010f4:	4a96      	ldr	r2, [pc, #600]	; (8001350 <HAL_GPIO_Init+0x2a4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d86f      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 80010fa:	4a96      	ldr	r2, [pc, #600]	; (8001354 <HAL_GPIO_Init+0x2a8>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d052      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 8001100:	4a94      	ldr	r2, [pc, #592]	; (8001354 <HAL_GPIO_Init+0x2a8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d869      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 8001106:	4a94      	ldr	r2, [pc, #592]	; (8001358 <HAL_GPIO_Init+0x2ac>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d04c      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 800110c:	4a92      	ldr	r2, [pc, #584]	; (8001358 <HAL_GPIO_Init+0x2ac>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d863      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 8001112:	4a92      	ldr	r2, [pc, #584]	; (800135c <HAL_GPIO_Init+0x2b0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d046      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 8001118:	4a90      	ldr	r2, [pc, #576]	; (800135c <HAL_GPIO_Init+0x2b0>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d85d      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 800111e:	2b12      	cmp	r3, #18
 8001120:	d82a      	bhi.n	8001178 <HAL_GPIO_Init+0xcc>
 8001122:	2b12      	cmp	r3, #18
 8001124:	d859      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 8001126:	a201      	add	r2, pc, #4	; (adr r2, 800112c <HAL_GPIO_Init+0x80>)
 8001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112c:	080011a7 	.word	0x080011a7
 8001130:	08001181 	.word	0x08001181
 8001134:	08001193 	.word	0x08001193
 8001138:	080011d5 	.word	0x080011d5
 800113c:	080011db 	.word	0x080011db
 8001140:	080011db 	.word	0x080011db
 8001144:	080011db 	.word	0x080011db
 8001148:	080011db 	.word	0x080011db
 800114c:	080011db 	.word	0x080011db
 8001150:	080011db 	.word	0x080011db
 8001154:	080011db 	.word	0x080011db
 8001158:	080011db 	.word	0x080011db
 800115c:	080011db 	.word	0x080011db
 8001160:	080011db 	.word	0x080011db
 8001164:	080011db 	.word	0x080011db
 8001168:	080011db 	.word	0x080011db
 800116c:	080011db 	.word	0x080011db
 8001170:	08001189 	.word	0x08001189
 8001174:	0800119d 	.word	0x0800119d
 8001178:	4a79      	ldr	r2, [pc, #484]	; (8001360 <HAL_GPIO_Init+0x2b4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800117e:	e02c      	b.n	80011da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	623b      	str	r3, [r7, #32]
          break;
 8001186:	e029      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	3304      	adds	r3, #4
 800118e:	623b      	str	r3, [r7, #32]
          break;
 8001190:	e024      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	3308      	adds	r3, #8
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e01f      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	330c      	adds	r3, #12
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e01a      	b.n	80011dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ae:	2304      	movs	r3, #4
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e013      	b.n	80011dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d105      	bne.n	80011c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011bc:	2308      	movs	r3, #8
 80011be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	611a      	str	r2, [r3, #16]
          break;
 80011c6:	e009      	b.n	80011dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c8:	2308      	movs	r3, #8
 80011ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	615a      	str	r2, [r3, #20]
          break;
 80011d2:	e003      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x130>
          break;
 80011da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2bff      	cmp	r3, #255	; 0xff
 80011e0:	d801      	bhi.n	80011e6 <HAL_GPIO_Init+0x13a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	e001      	b.n	80011ea <HAL_GPIO_Init+0x13e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3304      	adds	r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2bff      	cmp	r3, #255	; 0xff
 80011f0:	d802      	bhi.n	80011f8 <HAL_GPIO_Init+0x14c>
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	e002      	b.n	80011fe <HAL_GPIO_Init+0x152>
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	3b08      	subs	r3, #8
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	210f      	movs	r1, #15
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	401a      	ands	r2, r3
 8001210:	6a39      	ldr	r1, [r7, #32]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	431a      	orrs	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80b1 	beq.w	800138e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800122c:	4b4d      	ldr	r3, [pc, #308]	; (8001364 <HAL_GPIO_Init+0x2b8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x2b8>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b4a      	ldr	r3, [pc, #296]	; (8001364 <HAL_GPIO_Init+0x2b8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001244:	4a48      	ldr	r2, [pc, #288]	; (8001368 <HAL_GPIO_Init+0x2bc>)
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001250:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a40      	ldr	r2, [pc, #256]	; (800136c <HAL_GPIO_Init+0x2c0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d013      	beq.n	8001298 <HAL_GPIO_Init+0x1ec>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a3f      	ldr	r2, [pc, #252]	; (8001370 <HAL_GPIO_Init+0x2c4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d00d      	beq.n	8001294 <HAL_GPIO_Init+0x1e8>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a3e      	ldr	r2, [pc, #248]	; (8001374 <HAL_GPIO_Init+0x2c8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d007      	beq.n	8001290 <HAL_GPIO_Init+0x1e4>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a3d      	ldr	r2, [pc, #244]	; (8001378 <HAL_GPIO_Init+0x2cc>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d101      	bne.n	800128c <HAL_GPIO_Init+0x1e0>
 8001288:	2303      	movs	r3, #3
 800128a:	e006      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 800128c:	2304      	movs	r3, #4
 800128e:	e004      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 8001290:	2302      	movs	r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 8001298:	2300      	movs	r3, #0
 800129a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129c:	f002 0203 	and.w	r2, r2, #3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4093      	lsls	r3, r2
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012aa:	492f      	ldr	r1, [pc, #188]	; (8001368 <HAL_GPIO_Init+0x2bc>)
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012c4:	4b2d      	ldr	r3, [pc, #180]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	492c      	ldr	r1, [pc, #176]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	43db      	mvns	r3, r3
 80012da:	4928      	ldr	r1, [pc, #160]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012dc:	4013      	ands	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4922      	ldr	r1, [pc, #136]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	43db      	mvns	r3, r3
 8001302:	491e      	ldr	r1, [pc, #120]	; (800137c <HAL_GPIO_Init+0x2d0>)
 8001304:	4013      	ands	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_GPIO_Init+0x2d0>)
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	4918      	ldr	r1, [pc, #96]	; (800137c <HAL_GPIO_Init+0x2d0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	608b      	str	r3, [r1, #8]
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_GPIO_Init+0x2d0>)
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	43db      	mvns	r3, r3
 800132a:	4914      	ldr	r1, [pc, #80]	; (800137c <HAL_GPIO_Init+0x2d0>)
 800132c:	4013      	ands	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d021      	beq.n	8001380 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_GPIO_Init+0x2d0>)
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	490e      	ldr	r1, [pc, #56]	; (800137c <HAL_GPIO_Init+0x2d0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	60cb      	str	r3, [r1, #12]
 8001348:	e021      	b.n	800138e <HAL_GPIO_Init+0x2e2>
 800134a:	bf00      	nop
 800134c:	10320000 	.word	0x10320000
 8001350:	10310000 	.word	0x10310000
 8001354:	10220000 	.word	0x10220000
 8001358:	10210000 	.word	0x10210000
 800135c:	10120000 	.word	0x10120000
 8001360:	10110000 	.word	0x10110000
 8001364:	40021000 	.word	0x40021000
 8001368:	40010000 	.word	0x40010000
 800136c:	40010800 	.word	0x40010800
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40011000 	.word	0x40011000
 8001378:	40011400 	.word	0x40011400
 800137c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_GPIO_Init+0x304>)
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	43db      	mvns	r3, r3
 8001388:	4909      	ldr	r1, [pc, #36]	; (80013b0 <HAL_GPIO_Init+0x304>)
 800138a:	4013      	ands	r3, r2
 800138c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	3301      	adds	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	fa22 f303 	lsr.w	r3, r2, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f47f ae8e 	bne.w	80010c0 <HAL_GPIO_Init+0x14>
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	372c      	adds	r7, #44	; 0x2c
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	40010400 	.word	0x40010400

080013b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c4:	787b      	ldrb	r3, [r7, #1]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013d0:	e003      	b.n	80013da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	041a      	lsls	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	611a      	str	r2, [r3, #16]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fa6e 	bl	80008e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001416:	b08b      	sub	sp, #44	; 0x2c
 8001418:	af06      	add	r7, sp, #24
 800141a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e0fd      	b.n	8001622 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fb64 	bl	8000b08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f002 faeb 	bl	8003a28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	687e      	ldr	r6, [r7, #4]
 800145a:	466d      	mov	r5, sp
 800145c:	f106 0410 	add.w	r4, r6, #16
 8001460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	602b      	str	r3, [r5, #0]
 8001468:	1d33      	adds	r3, r6, #4
 800146a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146c:	6838      	ldr	r0, [r7, #0]
 800146e:	f002 facb 	bl	8003a08 <USB_CoreInit>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2202      	movs	r2, #2
 800147c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0ce      	b.n	8001622 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fae6 	bl	8003a5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001490:	2300      	movs	r3, #0
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e04c      	b.n	8001530 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	3301      	adds	r3, #1
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	b298      	uxth	r0, r3
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	3336      	adds	r3, #54	; 0x36
 80014d4:	4602      	mov	r2, r0
 80014d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	3303      	adds	r3, #3
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	440b      	add	r3, r1
 80014fc:	3338      	adds	r3, #56	; 0x38
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	440b      	add	r3, r1
 8001510:	333c      	adds	r3, #60	; 0x3c
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	3340      	adds	r3, #64	; 0x40
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	3301      	adds	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3ad      	bcc.n	8001496 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e044      	b.n	80015ca <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	3301      	adds	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d3b5      	bcc.n	8001540 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	687e      	ldr	r6, [r7, #4]
 80015dc:	466d      	mov	r5, sp
 80015de:	f106 0410 	add.w	r4, r6, #16
 80015e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	602b      	str	r3, [r5, #0]
 80015ea:	1d33      	adds	r3, r6, #4
 80015ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ee:	6838      	ldr	r0, [r7, #0]
 80015f0:	f002 fa40 	bl	8003a74 <USB_DevInit>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2202      	movs	r2, #2
 80015fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00d      	b.n	8001622 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fa4a 	bl	8003ab4 <USB_DevDisconnect>

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800162c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	420e0020 	.word	0x420e0020

08001644 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_PWR_PVD_IRQHandler+0x20>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001654:	f000 f808 	bl	8001668 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001658:	4b02      	ldr	r3, [pc, #8]	; (8001664 <HAL_PWR_PVD_IRQHandler+0x20>)
 800165a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800165e:	615a      	str	r2, [r3, #20]
  }
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40010400 	.word	0x40010400

08001668 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e26c      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8087 	beq.w	80017a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001694:	4b92      	ldr	r3, [pc, #584]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b04      	cmp	r3, #4
 800169e:	d00c      	beq.n	80016ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016a0:	4b8f      	ldr	r3, [pc, #572]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d112      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
 80016ac:	4b8c      	ldr	r3, [pc, #560]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b8:	d10b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ba:	4b89      	ldr	r3, [pc, #548]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d06c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x12c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d168      	bne.n	80017a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e246      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x76>
 80016dc:	4b80      	ldr	r3, [pc, #512]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a7f      	ldr	r2, [pc, #508]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e02e      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x98>
 80016f2:	4b7b      	ldr	r3, [pc, #492]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7a      	ldr	r2, [pc, #488]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b78      	ldr	r3, [pc, #480]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a77      	ldr	r2, [pc, #476]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0xbc>
 8001716:	4b72      	ldr	r3, [pc, #456]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a71      	ldr	r2, [pc, #452]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6f      	ldr	r3, [pc, #444]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6e      	ldr	r2, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 8001730:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a6a      	ldr	r2, [pc, #424]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a67      	ldr	r2, [pc, #412]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fae4 	bl	8000d1c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fae0 	bl	8000d1c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1fa      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b5d      	ldr	r3, [pc, #372]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xe4>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fad0 	bl	8000d1c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff facc 	bl	8000d1c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1e6      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x10c>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ae:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x18c>
 80017c6:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x176>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1ba      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4939      	ldr	r1, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e03a      	b.n	8001876 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fa85 	bl	8000d1c <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fa81 	bl	8000d1c <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e19b      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4927      	ldr	r1, [pc, #156]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fa64 	bl	8000d1c <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fa60 	bl	8000d1c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e17a      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d03a      	beq.n	80018f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d019      	beq.n	80018be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_RCC_OscConfig+0x274>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001890:	f7ff fa44 	bl	8000d1c <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff fa40 	bl	8000d1c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e15a      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f000 fad8 	bl	8001e6c <RCC_Delay>
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_RCC_OscConfig+0x274>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fa2a 	bl	8000d1c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ca:	e00f      	b.n	80018ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fa26 	bl	8000d1c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d908      	bls.n	80018ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e140      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	42420000 	.word	0x42420000
 80018e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	4b9e      	ldr	r3, [pc, #632]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e9      	bne.n	80018cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80a6 	beq.w	8001a52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4b97      	ldr	r3, [pc, #604]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10d      	bne.n	8001932 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b94      	ldr	r3, [pc, #592]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a93      	ldr	r2, [pc, #588]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b91      	ldr	r3, [pc, #580]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192e:	2301      	movs	r3, #1
 8001930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001932:	4b8e      	ldr	r3, [pc, #568]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193e:	4b8b      	ldr	r3, [pc, #556]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a8a      	ldr	r2, [pc, #552]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194a:	f7ff f9e7 	bl	8000d1c <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001952:	f7ff f9e3 	bl	8000d1c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	; 0x64
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0fd      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	4b81      	ldr	r3, [pc, #516]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x312>
 8001978:	4b7b      	ldr	r3, [pc, #492]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4a7a      	ldr	r2, [pc, #488]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6213      	str	r3, [r2, #32]
 8001984:	e02d      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x334>
 800198e:	4b76      	ldr	r3, [pc, #472]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a75      	ldr	r2, [pc, #468]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a72      	ldr	r2, [pc, #456]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	e01c      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d10c      	bne.n	80019ca <HAL_RCC_OscConfig+0x356>
 80019b0:	4b6d      	ldr	r3, [pc, #436]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a6c      	ldr	r2, [pc, #432]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6213      	str	r3, [r2, #32]
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a69      	ldr	r2, [pc, #420]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a66      	ldr	r2, [pc, #408]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	4b64      	ldr	r3, [pc, #400]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a63      	ldr	r2, [pc, #396]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d015      	beq.n	8001a16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7ff f997 	bl	8000d1c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff f993 	bl	8000d1c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0ab      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ee      	beq.n	80019f2 <HAL_RCC_OscConfig+0x37e>
 8001a14:	e014      	b.n	8001a40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff f981 	bl	8000d1c <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f97d 	bl	8000d1c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e095      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ee      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b48      	ldr	r3, [pc, #288]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a47      	ldr	r2, [pc, #284]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8081 	beq.w	8001b5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d061      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d146      	bne.n	8001afe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_RCC_OscConfig+0x4fc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff f951 	bl	8000d1c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f94d 	bl	8000d1c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e067      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d108      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	492d      	ldr	r1, [pc, #180]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a19      	ldr	r1, [r3, #32]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	4927      	ldr	r1, [pc, #156]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_RCC_OscConfig+0x4fc>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f921 	bl	8000d1c <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ade:	f7ff f91d 	bl	8000d1c <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e037      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x46a>
 8001afc:	e02f      	b.n	8001b5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_RCC_OscConfig+0x4fc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff f90a 	bl	8000d1c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff f906 	bl	8000d1c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e020      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x498>
 8001b2a:	e018      	b.n	8001b5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e013      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	42420060 	.word	0x42420060

08001b74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0d0      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d910      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0207 	bic.w	r2, r3, #7
 8001b9e:	4965      	ldr	r1, [pc, #404]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b63      	ldr	r3, [pc, #396]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0b8      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd0:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a58      	ldr	r2, [pc, #352]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a52      	ldr	r2, [pc, #328]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	494d      	ldr	r1, [pc, #308]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d040      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d115      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e07f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e073      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e06b      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4936      	ldr	r1, [pc, #216]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c64:	f7ff f85a 	bl	8000d1c <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7ff f856 	bl	8000d1c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e053      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d210      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 0207 	bic.w	r2, r3, #7
 8001caa:	4922      	ldr	r1, [pc, #136]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e032      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4916      	ldr	r1, [pc, #88]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	490e      	ldr	r1, [pc, #56]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d02:	f000 f821 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	490a      	ldr	r1, [pc, #40]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_RCC_ClockConfig+0x1cc>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe ffb8 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08003b94 	.word	0x08003b94
 8001d40:	20000014 	.word	0x20000014
 8001d44:	20000018 	.word	0x20000018

08001d48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d48:	b490      	push	{r4, r7}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d50:	1d3c      	adds	r4, r7, #4
 8001d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d58:	f240 2301 	movw	r3, #513	; 0x201
 8001d5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x40>
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x46>
 8001d86:	e02d      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d8a:	623b      	str	r3, [r7, #32]
      break;
 8001d8c:	e02d      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	0c9b      	lsrs	r3, r3, #18
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001da0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	0c5b      	lsrs	r3, r3, #17
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dba:	4413      	add	r3, r2
 8001dbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc6:	fb02 f203 	mul.w	r2, r2, r3
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd2:	e004      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	623b      	str	r3, [r7, #32]
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de6:	623b      	str	r3, [r7, #32]
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	6a3b      	ldr	r3, [r7, #32]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc90      	pop	{r4, r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	08003b74 	.word	0x08003b74
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	007a1200 	.word	0x007a1200
 8001e04:	003d0900 	.word	0x003d0900

08001e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e0c:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	20000014 	.word	0x20000014

08001e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e20:	f7ff fff2 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08003ba4 	.word	0x08003ba4

08001e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e48:	f7ff ffde 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	0adb      	lsrs	r3, r3, #11
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4903      	ldr	r1, [pc, #12]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08003ba4 	.word	0x08003ba4

08001e6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <RCC_Delay+0x34>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <RCC_Delay+0x38>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0a5b      	lsrs	r3, r3, #9
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e88:	bf00      	nop
  }
  while (Delay --);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	60fa      	str	r2, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f9      	bne.n	8001e88 <RCC_Delay+0x1c>
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	20000014 	.word	0x20000014
 8001ea4:	10624dd3 	.word	0x10624dd3

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d07d      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec8:	4b4f      	ldr	r3, [pc, #316]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	4a4b      	ldr	r2, [pc, #300]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ede:	61d3      	str	r3, [r2, #28]
 8001ee0:	4b49      	ldr	r3, [pc, #292]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	4b46      	ldr	r3, [pc, #280]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d118      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efc:	4b43      	ldr	r3, [pc, #268]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a42      	ldr	r2, [pc, #264]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f08:	f7fe ff08 	bl	8000d1c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	e008      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7fe ff04 	bl	8000d1c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e06d      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f2e:	4b36      	ldr	r3, [pc, #216]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d02e      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d027      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f56:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f62:	4a29      	ldr	r2, [pc, #164]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d014      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7fe fed3 	bl	8000d1c <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7fe fecf 	bl	8000d1c <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e036      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ee      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4917      	ldr	r1, [pc, #92]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	490b      	ldr	r1, [pc, #44]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4904      	ldr	r1, [pc, #16]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
 8002010:	42420440 	.word	0x42420440

08002014 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b08d      	sub	sp, #52	; 0x34
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800201c:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800201e:	f107 040c 	add.w	r4, r7, #12
 8002022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002028:	f240 2301 	movw	r3, #513	; 0x201
 800202c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b10      	cmp	r3, #16
 800204c:	f200 8091 	bhi.w	8002172 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d04c      	beq.n	80020f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d07c      	beq.n	8002156 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800205c:	e089      	b.n	8002172 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800205e:	4b4b      	ldr	r3, [pc, #300]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002064:	4b49      	ldr	r3, [pc, #292]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8082 	beq.w	8002176 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	0c9b      	lsrs	r3, r3, #18
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800207e:	4413      	add	r3, r2
 8002080:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002084:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d018      	beq.n	80020c2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002090:	4b3e      	ldr	r3, [pc, #248]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	0c5b      	lsrs	r3, r3, #17
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800209e:	4413      	add	r3, r2
 80020a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00d      	beq.n	80020cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80020b0:	4a37      	ldr	r2, [pc, #220]	; (8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c0:	e004      	b.n	80020cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	4a33      	ldr	r2, [pc, #204]	; (8002194 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80020cc:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d8:	d102      	bne.n	80020e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020de:	e04a      	b.n	8002176 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4a2c      	ldr	r2, [pc, #176]	; (8002198 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020ee:	e042      	b.n	8002176 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002100:	d108      	bne.n	8002114 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800210c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
 8002112:	e01f      	b.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800211e:	d109      	bne.n	8002134 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800212c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
 8002132:	e00f      	b.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800213e:	d11c      	bne.n	800217a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d016      	beq.n	800217a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 800214c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002152:	e012      	b.n	800217a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002154:	e011      	b.n	800217a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002156:	f7ff fe75 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	0b9b      	lsrs	r3, r3, #14
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	3301      	adds	r3, #1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002170:	e004      	b.n	800217c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002172:	bf00      	nop
 8002174:	e002      	b.n	800217c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002176:	bf00      	nop
 8002178:	e000      	b.n	800217c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800217a:	bf00      	nop
    }
  }
  return (frequency);
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800217e:	4618      	mov	r0, r3
 8002180:	3734      	adds	r7, #52	; 0x34
 8002182:	46bd      	mov	sp, r7
 8002184:	bd90      	pop	{r4, r7, pc}
 8002186:	bf00      	nop
 8002188:	08003b84 	.word	0x08003b84
 800218c:	40021000 	.word	0x40021000
 8002190:	007a1200 	.word	0x007a1200
 8002194:	003d0900 	.word	0x003d0900
 8002198:	aaaaaaab 	.word	0xaaaaaaab

0800219c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e084      	b.n	80022bc <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7c5b      	ldrb	r3, [r3, #17]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe fc04 	bl	80009d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f9c8 	bl	8002564 <HAL_RTC_WaitForSynchro>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2204      	movs	r2, #4
 80021de:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e06b      	b.n	80022bc <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fa81 	bl	80026ec <RTC_EnterInitMode>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2204      	movs	r2, #4
 80021f4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e060      	b.n	80022bc <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0207 	bic.w	r2, r2, #7
 8002208:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <HAL_RTC_Init+0x128>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <HAL_RTC_Init+0x128>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HAL_RTC_Init+0x128>)
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4926      	ldr	r1, [pc, #152]	; (80022c4 <HAL_RTC_Init+0x128>)
 800222c:	4313      	orrs	r3, r2
 800222e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002238:	d003      	beq.n	8002242 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e00e      	b.n	8002260 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002242:	2001      	movs	r0, #1
 8002244:	f7ff fee6 	bl	8002014 <HAL_RCCEx_GetPeriphCLKFreq>
 8002248:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d104      	bne.n	800225a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2204      	movs	r2, #4
 8002254:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e030      	b.n	80022bc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b01      	subs	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f023 010f 	bic.w	r1, r3, #15
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	0c1a      	lsrs	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	b291      	uxth	r1, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fa55 	bl	800273c <RTC_ExitInitMode>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d004      	beq.n	80022a2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2204      	movs	r2, #4
 800229c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e00c      	b.n	80022bc <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80022ba:	2300      	movs	r3, #0
  }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40006c00 	.word	0x40006c00

080022c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_RTC_SetTime+0x20>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e080      	b.n	80023ee <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	7c1b      	ldrb	r3, [r3, #16]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_RTC_SetTime+0x30>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e07a      	b.n	80023ee <HAL_RTC_SetTime+0x126>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2202      	movs	r2, #2
 8002302:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d113      	bne.n	8002332 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002314:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	785b      	ldrb	r3, [r3, #1]
 800231c:	4619      	mov	r1, r3
 800231e:	460b      	mov	r3, r1
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	1a5b      	subs	r3, r3, r1
 8002324:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002326:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800232c:	4413      	add	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	e01e      	b.n	8002370 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fa28 	bl	800278c <RTC_Bcd2ToByte>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002344:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fa1d 	bl	800278c <RTC_Bcd2ToByte>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800235e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	789b      	ldrb	r3, [r3, #2]
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fa11 	bl	800278c <RTC_Bcd2ToByte>
 800236a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800236c:	4423      	add	r3, r4
 800236e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002370:	6979      	ldr	r1, [r7, #20]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f953 	bl	800261e <RTC_WriteTimeCounter>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2204      	movs	r2, #4
 8002382:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e02f      	b.n	80023ee <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0205 	bic.w	r2, r2, #5
 800239c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f964 	bl	800266c <RTC_ReadAlarmCounter>
 80023a4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ac:	d018      	beq.n	80023e0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d214      	bcs.n	80023e0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80023bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80023c0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80023c2:	6939      	ldr	r1, [r7, #16]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f96a 	bl	800269e <RTC_WriteAlarmCounter>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2204      	movs	r2, #4
 80023d4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e006      	b.n	80023ee <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}
	...

080023f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	2300      	movs	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_RTC_SetDate+0x24>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e097      	b.n	8002550 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	7c1b      	ldrb	r3, [r3, #16]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_RTC_SetDate+0x34>
 8002428:	2302      	movs	r3, #2
 800242a:	e091      	b.n	8002550 <HAL_RTC_SetDate+0x158>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2202      	movs	r2, #2
 8002436:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10c      	bne.n	8002458 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	78da      	ldrb	r2, [r3, #3]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	785a      	ldrb	r2, [r3, #1]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	789a      	ldrb	r2, [r3, #2]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	739a      	strb	r2, [r3, #14]
 8002456:	e01a      	b.n	800248e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	78db      	ldrb	r3, [r3, #3]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 f995 	bl	800278c <RTC_Bcd2ToByte>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	785b      	ldrb	r3, [r3, #1]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f98c 	bl	800278c <RTC_Bcd2ToByte>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	789b      	ldrb	r3, [r3, #2]
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f983 	bl	800278c <RTC_Bcd2ToByte>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	7bdb      	ldrb	r3, [r3, #15]
 8002492:	4618      	mov	r0, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	7b59      	ldrb	r1, [r3, #13]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	7b9b      	ldrb	r3, [r3, #14]
 800249c:	461a      	mov	r2, r3
 800249e:	f000 f993 	bl	80027c8 <RTC_WeekDayNum>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	7b1a      	ldrb	r2, [r3, #12]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f883 	bl	80025be <RTC_ReadTimeCounter>
 80024b8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4a26      	ldr	r2, [pc, #152]	; (8002558 <HAL_RTC_SetDate+0x160>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	0adb      	lsrs	r3, r3, #11
 80024c4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b18      	cmp	r3, #24
 80024ca:	d93a      	bls.n	8002542 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4a23      	ldr	r2, [pc, #140]	; (800255c <HAL_RTC_SetDate+0x164>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_RTC_SetDate+0x168>)
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80024e2:	69f9      	ldr	r1, [r7, #28]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f89a 	bl	800261e <RTC_WriteTimeCounter>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2204      	movs	r2, #4
 80024f4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e027      	b.n	8002550 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f8b3 	bl	800266c <RTC_ReadAlarmCounter>
 8002506:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800250e:	d018      	beq.n	8002542 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	429a      	cmp	r2, r3
 8002516:	d214      	bcs.n	8002542 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800251e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002522:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002524:	69b9      	ldr	r1, [r7, #24]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f8b9 	bl	800269e <RTC_WriteAlarmCounter>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2204      	movs	r2, #4
 8002536:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e006      	b.n	8002550 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	91a2b3c5 	.word	0x91a2b3c5
 800255c:	aaaaaaab 	.word	0xaaaaaaab
 8002560:	00015180 	.word	0x00015180

08002564 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e01d      	b.n	80025b6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0208 	bic.w	r2, r2, #8
 8002588:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800258a:	f7fe fbc7 	bl	8000d1c <HAL_GetTick>
 800258e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002590:	e009      	b.n	80025a6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002592:	f7fe fbc3 	bl	8000d1c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025a0:	d901      	bls.n	80025a6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e007      	b.n	80025b6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ee      	beq.n	8002592 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80025be:	b480      	push	{r7}
 80025c0:	b087      	sub	sp, #28
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	827b      	strh	r3, [r7, #18]
 80025ca:	2300      	movs	r3, #0
 80025cc:	823b      	strh	r3, [r7, #16]
 80025ce:	2300      	movs	r3, #0
 80025d0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80025ee:	8a7a      	ldrh	r2, [r7, #18]
 80025f0:	8a3b      	ldrh	r3, [r7, #16]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d008      	beq.n	8002608 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80025f6:	8a3b      	ldrh	r3, [r7, #16]
 80025f8:	041a      	lsls	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	b29b      	uxth	r3, r3
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e004      	b.n	8002612 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002608:	8a7b      	ldrh	r3, [r7, #18]
 800260a:	041a      	lsls	r2, r3, #16
 800260c:	89fb      	ldrh	r3, [r7, #14]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002612:	697b      	ldr	r3, [r7, #20]
}
 8002614:	4618      	mov	r0, r3
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f85d 	bl	80026ec <RTC_EnterInitMode>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e011      	b.n	8002662 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	0c12      	lsrs	r2, r2, #16
 8002646:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	b292      	uxth	r2, r2
 8002650:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f872 	bl	800273c <RTC_ExitInitMode>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	81fb      	strh	r3, [r7, #14]
 8002678:	2300      	movs	r3, #0
 800267a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800268c:	89fb      	ldrh	r3, [r7, #14]
 800268e:	041a      	lsls	r2, r3, #16
 8002690:	89bb      	ldrh	r3, [r7, #12]
 8002692:	4313      	orrs	r3, r2
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f81d 	bl	80026ec <RTC_EnterInitMode>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e011      	b.n	80026e2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	0c12      	lsrs	r2, r2, #16
 80026c6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	b292      	uxth	r2, r2
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f832 	bl	800273c <RTC_ExitInitMode>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80026f8:	f7fe fb10 	bl	8000d1c <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80026fe:	e009      	b.n	8002714 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002700:	f7fe fb0c 	bl	8000d1c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800270e:	d901      	bls.n	8002714 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e00f      	b.n	8002734 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0ee      	beq.n	8002700 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0210 	orr.w	r2, r2, #16
 8002730:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0210 	bic.w	r2, r2, #16
 8002756:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002758:	f7fe fae0 	bl	8000d1c <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800275e:	e009      	b.n	8002774 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002760:	f7fe fadc 	bl	8000d1c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800276e:	d901      	bls.n	8002774 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e007      	b.n	8002784 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0ee      	beq.n	8002760 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	b2db      	uxtb	r3, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
	...

080027c8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
 80027d4:	4613      	mov	r3, r2
 80027d6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80027e6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d82d      	bhi.n	800284a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	4a2c      	ldr	r2, [pc, #176]	; (80028ac <RTC_WeekDayNum+0xe4>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	085a      	lsrs	r2, r3, #1
 8002802:	78bb      	ldrb	r3, [r7, #2]
 8002804:	441a      	add	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	441a      	add	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3b01      	subs	r3, #1
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	3b01      	subs	r3, #1
 8002816:	4926      	ldr	r1, [pc, #152]	; (80028b0 <RTC_WeekDayNum+0xe8>)
 8002818:	fba1 1303 	umull	r1, r3, r1, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	1ad2      	subs	r2, r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	3b01      	subs	r3, #1
 8002824:	4922      	ldr	r1, [pc, #136]	; (80028b0 <RTC_WeekDayNum+0xe8>)
 8002826:	fba1 1303 	umull	r1, r3, r1, r3
 800282a:	09db      	lsrs	r3, r3, #7
 800282c:	4413      	add	r3, r2
 800282e:	1d1a      	adds	r2, r3, #4
 8002830:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <RTC_WeekDayNum+0xec>)
 8002832:	fba3 1302 	umull	r1, r3, r3, r2
 8002836:	1ad1      	subs	r1, r2, r3
 8002838:	0849      	lsrs	r1, r1, #1
 800283a:	440b      	add	r3, r1
 800283c:	0899      	lsrs	r1, r3, #2
 800283e:	460b      	mov	r3, r1
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	1a5b      	subs	r3, r3, r1
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e029      	b.n	800289e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <RTC_WeekDayNum+0xe4>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	085a      	lsrs	r2, r3, #1
 800285e:	78bb      	ldrb	r3, [r7, #2]
 8002860:	441a      	add	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	441a      	add	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	441a      	add	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4910      	ldr	r1, [pc, #64]	; (80028b0 <RTC_WeekDayNum+0xe8>)
 8002870:	fba1 1303 	umull	r1, r3, r1, r3
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	1ad2      	subs	r2, r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	490d      	ldr	r1, [pc, #52]	; (80028b0 <RTC_WeekDayNum+0xe8>)
 800287c:	fba1 1303 	umull	r1, r3, r1, r3
 8002880:	09db      	lsrs	r3, r3, #7
 8002882:	4413      	add	r3, r2
 8002884:	1c9a      	adds	r2, r3, #2
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <RTC_WeekDayNum+0xec>)
 8002888:	fba3 1302 	umull	r1, r3, r3, r2
 800288c:	1ad1      	subs	r1, r2, r3
 800288e:	0849      	lsrs	r1, r1, #1
 8002890:	440b      	add	r3, r1
 8002892:	0899      	lsrs	r1, r3, #2
 8002894:	460b      	mov	r3, r1
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	1a5b      	subs	r3, r3, r1
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	b2db      	uxtb	r3, r3
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	38e38e39 	.word	0x38e38e39
 80028b0:	51eb851f 	.word	0x51eb851f
 80028b4:	24924925 	.word	0x24924925

080028b8 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d027      	beq.n	800291e <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f824 	bl	8002938 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0204 	mvn.w	r2, #4
 80028f8:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2204      	movs	r2, #4
 80028fe:	745a      	strb	r2, [r3, #17]
 8002900:	e005      	b.n	800290e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f80f 	bl	8002926 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e041      	b.n	80029e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d106      	bne.n	8002976 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7fe f859 	bl	8000a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f000 fa6f 	bl	8002e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d001      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e03a      	b.n	8002a76 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <HAL_TIM_Base_Start_IT+0x98>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00e      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x58>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2a:	d009      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x58>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a14      	ldr	r2, [pc, #80]	; (8002a84 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d004      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x58>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d111      	bne.n	8002a64 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d010      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a62:	e007      	b.n	8002a74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800

08002a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0202 	mvn.w	r2, #2
 8002ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f9b1 	bl	8002e36 <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f9a4 	bl	8002e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f9b3 	bl	8002e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0204 	mvn.w	r2, #4
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f987 	bl	8002e36 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f97a 	bl	8002e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f989 	bl	8002e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0208 	mvn.w	r2, #8
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2204      	movs	r2, #4
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f95d 	bl	8002e36 <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f950 	bl	8002e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f95f 	bl	8002e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d122      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d11b      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0210 	mvn.w	r2, #16
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f933 	bl	8002e36 <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e005      	b.n	8002bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f926 	bl	8002e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f935 	bl	8002e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10e      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0201 	mvn.w	r2, #1
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fd fe54 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b80      	cmp	r3, #128	; 0x80
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	2b80      	cmp	r3, #128	; 0x80
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa77 	bl	800312a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b40      	cmp	r3, #64	; 0x40
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f8f9 	bl	8002e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0220 	mvn.w	r2, #32
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa42 	bl	8003118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIM_ConfigClockSource+0x18>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e0b3      	b.n	8002e1c <HAL_TIM_ConfigClockSource+0x180>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cec:	d03e      	beq.n	8002d6c <HAL_TIM_ConfigClockSource+0xd0>
 8002cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf2:	f200 8087 	bhi.w	8002e04 <HAL_TIM_ConfigClockSource+0x168>
 8002cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfa:	f000 8085 	beq.w	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d02:	d87f      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x168>
 8002d04:	2b70      	cmp	r3, #112	; 0x70
 8002d06:	d01a      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0xa2>
 8002d08:	2b70      	cmp	r3, #112	; 0x70
 8002d0a:	d87b      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x168>
 8002d0c:	2b60      	cmp	r3, #96	; 0x60
 8002d0e:	d050      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x116>
 8002d10:	2b60      	cmp	r3, #96	; 0x60
 8002d12:	d877      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x168>
 8002d14:	2b50      	cmp	r3, #80	; 0x50
 8002d16:	d03c      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0xf6>
 8002d18:	2b50      	cmp	r3, #80	; 0x50
 8002d1a:	d873      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x168>
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d058      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x136>
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d86f      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x168>
 8002d24:	2b30      	cmp	r3, #48	; 0x30
 8002d26:	d064      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x156>
 8002d28:	2b30      	cmp	r3, #48	; 0x30
 8002d2a:	d86b      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x168>
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d060      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x156>
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d867      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x168>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d05c      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x156>
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d05a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d3c:	e062      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f000 f966 	bl	800301e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	609a      	str	r2, [r3, #8]
      break;
 8002d6a:	e04e      	b.n	8002e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6899      	ldr	r1, [r3, #8]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f000 f94f 	bl	800301e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d8e:	609a      	str	r2, [r3, #8]
      break;
 8002d90:	e03b      	b.n	8002e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f000 f8c6 	bl	8002f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2150      	movs	r1, #80	; 0x50
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f91d 	bl	8002fea <TIM_ITRx_SetConfig>
      break;
 8002db0:	e02b      	b.n	8002e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f000 f8e4 	bl	8002f8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2160      	movs	r1, #96	; 0x60
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f90d 	bl	8002fea <TIM_ITRx_SetConfig>
      break;
 8002dd0:	e01b      	b.n	8002e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f000 f8a6 	bl	8002f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2140      	movs	r1, #64	; 0x40
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f8fd 	bl	8002fea <TIM_ITRx_SetConfig>
      break;
 8002df0:	e00b      	b.n	8002e0a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f000 f8f4 	bl	8002fea <TIM_ITRx_SetConfig>
        break;
 8002e02:	e002      	b.n	8002e0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e04:	bf00      	nop
 8002e06:	e000      	b.n	8002e0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a29      	ldr	r2, [pc, #164]	; (8002f24 <TIM_Base_SetConfig+0xb8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00b      	beq.n	8002e9c <TIM_Base_SetConfig+0x30>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8a:	d007      	beq.n	8002e9c <TIM_Base_SetConfig+0x30>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a26      	ldr	r2, [pc, #152]	; (8002f28 <TIM_Base_SetConfig+0xbc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d003      	beq.n	8002e9c <TIM_Base_SetConfig+0x30>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a25      	ldr	r2, [pc, #148]	; (8002f2c <TIM_Base_SetConfig+0xc0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d108      	bne.n	8002eae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <TIM_Base_SetConfig+0xb8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <TIM_Base_SetConfig+0x62>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebc:	d007      	beq.n	8002ece <TIM_Base_SetConfig+0x62>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <TIM_Base_SetConfig+0xbc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_Base_SetConfig+0x62>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <TIM_Base_SetConfig+0xc0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d108      	bne.n	8002ee0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <TIM_Base_SetConfig+0xb8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d103      	bne.n	8002f14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	615a      	str	r2, [r3, #20]
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40000800 	.word	0x40000800

08002f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f023 0201 	bic.w	r2, r3, #1
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f023 030a 	bic.w	r3, r3, #10
 8002f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	621a      	str	r2, [r3, #32]
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f023 0210 	bic.w	r2, r3, #16
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	031b      	lsls	r3, r3, #12
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	621a      	str	r2, [r3, #32]
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	f043 0307 	orr.w	r3, r3, #7
 800300c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	609a      	str	r2, [r3, #8]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800301e:	b480      	push	{r7}
 8003020:	b087      	sub	sp, #28
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003038:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	021a      	lsls	r2, r3, #8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	431a      	orrs	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4313      	orrs	r3, r2
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	609a      	str	r2, [r3, #8]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003070:	2302      	movs	r3, #2
 8003072:	e046      	b.n	8003102 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d009      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a10      	ldr	r2, [pc, #64]	; (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10c      	bne.n	80030f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800

08003118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e03f      	b.n	80031ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fc84 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2224      	movs	r2, #36	; 0x24
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800317e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fbb3 	bl	80038ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	4613      	mov	r3, r2
 80031e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d11d      	bne.n	800322c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_UART_Receive_IT+0x26>
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e016      	b.n	800322e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_UART_Receive_IT+0x38>
 800320a:	2302      	movs	r3, #2
 800320c:	e00f      	b.n	800322e <HAL_UART_Receive_IT+0x58>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	461a      	mov	r2, r3
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f9d8 	bl	80035d8 <UART_Start_Receive_IT>
 8003228:	4603      	mov	r3, r0
 800322a:	e000      	b.n	800322e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_UART_IRQHandler+0x52>
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fa88 	bl	8003798 <UART_Receive_IT>
      return;
 8003288:	e17b      	b.n	8003582 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80b1 	beq.w	80033f4 <HAL_UART_IRQHandler+0x1bc>
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <HAL_UART_IRQHandler+0x70>
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80a6 	beq.w	80033f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_UART_IRQHandler+0x90>
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f043 0201 	orr.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_UART_IRQHandler+0xb0>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f043 0202 	orr.w	r2, r3, #2
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_UART_IRQHandler+0xd0>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00f      	beq.n	8003332 <HAL_UART_IRQHandler+0xfa>
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <HAL_UART_IRQHandler+0xee>
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f043 0208 	orr.w	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 811e 	beq.w	8003578 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_UART_IRQHandler+0x11e>
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fa21 	bl	8003798 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <HAL_UART_IRQHandler+0x146>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d031      	beq.n	80033e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f963 	bl	800364a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d023      	beq.n	80033da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d013      	beq.n	80033d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	4a76      	ldr	r2, [pc, #472]	; (8003588 <HAL_UART_IRQHandler+0x350>)
 80033b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fe02 	bl	8000fc0 <HAL_DMA_Abort_IT>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d016      	beq.n	80033f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033cc:	4610      	mov	r0, r2
 80033ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	e00e      	b.n	80033f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8ec 	bl	80035b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	e00a      	b.n	80033f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8e8 	bl	80035b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e0:	e006      	b.n	80033f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8e4 	bl	80035b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033ee:	e0c3      	b.n	8003578 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f0:	bf00      	nop
    return;
 80033f2:	e0c1      	b.n	8003578 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	f040 80a1 	bne.w	8003540 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 809b 	beq.w	8003540 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8095 	beq.w	8003540 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d04e      	beq.n	80034d8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003444:	8a3b      	ldrh	r3, [r7, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8098 	beq.w	800357c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003450:	8a3a      	ldrh	r2, [r7, #16]
 8003452:	429a      	cmp	r2, r3
 8003454:	f080 8092 	bcs.w	800357c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8a3a      	ldrh	r2, [r7, #16]
 800345c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b20      	cmp	r3, #32
 8003466:	d02b      	beq.n	80034c0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003476:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003496:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0210 	bic.w	r2, r2, #16
 80034b4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd fd45 	bl	8000f4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	4619      	mov	r1, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f876 	bl	80035c2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034d6:	e051      	b.n	800357c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d047      	beq.n	8003580 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80034f0:	8a7b      	ldrh	r3, [r7, #18]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d044      	beq.n	8003580 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003504:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0210 	bic.w	r2, r2, #16
 8003532:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003534:	8a7b      	ldrh	r3, [r7, #18]
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f842 	bl	80035c2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800353e:	e01f      	b.n	8003580 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_UART_IRQHandler+0x324>
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8b8 	bl	80036ca <UART_Transmit_IT>
    return;
 800355a:	e012      	b.n	8003582 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00d      	beq.n	8003582 <HAL_UART_IRQHandler+0x34a>
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8f9 	bl	8003768 <UART_EndTransmit_IT>
    return;
 8003576:	e004      	b.n	8003582 <HAL_UART_IRQHandler+0x34a>
    return;
 8003578:	bf00      	nop
 800357a:	e002      	b.n	8003582 <HAL_UART_IRQHandler+0x34a>
      return;
 800357c:	bf00      	nop
 800357e:	e000      	b.n	8003582 <HAL_UART_IRQHandler+0x34a>
      return;
 8003580:	bf00      	nop
  }
}
 8003582:	3728      	adds	r7, #40	; 0x28
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	080036a3 	.word	0x080036a3

0800358c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2222      	movs	r2, #34	; 0x22
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800361c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0220 	orr.w	r2, r2, #32
 800363c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003660:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	2b01      	cmp	r3, #1
 8003678:	d107      	bne.n	800368a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0210 	bic.w	r2, r2, #16
 8003688:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff ff77 	bl	80035b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b21      	cmp	r3, #33	; 0x21
 80036dc:	d13e      	bne.n	800375c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e6:	d114      	bne.n	8003712 <UART_Transmit_IT+0x48>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d110      	bne.n	8003712 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003704:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	1c9a      	adds	r2, r3, #2
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	621a      	str	r2, [r3, #32]
 8003710:	e008      	b.n	8003724 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	1c59      	adds	r1, r3, #1
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6211      	str	r1, [r2, #32]
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29b      	uxth	r3, r3
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4619      	mov	r1, r3
 8003732:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10f      	bne.n	8003758 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003746:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003756:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff feff 	bl	800358c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b22      	cmp	r3, #34	; 0x22
 80037aa:	f040 8099 	bne.w	80038e0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b6:	d117      	bne.n	80037e8 <UART_Receive_IT+0x50>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d113      	bne.n	80037e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
 80037e6:	e026      	b.n	8003836 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fa:	d007      	beq.n	800380c <UART_Receive_IT+0x74>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <UART_Receive_IT+0x82>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e008      	b.n	800382c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003826:	b2da      	uxtb	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29b      	uxth	r3, r3
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4619      	mov	r1, r3
 8003844:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003846:	2b00      	cmp	r3, #0
 8003848:	d148      	bne.n	80038dc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0220 	bic.w	r2, r2, #32
 8003858:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003868:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	2b01      	cmp	r3, #1
 8003888:	d123      	bne.n	80038d2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0210 	bic.w	r2, r2, #16
 800389e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d10a      	bne.n	80038c4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038c8:	4619      	mov	r1, r3
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff fe79 	bl	80035c2 <HAL_UARTEx_RxEventCallback>
 80038d0:	e002      	b.n	80038d8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fe63 	bl	800359e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e002      	b.n	80038e2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003926:	f023 030c 	bic.w	r3, r3, #12
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	430b      	orrs	r3, r1
 8003932:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <UART_SetConfig+0x114>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d103      	bne.n	800395c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003954:	f7fe fa76 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	e002      	b.n	8003962 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800395c:	f7fe fa5e 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8003960:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009a      	lsls	r2, r3, #2
 800396c:	441a      	add	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <UART_SetConfig+0x118>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	0119      	lsls	r1, r3, #4
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	009a      	lsls	r2, r3, #2
 800398c:	441a      	add	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	fbb2 f2f3 	udiv	r2, r2, r3
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <UART_SetConfig+0x118>)
 800399a:	fba3 0302 	umull	r0, r3, r3, r2
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	2064      	movs	r0, #100	; 0x64
 80039a2:	fb00 f303 	mul.w	r3, r0, r3
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	3332      	adds	r3, #50	; 0x32
 80039ac:	4a15      	ldr	r2, [pc, #84]	; (8003a04 <UART_SetConfig+0x118>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b8:	4419      	add	r1, r3
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009a      	lsls	r2, r3, #2
 80039c4:	441a      	add	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <UART_SetConfig+0x118>)
 80039d2:	fba3 0302 	umull	r0, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2064      	movs	r0, #100	; 0x64
 80039da:	fb00 f303 	mul.w	r3, r0, r3
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	3332      	adds	r3, #50	; 0x32
 80039e4:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <UART_SetConfig+0x118>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	f003 020f 	and.w	r2, r3, #15
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	440a      	add	r2, r1
 80039f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40013800 	.word	0x40013800
 8003a04:	51eb851f 	.word	0x51eb851f

08003a08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a08:	b084      	sub	sp, #16
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	f107 0014 	add.w	r0, r7, #20
 8003a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	b004      	add	sp, #16
 8003a26:	4770      	bx	lr

08003a28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	4013      	ands	r3, r2
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a74:	b084      	sub	sp, #16
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	f107 0014 	add.w	r0, r7, #20
 8003a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	b004      	add	sp, #16
 8003ab2:	4770      	bx	lr

08003ab4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <__libc_init_array>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	2600      	movs	r6, #0
 8003acc:	4d0c      	ldr	r5, [pc, #48]	; (8003b00 <__libc_init_array+0x38>)
 8003ace:	4c0d      	ldr	r4, [pc, #52]	; (8003b04 <__libc_init_array+0x3c>)
 8003ad0:	1b64      	subs	r4, r4, r5
 8003ad2:	10a4      	asrs	r4, r4, #2
 8003ad4:	42a6      	cmp	r6, r4
 8003ad6:	d109      	bne.n	8003aec <__libc_init_array+0x24>
 8003ad8:	f000 f822 	bl	8003b20 <_init>
 8003adc:	2600      	movs	r6, #0
 8003ade:	4d0a      	ldr	r5, [pc, #40]	; (8003b08 <__libc_init_array+0x40>)
 8003ae0:	4c0a      	ldr	r4, [pc, #40]	; (8003b0c <__libc_init_array+0x44>)
 8003ae2:	1b64      	subs	r4, r4, r5
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	42a6      	cmp	r6, r4
 8003ae8:	d105      	bne.n	8003af6 <__libc_init_array+0x2e>
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af0:	4798      	blx	r3
 8003af2:	3601      	adds	r6, #1
 8003af4:	e7ee      	b.n	8003ad4 <__libc_init_array+0xc>
 8003af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003afa:	4798      	blx	r3
 8003afc:	3601      	adds	r6, #1
 8003afe:	e7f2      	b.n	8003ae6 <__libc_init_array+0x1e>
 8003b00:	08003bac 	.word	0x08003bac
 8003b04:	08003bac 	.word	0x08003bac
 8003b08:	08003bac 	.word	0x08003bac
 8003b0c:	08003bb0 	.word	0x08003bb0

08003b10 <memset>:
 8003b10:	4603      	mov	r3, r0
 8003b12:	4402      	add	r2, r0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d100      	bne.n	8003b1a <memset+0xa>
 8003b18:	4770      	bx	lr
 8003b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1e:	e7f9      	b.n	8003b14 <memset+0x4>

08003b20 <_init>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr

08003b2c <_fini>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr
