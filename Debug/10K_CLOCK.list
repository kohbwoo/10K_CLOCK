
10K_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002f20  08002f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fbc  08002fbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fbc  08002fbc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fbc  08002fbc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fbc  08002fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  2000000c  08002fd0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08002fd0  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6af  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e1  00000000  00000000  0002f6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000319c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00032940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d44  00000000  00000000  000337e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff71  00000000  00000000  0004b524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be83  00000000  00000000  0005b495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004138  00000000  00000000  000e736c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f08 	.word	0x08002f08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f08 	.word	0x08002f08

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b09c      	sub	sp, #112	; 0x70
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//const int Segment[10] = {0x3, 0x9F, 0x25, 0xD, 0x99, 0x49, 0x41, 0x1F, 0x1, 0x9 };
	//int output = 0;


  int time = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fc0b 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f8d5 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 fa15 	bl	800058c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f9c7 	bl	80004f4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000166:	f000 f9ef 	bl	8000548 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800016a:	f000 f977 	bl	800045c <MX_TIM2_Init>
  MX_RTC_Init();
 800016e:	f000 f92b 	bl	80003c8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);//타이머 활성화
 8000172:	485f      	ldr	r0, [pc, #380]	; (80002f0 <main+0x1a4>)
 8000174:	f002 f9b6 	bl	80024e4 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, RESET);//LOW출력
 8000178:	2200      	movs	r2, #0
 800017a:	2120      	movs	r1, #32
 800017c:	485d      	ldr	r0, [pc, #372]	; (80002f4 <main+0x1a8>)
 800017e:	f000 ff0f 	bl	8000fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH0_Pin, RESET);//HIGH 출력
 8000182:	2200      	movs	r2, #0
 8000184:	2101      	movs	r1, #1
 8000186:	485b      	ldr	r0, [pc, #364]	; (80002f4 <main+0x1a8>)
 8000188:	f000 ff0a 	bl	8000fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH1_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2102      	movs	r1, #2
 8000190:	4858      	ldr	r0, [pc, #352]	; (80002f4 <main+0x1a8>)
 8000192:	f000 ff05 	bl	8000fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH2_Pin, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2104      	movs	r1, #4
 800019a:	4856      	ldr	r0, [pc, #344]	; (80002f4 <main+0x1a8>)
 800019c:	f000 ff00 	bl	8000fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH3_Pin, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2108      	movs	r1, #8
 80001a4:	4853      	ldr	r0, [pc, #332]	; (80002f4 <main+0x1a8>)
 80001a6:	f000 fefb 	bl	8000fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LATCH0_GPIO_Port, LATCH4_Pin, RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2110      	movs	r1, #16
 80001ae:	4851      	ldr	r0, [pc, #324]	; (80002f4 <main+0x1a8>)
 80001b0:	f000 fef6 	bl	8000fa0 <HAL_GPIO_WritePin>





	  int Segment[10] = { 0xC0, 0xF9, 0xA4 ,0xB0, 0x99, 0x92, 0x82, 0xD8, 0x80, 0x90}; //16진수 -> segmen 정보
 80001b4:	4b50      	ldr	r3, [pc, #320]	; (80002f8 <main+0x1ac>)
 80001b6:	463c      	mov	r4, r7
 80001b8:	461d      	mov	r5, r3
 80001ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80001c6:	e884 0003 	stmia.w	r4, {r0, r1}
	  int testPCB_Latch_Adrr[5] = {LATCH0_Pin, LATCH1_Pin, LATCH2_Pin, LATCH3_Pin, LATCH4_Pin}; //테스트 pcb 래치 핀 주소
 80001ca:	4b4c      	ldr	r3, [pc, #304]	; (80002fc <main+0x1b0>)
 80001cc:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80001d0:	461d      	mov	r5, r3
 80001d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d6:	682b      	ldr	r3, [r5, #0]
 80001d8:	6023      	str	r3, [r4, #0]

	  int Segment_Output[10] = {0,1,2,3,4,5,6,7,8,9};
 80001da:	4b49      	ldr	r3, [pc, #292]	; (8000300 <main+0x1b4>)
 80001dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80001e0:	461d      	mov	r5, r3
 80001e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80001ee:	e884 0003 	stmia.w	r4, {r0, r1}




	  for(int i = 0; i < 10; i++){
 80001f2:	2300      	movs	r3, #0
 80001f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80001f6:	e071      	b.n	80002dc <main+0x190>
		  for(int j = 0; j <5; j++){
 80001f8:	2300      	movs	r3, #0
 80001fa:	667b      	str	r3, [r7, #100]	; 0x64
 80001fc:	e068      	b.n	80002d0 <main+0x184>
			  HAL_GPIO_WritePin(OE_GPIO_Port, testPCB_Latch_Adrr[j], SET);
 80001fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000206:	4413      	add	r3, r2
 8000208:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800020c:	b29b      	uxth	r3, r3
 800020e:	2201      	movs	r2, #1
 8000210:	4619      	mov	r1, r3
 8000212:	4838      	ldr	r0, [pc, #224]	; (80002f4 <main+0x1a8>)
 8000214:	f000 fec4 	bl	8000fa0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, Segment_Output[Segment[i]]+(Segment_Output[Segment[i]]<<8), SET);
 8000218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800021a:	009b      	lsls	r3, r3, #2
 800021c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000220:	4413      	add	r3, r2
 8000222:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8000226:	009b      	lsls	r3, r3, #2
 8000228:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800022c:	4413      	add	r3, r2
 800022e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000232:	b29a      	uxth	r2, r3
 8000234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800023c:	440b      	add	r3, r1
 800023e:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000248:	440b      	add	r3, r1
 800024a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800024e:	b29b      	uxth	r3, r3
 8000250:	021b      	lsls	r3, r3, #8
 8000252:	b29b      	uxth	r3, r3
 8000254:	4413      	add	r3, r2
 8000256:	b29b      	uxth	r3, r3
 8000258:	2201      	movs	r2, #1
 800025a:	4619      	mov	r1, r3
 800025c:	4829      	ldr	r0, [pc, #164]	; (8000304 <main+0x1b8>)
 800025e:	f000 fe9f 	bl	8000fa0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, ~(Segment_Output[Segment[i]]+(Segment_Output[Segment[i]]<<8)), RESET);
 8000262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800026a:	4413      	add	r3, r2
 800026c:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000276:	4413      	add	r3, r2
 8000278:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800027c:	b29a      	uxth	r2, r3
 800027e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000286:	440b      	add	r3, r1
 8000288:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000292:	440b      	add	r3, r1
 8000294:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000298:	b29b      	uxth	r3, r3
 800029a:	021b      	lsls	r3, r3, #8
 800029c:	b29b      	uxth	r3, r3
 800029e:	4413      	add	r3, r2
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	43db      	mvns	r3, r3
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	2200      	movs	r2, #0
 80002a8:	4619      	mov	r1, r3
 80002aa:	4816      	ldr	r0, [pc, #88]	; (8000304 <main+0x1b8>)
 80002ac:	f000 fe78 	bl	8000fa0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(OE_GPIO_Port, testPCB_Latch_Adrr[j], RESET);
 80002b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80002b8:	4413      	add	r3, r2
 80002ba:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80002be:	b29b      	uxth	r3, r3
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	480b      	ldr	r0, [pc, #44]	; (80002f4 <main+0x1a8>)
 80002c6:	f000 fe6b 	bl	8000fa0 <HAL_GPIO_WritePin>
		  for(int j = 0; j <5; j++){
 80002ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80002cc:	3301      	adds	r3, #1
 80002ce:	667b      	str	r3, [r7, #100]	; 0x64
 80002d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80002d2:	2b04      	cmp	r3, #4
 80002d4:	dd93      	ble.n	80001fe <main+0xb2>
	  for(int i = 0; i < 10; i++){
 80002d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80002d8:	3301      	adds	r3, #1
 80002da:	66bb      	str	r3, [r7, #104]	; 0x68
 80002dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80002de:	2b09      	cmp	r3, #9
 80002e0:	dd8a      	ble.n	80001f8 <main+0xac>
		  }



	  }
	  HAL_Delay(100);
 80002e2:	2064      	movs	r0, #100	; 0x64
 80002e4:	f000 fba6 	bl	8000a34 <HAL_Delay>
	  time += 1;
 80002e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80002ea:	3301      	adds	r3, #1
 80002ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  {
 80002ee:	e761      	b.n	80001b4 <main+0x68>
 80002f0:	20000084 	.word	0x20000084
 80002f4:	40010800 	.word	0x40010800
 80002f8:	08002f20 	.word	0x08002f20
 80002fc:	08002f48 	.word	0x08002f48
 8000300:	08002f5c 	.word	0x08002f5c
 8000304:	40010c00 	.word	0x40010c00

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b094      	sub	sp, #80	; 0x50
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f002 fdee 	bl	8002ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000338:	2309      	movs	r3, #9
 800033a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000340:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000346:	2301      	movs	r3, #1
 8000348:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034e:	2302      	movs	r3, #2
 8000350:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000356:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000358:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800035c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000362:	4618      	mov	r0, r3
 8000364:	f000 ff4c 	bl	8001200 <HAL_RCC_OscConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800036e:	f000 f9a9 	bl	80006c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	230f      	movs	r3, #15
 8000374:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000376:	2302      	movs	r3, #2
 8000378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000382:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f001 f9b6 	bl	8001700 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800039a:	f000 f993 	bl	80006c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800039e:	2311      	movs	r3, #17
 80003a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003a6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4618      	mov	r0, r3
 80003b0:	f001 fb40 	bl	8001a34 <HAL_RCCEx_PeriphCLKConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003ba:	f000 f983 	bl	80006c4 <Error_Handler>
  }
}
 80003be:	bf00      	nop
 80003c0:	3750      	adds	r7, #80	; 0x50
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2100      	movs	r1, #0
 80003d2:	460a      	mov	r2, r1
 80003d4:	801a      	strh	r2, [r3, #0]
 80003d6:	460a      	mov	r2, r1
 80003d8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80003da:	2300      	movs	r3, #0
 80003dc:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003de:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <MX_RTC_Init+0x8c>)
 80003e0:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <MX_RTC_Init+0x90>)
 80003e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_RTC_Init+0x8c>)
 80003e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_RTC_Init+0x8c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003f2:	4818      	ldr	r0, [pc, #96]	; (8000454 <MX_RTC_Init+0x8c>)
 80003f4:	f001 fc98 	bl	8001d28 <HAL_RTC_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80003fe:	f000 f961 	bl	80006c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2200      	movs	r2, #0
 8000412:	4619      	mov	r1, r3
 8000414:	480f      	ldr	r0, [pc, #60]	; (8000454 <MX_RTC_Init+0x8c>)
 8000416:	f001 fd1d 	bl	8001e54 <HAL_RTC_SetTime>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000420:	f000 f950 	bl	80006c4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000424:	2301      	movs	r3, #1
 8000426:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000428:	2301      	movs	r3, #1
 800042a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 800042c:	2301      	movs	r3, #1
 800042e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	4619      	mov	r1, r3
 800043a:	4806      	ldr	r0, [pc, #24]	; (8000454 <MX_RTC_Init+0x8c>)
 800043c:	f001 fda2 	bl	8001f84 <HAL_RTC_SetDate>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000446:	f000 f93d 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000070 	.word	0x20000070
 8000458:	40002800 	.word	0x40002800

0800045c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000462:	f107 0308 	add.w	r3, r7, #8
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000470:	463b      	mov	r3, r7
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000478:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <MX_TIM2_Init+0x94>)
 800047a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800047e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_TIM2_Init+0x94>)
 8000482:	2209      	movs	r2, #9
 8000484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <MX_TIM2_Init+0x94>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 360-1;
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_TIM2_Init+0x94>)
 800048e:	f240 1267 	movw	r2, #359	; 0x167
 8000492:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000494:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <MX_TIM2_Init+0x94>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_TIM2_Init+0x94>)
 800049c:	2280      	movs	r2, #128	; 0x80
 800049e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004a0:	4813      	ldr	r0, [pc, #76]	; (80004f0 <MX_TIM2_Init+0x94>)
 80004a2:	f001 ffcf 	bl	8002444 <HAL_TIM_Base_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004ac:	f000 f90a 	bl	80006c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4619      	mov	r1, r3
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <MX_TIM2_Init+0x94>)
 80004be:	f002 f96b 	bl	8002798 <HAL_TIM_ConfigClockSource>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004c8:	f000 f8fc 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004cc:	2300      	movs	r3, #0
 80004ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d4:	463b      	mov	r3, r7
 80004d6:	4619      	mov	r1, r3
 80004d8:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_TIM2_Init+0x94>)
 80004da:	f002 fb3d 	bl	8002b58 <HAL_TIMEx_MasterConfigSynchronization>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004e4:	f000 f8ee 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004e8:	bf00      	nop
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000084 	.word	0x20000084

080004f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <MX_USART1_UART_Init+0x4c>)
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <MX_USART1_UART_Init+0x50>)
 80004fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <MX_USART1_UART_Init+0x4c>)
 8000500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_USART1_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_USART1_UART_Init+0x4c>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_USART1_UART_Init+0x4c>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_USART1_UART_Init+0x4c>)
 800051a:	220c      	movs	r2, #12
 800051c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_USART1_UART_Init+0x4c>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_USART1_UART_Init+0x4c>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_USART1_UART_Init+0x4c>)
 800052c:	f002 fb84 	bl	8002c38 <HAL_UART_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000536:	f000 f8c5 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000002c 	.word	0x2000002c
 8000544:	40013800 	.word	0x40013800

08000548 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <MX_USB_PCD_Init+0x3c>)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <MX_USB_PCD_Init+0x40>)
 8000550:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_USB_PCD_Init+0x3c>)
 8000554:	2208      	movs	r2, #8
 8000556:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <MX_USB_PCD_Init+0x3c>)
 800055a:	2202      	movs	r2, #2
 800055c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_USB_PCD_Init+0x3c>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <MX_USB_PCD_Init+0x3c>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_USB_PCD_Init+0x3c>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_USB_PCD_Init+0x3c>)
 8000572:	f000 fd2d 	bl	8000fd0 <HAL_PCD_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800057c:	f000 f8a2 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200000cc 	.word	0x200000cc
 8000588:	40005c00 	.word	0x40005c00

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	4b39      	ldr	r3, [pc, #228]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a38      	ldr	r2, [pc, #224]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005a6:	f043 0310 	orr.w	r3, r3, #16
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b36      	ldr	r3, [pc, #216]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0310 	and.w	r3, r3, #16
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b8:	4b33      	ldr	r3, [pc, #204]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a32      	ldr	r2, [pc, #200]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005be:	f043 0320 	orr.w	r3, r3, #32
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b30      	ldr	r3, [pc, #192]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a2c      	ldr	r2, [pc, #176]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0304 	and.w	r3, r3, #4
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a26      	ldr	r2, [pc, #152]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005ee:	f043 0308 	orr.w	r3, r3, #8
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <MX_GPIO_Init+0xfc>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000606:	4821      	ldr	r0, [pc, #132]	; (800068c <MX_GPIO_Init+0x100>)
 8000608:	f000 fcca 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LATCH0_Pin|LATCH1_Pin|LATCH2_Pin|LATCH3_Pin
 800060c:	2200      	movs	r2, #0
 800060e:	f248 11ff 	movw	r1, #33279	; 0x81ff
 8000612:	481f      	ldr	r0, [pc, #124]	; (8000690 <MX_GPIO_Init+0x104>)
 8000614:	f000 fcc4 	bl	8000fa0 <HAL_GPIO_WritePin>
                          |LATCH4_Pin|OE_Pin|SW0_Pin|SW1_Pin
                          |SW2_Pin|SW3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB0_Pin|DB1_Pin|DB2_Pin|DB10_Pin
 8000618:	2200      	movs	r2, #0
 800061a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800061e:	481d      	ldr	r0, [pc, #116]	; (8000694 <MX_GPIO_Init+0x108>)
 8000620:	f000 fcbe 	bl	8000fa0 <HAL_GPIO_WritePin>
                          |DB11_Pin|DB12_Pin|DB13_Pin|DB14_Pin
                          |DB15_Pin|DB3_Pin|DB4_Pin|DB5_Pin
                          |DB6_Pin|DB7_Pin|DB8_Pin|DB9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2302      	movs	r3, #2
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	4619      	mov	r1, r3
 800063c:	4813      	ldr	r0, [pc, #76]	; (800068c <MX_GPIO_Init+0x100>)
 800063e:	f000 fb2b 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LATCH0_Pin LATCH1_Pin LATCH2_Pin LATCH3_Pin
                           LATCH4_Pin OE_Pin SW0_Pin SW1_Pin
                           SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = LATCH0_Pin|LATCH1_Pin|LATCH2_Pin|LATCH3_Pin
 8000642:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8000646:	613b      	str	r3, [r7, #16]
                          |LATCH4_Pin|OE_Pin|SW0_Pin|SW1_Pin
                          |SW2_Pin|SW3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2302      	movs	r3, #2
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4619      	mov	r1, r3
 800065a:	480d      	ldr	r0, [pc, #52]	; (8000690 <MX_GPIO_Init+0x104>)
 800065c:	f000 fb1c 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB0_Pin DB1_Pin DB2_Pin DB10_Pin
                           DB11_Pin DB12_Pin DB13_Pin DB14_Pin
                           DB15_Pin DB3_Pin DB4_Pin DB5_Pin
                           DB6_Pin DB7_Pin DB8_Pin DB9_Pin */
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB10_Pin
 8000660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000664:	613b      	str	r3, [r7, #16]
                          |DB11_Pin|DB12_Pin|DB13_Pin|DB14_Pin
                          |DB15_Pin|DB3_Pin|DB4_Pin|DB5_Pin
                          |DB6_Pin|DB7_Pin|DB8_Pin|DB9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	4806      	ldr	r0, [pc, #24]	; (8000694 <MX_GPIO_Init+0x108>)
 800067a:	f000 fb0d 	bl	8000c98 <HAL_GPIO_Init>

}
 800067e:	bf00      	nop
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	40011000 	.word	0x40011000
 8000690:	40010800 	.word	0x40010800
 8000694:	40010c00 	.word	0x40010c00

08000698 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006a8:	d105      	bne.n	80006b6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		++timer_Check;
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006b4:	701a      	strb	r2, [r3, #0]

	}


}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	20000028 	.word	0x20000028

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <HAL_MspInit+0x6c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <HAL_MspInit+0x6c>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_MspInit+0x6c>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <HAL_MspInit+0x6c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <HAL_MspInit+0x6c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <HAL_MspInit+0x6c>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2005      	movs	r0, #5
 800070c:	f000 fa8d 	bl	8000c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000710:	2005      	movs	r0, #5
 8000712:	f000 faa6 	bl	8000c62 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_MspInit+0x70>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <HAL_MspInit+0x70>)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000
 8000740:	40010000 	.word	0x40010000

08000744 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <HAL_RTC_MspInit+0x3c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d110      	bne.n	8000778 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000756:	f000 fd47 	bl	80011e8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_RTC_MspInit+0x40>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a09      	ldr	r2, [pc, #36]	; (8000784 <HAL_RTC_MspInit+0x40>)
 8000760:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <HAL_RTC_MspInit+0x40>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_RTC_MspInit+0x44>)
 8000774:	2201      	movs	r2, #1
 8000776:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40002800 	.word	0x40002800
 8000784:	40021000 	.word	0x40021000
 8000788:	4242043c 	.word	0x4242043c

0800078c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800079c:	d113      	bne.n	80007c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <HAL_TIM_Base_MspInit+0x44>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <HAL_TIM_Base_MspInit+0x44>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_TIM_Base_MspInit+0x44>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	201c      	movs	r0, #28
 80007bc:	f000 fa35 	bl	8000c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007c0:	201c      	movs	r0, #28
 80007c2:	f000 fa4e 	bl	8000c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <HAL_UART_MspInit+0x8c>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d131      	bne.n	8000858 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_UART_MspInit+0x90>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <HAL_UART_MspInit+0x90>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_UART_MspInit+0x90>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_UART_MspInit+0x90>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a14      	ldr	r2, [pc, #80]	; (8000864 <HAL_UART_MspInit+0x90>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_UART_MspInit+0x90>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin;
 8000824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000828:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	4619      	mov	r1, r3
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <HAL_UART_MspInit+0x94>)
 800083a:	f000 fa2d 	bl	8000c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_RX_Pin;
 800083e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4619      	mov	r1, r3
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <HAL_UART_MspInit+0x94>)
 8000854:	f000 fa20 	bl	8000c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40013800 	.word	0x40013800
 8000864:	40021000 	.word	0x40021000
 8000868:	40010800 	.word	0x40010800

0800086c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <HAL_PCD_MspInit+0x34>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d10b      	bne.n	8000896 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_PCD_MspInit+0x38>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_PCD_MspInit+0x38>)
 8000884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_PCD_MspInit+0x38>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40005c00 	.word	0x40005c00
 80008a4:	40021000 	.word	0x40021000

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ee:	f000 f885 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM2_IRQHandler+0x10>)
 800090a:	f001 fe3d 	bl	8002588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000084 	.word	0x20000084

08000918 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	; (800095c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	; (8000968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800094a:	f7ff ffe5 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094e:	f002 faaf 	bl	8002eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000952:	f7ff fbfb 	bl	800014c <main>
  bx lr
 8000956:	4770      	bx	lr
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000960:	08002fc4 	.word	0x08002fc4
  ldr r2, =_sbss
 8000964:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000968:	200003bc 	.word	0x200003bc

0800096c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_2_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x28>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x28>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f947 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	200f      	movs	r0, #15
 8000988:	f000 f808 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff fea0 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40022000 	.word	0x40022000

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x54>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x58>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f95f 	bl	8000c7e <HAL_SYSTICK_Config>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00e      	b.n	80009e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d80a      	bhi.n	80009e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009d8:	f000 f927 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_InitTick+0x5c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x1c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_IncTick+0x20>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_IncTick+0x20>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	200003b8 	.word	0x200003b8

08000a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <HAL_GetTick+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	200003b8 	.word	0x200003b8

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff fff0 	bl	8000a20 <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffe0 	bl	8000a20 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4906      	ldr	r1, [pc, #24]	; (8000b14 <__NVIC_EnableIRQ+0x34>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f7ff ff90 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff2d 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff42 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff90 	bl	8000b6c <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5f 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff35 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffa2 	bl	8000bd0 <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b08b      	sub	sp, #44	; 0x2c
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000caa:	e169      	b.n	8000f80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cac:	2201      	movs	r2, #1
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	f040 8158 	bne.w	8000f7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	4a9a      	ldr	r2, [pc, #616]	; (8000f38 <HAL_GPIO_Init+0x2a0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d05e      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
 8000cd4:	4a98      	ldr	r2, [pc, #608]	; (8000f38 <HAL_GPIO_Init+0x2a0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d875      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000cda:	4a98      	ldr	r2, [pc, #608]	; (8000f3c <HAL_GPIO_Init+0x2a4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d058      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
 8000ce0:	4a96      	ldr	r2, [pc, #600]	; (8000f3c <HAL_GPIO_Init+0x2a4>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d86f      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000ce6:	4a96      	ldr	r2, [pc, #600]	; (8000f40 <HAL_GPIO_Init+0x2a8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d052      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
 8000cec:	4a94      	ldr	r2, [pc, #592]	; (8000f40 <HAL_GPIO_Init+0x2a8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d869      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000cf2:	4a94      	ldr	r2, [pc, #592]	; (8000f44 <HAL_GPIO_Init+0x2ac>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d04c      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
 8000cf8:	4a92      	ldr	r2, [pc, #584]	; (8000f44 <HAL_GPIO_Init+0x2ac>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d863      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000cfe:	4a92      	ldr	r2, [pc, #584]	; (8000f48 <HAL_GPIO_Init+0x2b0>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d046      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
 8000d04:	4a90      	ldr	r2, [pc, #576]	; (8000f48 <HAL_GPIO_Init+0x2b0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d85d      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000d0a:	2b12      	cmp	r3, #18
 8000d0c:	d82a      	bhi.n	8000d64 <HAL_GPIO_Init+0xcc>
 8000d0e:	2b12      	cmp	r3, #18
 8000d10:	d859      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000d12:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <HAL_GPIO_Init+0x80>)
 8000d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d18:	08000d93 	.word	0x08000d93
 8000d1c:	08000d6d 	.word	0x08000d6d
 8000d20:	08000d7f 	.word	0x08000d7f
 8000d24:	08000dc1 	.word	0x08000dc1
 8000d28:	08000dc7 	.word	0x08000dc7
 8000d2c:	08000dc7 	.word	0x08000dc7
 8000d30:	08000dc7 	.word	0x08000dc7
 8000d34:	08000dc7 	.word	0x08000dc7
 8000d38:	08000dc7 	.word	0x08000dc7
 8000d3c:	08000dc7 	.word	0x08000dc7
 8000d40:	08000dc7 	.word	0x08000dc7
 8000d44:	08000dc7 	.word	0x08000dc7
 8000d48:	08000dc7 	.word	0x08000dc7
 8000d4c:	08000dc7 	.word	0x08000dc7
 8000d50:	08000dc7 	.word	0x08000dc7
 8000d54:	08000dc7 	.word	0x08000dc7
 8000d58:	08000dc7 	.word	0x08000dc7
 8000d5c:	08000d75 	.word	0x08000d75
 8000d60:	08000d89 	.word	0x08000d89
 8000d64:	4a79      	ldr	r2, [pc, #484]	; (8000f4c <HAL_GPIO_Init+0x2b4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d013      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d6a:	e02c      	b.n	8000dc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	623b      	str	r3, [r7, #32]
          break;
 8000d72:	e029      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	623b      	str	r3, [r7, #32]
          break;
 8000d7c:	e024      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	3308      	adds	r3, #8
 8000d84:	623b      	str	r3, [r7, #32]
          break;
 8000d86:	e01f      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	330c      	adds	r3, #12
 8000d8e:	623b      	str	r3, [r7, #32]
          break;
 8000d90:	e01a      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	623b      	str	r3, [r7, #32]
          break;
 8000d9e:	e013      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d105      	bne.n	8000db4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da8:	2308      	movs	r3, #8
 8000daa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69fa      	ldr	r2, [r7, #28]
 8000db0:	611a      	str	r2, [r3, #16]
          break;
 8000db2:	e009      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000db4:	2308      	movs	r3, #8
 8000db6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69fa      	ldr	r2, [r7, #28]
 8000dbc:	615a      	str	r2, [r3, #20]
          break;
 8000dbe:	e003      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
          break;
 8000dc4:	e000      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          break;
 8000dc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2bff      	cmp	r3, #255	; 0xff
 8000dcc:	d801      	bhi.n	8000dd2 <HAL_GPIO_Init+0x13a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	e001      	b.n	8000dd6 <HAL_GPIO_Init+0x13e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2bff      	cmp	r3, #255	; 0xff
 8000ddc:	d802      	bhi.n	8000de4 <HAL_GPIO_Init+0x14c>
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	e002      	b.n	8000dea <HAL_GPIO_Init+0x152>
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	3b08      	subs	r3, #8
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	210f      	movs	r1, #15
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	6a39      	ldr	r1, [r7, #32]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	431a      	orrs	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e18:	4b4d      	ldr	r3, [pc, #308]	; (8000f50 <HAL_GPIO_Init+0x2b8>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a4c      	ldr	r2, [pc, #304]	; (8000f50 <HAL_GPIO_Init+0x2b8>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b4a      	ldr	r3, [pc, #296]	; (8000f50 <HAL_GPIO_Init+0x2b8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_GPIO_Init+0x2bc>)
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3302      	adds	r3, #2
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	220f      	movs	r2, #15
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a40      	ldr	r2, [pc, #256]	; (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d013      	beq.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a3f      	ldr	r2, [pc, #252]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d00d      	beq.n	8000e80 <HAL_GPIO_Init+0x1e8>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a3e      	ldr	r2, [pc, #248]	; (8000f60 <HAL_GPIO_Init+0x2c8>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d007      	beq.n	8000e7c <HAL_GPIO_Init+0x1e4>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a3d      	ldr	r2, [pc, #244]	; (8000f64 <HAL_GPIO_Init+0x2cc>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d101      	bne.n	8000e78 <HAL_GPIO_Init+0x1e0>
 8000e74:	2303      	movs	r3, #3
 8000e76:	e006      	b.n	8000e86 <HAL_GPIO_Init+0x1ee>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e004      	b.n	8000e86 <HAL_GPIO_Init+0x1ee>
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e002      	b.n	8000e86 <HAL_GPIO_Init+0x1ee>
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <HAL_GPIO_Init+0x1ee>
 8000e84:	2300      	movs	r3, #0
 8000e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e88:	f002 0203 	and.w	r2, r2, #3
 8000e8c:	0092      	lsls	r2, r2, #2
 8000e8e:	4093      	lsls	r3, r2
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e96:	492f      	ldr	r1, [pc, #188]	; (8000f54 <HAL_GPIO_Init+0x2bc>)
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	492c      	ldr	r1, [pc, #176]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4928      	ldr	r1, [pc, #160]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	4922      	ldr	r1, [pc, #136]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	491e      	ldr	r1, [pc, #120]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	4918      	ldr	r1, [pc, #96]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	608b      	str	r3, [r1, #8]
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	4914      	ldr	r1, [pc, #80]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d021      	beq.n	8000f6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	490e      	ldr	r1, [pc, #56]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	60cb      	str	r3, [r1, #12]
 8000f34:	e021      	b.n	8000f7a <HAL_GPIO_Init+0x2e2>
 8000f36:	bf00      	nop
 8000f38:	10320000 	.word	0x10320000
 8000f3c:	10310000 	.word	0x10310000
 8000f40:	10220000 	.word	0x10220000
 8000f44:	10210000 	.word	0x10210000
 8000f48:	10120000 	.word	0x10120000
 8000f4c:	10110000 	.word	0x10110000
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010000 	.word	0x40010000
 8000f58:	40010800 	.word	0x40010800
 8000f5c:	40010c00 	.word	0x40010c00
 8000f60:	40011000 	.word	0x40011000
 8000f64:	40011400 	.word	0x40011400
 8000f68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	4909      	ldr	r1, [pc, #36]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f47f ae8e 	bne.w	8000cac <HAL_GPIO_Init+0x14>
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	372c      	adds	r7, #44	; 0x2c
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fbc:	e003      	b.n	8000fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	611a      	str	r2, [r3, #16]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	b08b      	sub	sp, #44	; 0x2c
 8000fd4:	af06      	add	r7, sp, #24
 8000fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0fd      	b.n	80011de <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d106      	bne.n	8000ffc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fc38 	bl	800086c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2203      	movs	r2, #3
 8001000:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f001 ff01 	bl	8002e10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	687e      	ldr	r6, [r7, #4]
 8001016:	466d      	mov	r5, sp
 8001018:	f106 0410 	add.w	r4, r6, #16
 800101c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	602b      	str	r3, [r5, #0]
 8001024:	1d33      	adds	r3, r6, #4
 8001026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001028:	6838      	ldr	r0, [r7, #0]
 800102a:	f001 fee1 	bl	8002df0 <USB_CoreInit>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2202      	movs	r2, #2
 8001038:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e0ce      	b.n	80011de <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fefc 	bl	8002e44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e04c      	b.n	80010ec <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	440b      	add	r3, r1
 8001062:	3301      	adds	r3, #1
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	440b      	add	r3, r1
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	b298      	uxth	r0, r3
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	440b      	add	r3, r1
 800108e:	3336      	adds	r3, #54	; 0x36
 8001090:	4602      	mov	r2, r0
 8001092:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	3303      	adds	r3, #3
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	3338      	adds	r3, #56	; 0x38
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	440b      	add	r3, r1
 80010cc:	333c      	adds	r3, #60	; 0x3c
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	3340      	adds	r3, #64	; 0x40
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	3301      	adds	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ad      	bcc.n	8001052 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e044      	b.n	8001186 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	440b      	add	r3, r1
 800110a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	440b      	add	r3, r1
 8001136:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	440b      	add	r3, r1
 8001162:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	3301      	adds	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	d3b5      	bcc.n	80010fc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	687e      	ldr	r6, [r7, #4]
 8001198:	466d      	mov	r5, sp
 800119a:	f106 0410 	add.w	r4, r6, #16
 800119e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	602b      	str	r3, [r5, #0]
 80011a6:	1d33      	adds	r3, r6, #4
 80011a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f001 fe56 	bl	8002e5c <USB_DevInit>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2202      	movs	r2, #2
 80011ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00d      	b.n	80011de <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 fe60 	bl	8002e9c <USB_DevDisconnect>

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080011e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_PWR_EnableBkUpAccess+0x14>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	420e0020 	.word	0x420e0020

08001200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e26c      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8087 	beq.w	800132e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001220:	4b92      	ldr	r3, [pc, #584]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 030c 	and.w	r3, r3, #12
 8001228:	2b04      	cmp	r3, #4
 800122a:	d00c      	beq.n	8001246 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800122c:	4b8f      	ldr	r3, [pc, #572]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b08      	cmp	r3, #8
 8001236:	d112      	bne.n	800125e <HAL_RCC_OscConfig+0x5e>
 8001238:	4b8c      	ldr	r3, [pc, #560]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001244:	d10b      	bne.n	800125e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001246:	4b89      	ldr	r3, [pc, #548]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d06c      	beq.n	800132c <HAL_RCC_OscConfig+0x12c>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d168      	bne.n	800132c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e246      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001266:	d106      	bne.n	8001276 <HAL_RCC_OscConfig+0x76>
 8001268:	4b80      	ldr	r3, [pc, #512]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a7f      	ldr	r2, [pc, #508]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800126e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	e02e      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x98>
 800127e:	4b7b      	ldr	r3, [pc, #492]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a7a      	ldr	r2, [pc, #488]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b78      	ldr	r3, [pc, #480]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a77      	ldr	r2, [pc, #476]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e01d      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0xbc>
 80012a2:	4b72      	ldr	r3, [pc, #456]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a71      	ldr	r2, [pc, #452]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b6f      	ldr	r3, [pc, #444]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6e      	ldr	r2, [pc, #440]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e00b      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 80012bc:	4b6b      	ldr	r3, [pc, #428]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a6a      	ldr	r2, [pc, #424]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b68      	ldr	r3, [pc, #416]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a67      	ldr	r2, [pc, #412]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d013      	beq.n	8001304 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fba0 	bl	8000a20 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fb9c 	bl	8000a20 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e1fa      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b5d      	ldr	r3, [pc, #372]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0xe4>
 8001302:	e014      	b.n	800132e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fb8c 	bl	8000a20 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fb88 	bl	8000a20 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1e6      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	4b53      	ldr	r3, [pc, #332]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x10c>
 800132a:	e000      	b.n	800132e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d063      	beq.n	8001402 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133a:	4b4c      	ldr	r3, [pc, #304]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001346:	4b49      	ldr	r3, [pc, #292]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b08      	cmp	r3, #8
 8001350:	d11c      	bne.n	800138c <HAL_RCC_OscConfig+0x18c>
 8001352:	4b46      	ldr	r3, [pc, #280]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d116      	bne.n	800138c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135e:	4b43      	ldr	r3, [pc, #268]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_RCC_OscConfig+0x176>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d001      	beq.n	8001376 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e1ba      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4939      	ldr	r1, [pc, #228]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	e03a      	b.n	8001402 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001394:	4b36      	ldr	r3, [pc, #216]	; (8001470 <HAL_RCC_OscConfig+0x270>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fb41 	bl	8000a20 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fb3d 	bl	8000a20 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e19b      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c0:	4b2a      	ldr	r3, [pc, #168]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4927      	ldr	r1, [pc, #156]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
 80013d4:	e015      	b.n	8001402 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_RCC_OscConfig+0x270>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fb20 	bl	8000a20 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e4:	f7ff fb1c 	bl	8000a20 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e17a      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d03a      	beq.n	8001484 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d019      	beq.n	800144a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_RCC_OscConfig+0x274>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff fb00 	bl	8000a20 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fafc 	bl	8000a20 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e15a      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f000 fad8 	bl	80019f8 <RCC_Delay>
 8001448:	e01c      	b.n	8001484 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_RCC_OscConfig+0x274>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001450:	f7ff fae6 	bl	8000a20 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001456:	e00f      	b.n	8001478 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff fae2 	bl	8000a20 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d908      	bls.n	8001478 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e140      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	42420000 	.word	0x42420000
 8001474:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	4b9e      	ldr	r3, [pc, #632]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1e9      	bne.n	8001458 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80a6 	beq.w	80015de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001496:	4b97      	ldr	r3, [pc, #604]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10d      	bne.n	80014be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b94      	ldr	r3, [pc, #592]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a93      	ldr	r2, [pc, #588]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b91      	ldr	r3, [pc, #580]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ba:	2301      	movs	r3, #1
 80014bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014be:	4b8e      	ldr	r3, [pc, #568]	; (80016f8 <HAL_RCC_OscConfig+0x4f8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d118      	bne.n	80014fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ca:	4b8b      	ldr	r3, [pc, #556]	; (80016f8 <HAL_RCC_OscConfig+0x4f8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a8a      	ldr	r2, [pc, #552]	; (80016f8 <HAL_RCC_OscConfig+0x4f8>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d6:	f7ff faa3 	bl	8000a20 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014de:	f7ff fa9f 	bl	8000a20 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b64      	cmp	r3, #100	; 0x64
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e0fd      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x312>
 8001504:	4b7b      	ldr	r3, [pc, #492]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4a7a      	ldr	r2, [pc, #488]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6213      	str	r3, [r2, #32]
 8001510:	e02d      	b.n	800156e <HAL_RCC_OscConfig+0x36e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x334>
 800151a:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4a75      	ldr	r2, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	6213      	str	r3, [r2, #32]
 8001526:	4b73      	ldr	r3, [pc, #460]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a72      	ldr	r2, [pc, #456]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800152c:	f023 0304 	bic.w	r3, r3, #4
 8001530:	6213      	str	r3, [r2, #32]
 8001532:	e01c      	b.n	800156e <HAL_RCC_OscConfig+0x36e>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b05      	cmp	r3, #5
 800153a:	d10c      	bne.n	8001556 <HAL_RCC_OscConfig+0x356>
 800153c:	4b6d      	ldr	r3, [pc, #436]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4a6c      	ldr	r2, [pc, #432]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6213      	str	r3, [r2, #32]
 8001548:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a69      	ldr	r2, [pc, #420]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	e00b      	b.n	800156e <HAL_RCC_OscConfig+0x36e>
 8001556:	4b67      	ldr	r3, [pc, #412]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4a66      	ldr	r2, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6213      	str	r3, [r2, #32]
 8001562:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a63      	ldr	r2, [pc, #396]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d015      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7ff fa53 	bl	8000a20 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff fa4f 	bl	8000a20 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0ab      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ee      	beq.n	800157e <HAL_RCC_OscConfig+0x37e>
 80015a0:	e014      	b.n	80015cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fa3d 	bl	8000a20 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff fa39 	bl	8000a20 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e095      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ee      	bne.n	80015aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d105      	bne.n	80015de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d2:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a47      	ldr	r2, [pc, #284]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8081 	beq.w	80016ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e8:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d061      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d146      	bne.n	800168a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fc:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <HAL_RCC_OscConfig+0x4fc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fa0d 	bl	8000a20 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fa09 	bl	8000a20 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e067      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001630:	d108      	bne.n	8001644 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	492d      	ldr	r1, [pc, #180]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a19      	ldr	r1, [r3, #32]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	430b      	orrs	r3, r1
 8001656:	4927      	ldr	r1, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x4fc>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff f9dd 	bl	8000a20 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff f9d9 	bl	8000a20 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e037      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x46a>
 8001688:	e02f      	b.n	80016ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_RCC_OscConfig+0x4fc>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff f9c6 	bl	8000a20 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff f9c2 	bl	8000a20 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e020      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x498>
 80016b6:	e018      	b.n	80016ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e013      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40007000 	.word	0x40007000
 80016fc:	42420060 	.word	0x42420060

08001700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0d0      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001714:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d910      	bls.n	8001744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 0207 	bic.w	r2, r3, #7
 800172a:	4965      	ldr	r1, [pc, #404]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0b8      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001766:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800177e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001780:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	494d      	ldr	r1, [pc, #308]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	4313      	orrs	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d040      	beq.n	8001820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d115      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e07f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e073      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ce:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06b      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017de:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f023 0203 	bic.w	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4936      	ldr	r1, [pc, #216]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f0:	f7ff f916 	bl	8000a20 <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	e00a      	b.n	800180e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f8:	f7ff f912 	bl	8000a20 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e053      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 020c 	and.w	r2, r3, #12
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	429a      	cmp	r2, r3
 800181e:	d1eb      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d210      	bcs.n	8001850 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 0207 	bic.w	r2, r3, #7
 8001836:	4922      	ldr	r1, [pc, #136]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e032      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4916      	ldr	r1, [pc, #88]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	490e      	ldr	r1, [pc, #56]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800188e:	f000 f821 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 8001892:	4602      	mov	r2, r0
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	490a      	ldr	r1, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RCC_ClockConfig+0x1cc>)
 80018a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1d0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f874 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40022000 	.word	0x40022000
 80018c4:	40021000 	.word	0x40021000
 80018c8:	08002fa4 	.word	0x08002fa4
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d4:	b490      	push	{r4, r7}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018da:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018dc:	1d3c      	adds	r4, r7, #4
 80018de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018e4:	f240 2301 	movw	r3, #513	; 0x201
 80018e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b04      	cmp	r3, #4
 800190c:	d002      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x40>
 800190e:	2b08      	cmp	r3, #8
 8001910:	d003      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x46>
 8001912:	e02d      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001916:	623b      	str	r3, [r7, #32]
      break;
 8001918:	e02d      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	0c9b      	lsrs	r3, r3, #18
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001926:	4413      	add	r3, r2
 8001928:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800192c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <HAL_RCC_GetSysClockFreq+0xb4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0c5b      	lsrs	r3, r3, #17
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001946:	4413      	add	r3, r2
 8001948:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800194c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	4a0e      	ldr	r2, [pc, #56]	; (800198c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001952:	fb02 f203 	mul.w	r2, r2, r3
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	e004      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	623b      	str	r3, [r7, #32]
      break;
 800196e:	e002      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001972:	623b      	str	r3, [r7, #32]
      break;
 8001974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001976:	6a3b      	ldr	r3, [r7, #32]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bc90      	pop	{r4, r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	08002f84 	.word	0x08002f84
 8001988:	40021000 	.word	0x40021000
 800198c:	007a1200 	.word	0x007a1200
 8001990:	003d0900 	.word	0x003d0900

08001994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001998:	4b02      	ldr	r3, [pc, #8]	; (80019a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	20000000 	.word	0x20000000

080019a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019ac:	f7ff fff2 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4903      	ldr	r1, [pc, #12]	; (80019cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	08002fb4 	.word	0x08002fb4

080019d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019d4:	f7ff ffde 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	0adb      	lsrs	r3, r3, #11
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4903      	ldr	r1, [pc, #12]	; (80019f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	08002fb4 	.word	0x08002fb4

080019f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <RCC_Delay+0x34>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <RCC_Delay+0x38>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0a5b      	lsrs	r3, r3, #9
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a14:	bf00      	nop
  }
  while (Delay --);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1e5a      	subs	r2, r3, #1
 8001a1a:	60fa      	str	r2, [r7, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f9      	bne.n	8001a14 <RCC_Delay+0x1c>
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d07d      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a54:	4b4f      	ldr	r3, [pc, #316]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10d      	bne.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	4a4b      	ldr	r2, [pc, #300]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	61d3      	str	r3, [r2, #28]
 8001a6c:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d118      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a88:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a42      	ldr	r2, [pc, #264]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a94:	f7fe ffc4 	bl	8000a20 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	e008      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9c:	f7fe ffc0 	bl	8000a20 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e06d      	b.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aba:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d02e      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d027      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ae0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001aee:	4a29      	ldr	r2, [pc, #164]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d014      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7fe ff8f 	bl	8000a20 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7fe ff8b 	bl	8000a20 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e036      	b.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ee      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4917      	ldr	r1, [pc, #92]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	490b      	ldr	r1, [pc, #44]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	4904      	ldr	r1, [pc, #16]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	42420440 	.word	0x42420440

08001ba0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b08d      	sub	sp, #52	; 0x34
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ba8:	4b5a      	ldr	r3, [pc, #360]	; (8001d14 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001baa:	f107 040c 	add.w	r4, r7, #12
 8001bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bb4:	f240 2301 	movw	r3, #513	; 0x201
 8001bb8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	d00a      	beq.n	8001bea <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	f200 8091 	bhi.w	8001cfe <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d04c      	beq.n	8001c7c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d07c      	beq.n	8001ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001be8:	e089      	b.n	8001cfe <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001bea:	4b4b      	ldr	r3, [pc, #300]	; (8001d18 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001bf0:	4b49      	ldr	r3, [pc, #292]	; (8001d18 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8082 	beq.w	8001d02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	0c9b      	lsrs	r3, r3, #18
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c10:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d018      	beq.n	8001c4e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c1c:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	0c5b      	lsrs	r3, r3, #17
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00d      	beq.n	8001c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001c3c:	4a37      	ldr	r2, [pc, #220]	; (8001d1c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4c:	e004      	b.n	8001c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	4a33      	ldr	r2, [pc, #204]	; (8001d20 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001c58:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c64:	d102      	bne.n	8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001c6a:	e04a      	b.n	8001d02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4a2c      	ldr	r2, [pc, #176]	; (8001d24 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	085b      	lsrs	r3, r3, #1
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001c7a:	e042      	b.n	8001d02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001c7c:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c8c:	d108      	bne.n	8001ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c9e:	e01f      	b.n	8001ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001caa:	d109      	bne.n	8001cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001cb8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cbe:	e00f      	b.n	8001ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cca:	d11c      	bne.n	8001d06 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d016      	beq.n	8001d06 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001cd8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001cde:	e012      	b.n	8001d06 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001ce0:	e011      	b.n	8001d06 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001ce2:	f7ff fe75 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	0b9b      	lsrs	r3, r3, #14
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001cfc:	e004      	b.n	8001d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001cfe:	bf00      	nop
 8001d00:	e002      	b.n	8001d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001d02:	bf00      	nop
 8001d04:	e000      	b.n	8001d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001d06:	bf00      	nop
    }
  }
  return (frequency);
 8001d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3734      	adds	r7, #52	; 0x34
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd90      	pop	{r4, r7, pc}
 8001d12:	bf00      	nop
 8001d14:	08002f94 	.word	0x08002f94
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	007a1200 	.word	0x007a1200
 8001d20:	003d0900 	.word	0x003d0900
 8001d24:	aaaaaaab 	.word	0xaaaaaaab

08001d28 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e084      	b.n	8001e48 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7c5b      	ldrb	r3, [r3, #17]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fcf8 	bl	8000744 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f9c8 	bl	80020f0 <HAL_RTC_WaitForSynchro>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d004      	beq.n	8001d70 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e06b      	b.n	8001e48 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 fa81 	bl	8002278 <RTC_EnterInitMode>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e060      	b.n	8001e48 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0207 	bic.w	r2, r2, #7
 8001d94:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <HAL_RTC_Init+0x128>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a2b      	ldr	r2, [pc, #172]	; (8001e50 <HAL_RTC_Init+0x128>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_RTC_Init+0x128>)
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4926      	ldr	r1, [pc, #152]	; (8001e50 <HAL_RTC_Init+0x128>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc4:	d003      	beq.n	8001dce <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e00e      	b.n	8001dec <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff fee6 	bl	8001ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001dd4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d104      	bne.n	8001de6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2204      	movs	r2, #4
 8001de0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e030      	b.n	8001e48 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f023 010f 	bic.w	r1, r3, #15
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0c1a      	lsrs	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	b291      	uxth	r1, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fa55 	bl	80022c8 <RTC_ExitInitMode>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2204      	movs	r2, #4
 8001e28:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00c      	b.n	8001e48 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001e46:	2300      	movs	r3, #0
  }
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40006c00 	.word	0x40006c00

08001e54 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_RTC_SetTime+0x20>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e080      	b.n	8001f7a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	7c1b      	ldrb	r3, [r3, #16]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_RTC_SetTime+0x30>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e07a      	b.n	8001f7a <HAL_RTC_SetTime+0x126>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d113      	bne.n	8001ebe <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001ea0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	460b      	mov	r3, r1
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a5b      	subs	r3, r3, r1
 8001eb0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001eb2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001eb8:	4413      	add	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	e01e      	b.n	8001efc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fa28 	bl	8002318 <RTC_Bcd2ToByte>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001ed0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	785b      	ldrb	r3, [r3, #1]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fa1d 	bl	8002318 <RTC_Bcd2ToByte>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001eea:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	789b      	ldrb	r3, [r3, #2]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fa11 	bl	8002318 <RTC_Bcd2ToByte>
 8001ef6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ef8:	4423      	add	r3, r4
 8001efa:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001efc:	6979      	ldr	r1, [r7, #20]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f953 	bl	80021aa <RTC_WriteTimeCounter>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e02f      	b.n	8001f7a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0205 	bic.w	r2, r2, #5
 8001f28:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f964 	bl	80021f8 <RTC_ReadAlarmCounter>
 8001f30:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f38:	d018      	beq.n	8001f6c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d214      	bcs.n	8001f6c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001f48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f4c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001f4e:	6939      	ldr	r1, [r7, #16]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f96a 	bl	800222a <RTC_WriteAlarmCounter>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2204      	movs	r2, #4
 8001f60:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e006      	b.n	8001f7a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001f78:	2300      	movs	r3, #0
  }
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd90      	pop	{r4, r7, pc}
	...

08001f84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_RTC_SetDate+0x24>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e097      	b.n	80020dc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	7c1b      	ldrb	r3, [r3, #16]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RTC_SetDate+0x34>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e091      	b.n	80020dc <HAL_RTC_SetDate+0x158>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	78da      	ldrb	r2, [r3, #3]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	785a      	ldrb	r2, [r3, #1]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	789a      	ldrb	r2, [r3, #2]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	739a      	strb	r2, [r3, #14]
 8001fe2:	e01a      	b.n	800201a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	78db      	ldrb	r3, [r3, #3]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f995 	bl	8002318 <RTC_Bcd2ToByte>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f98c 	bl	8002318 <RTC_Bcd2ToByte>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	789b      	ldrb	r3, [r3, #2]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f983 	bl	8002318 <RTC_Bcd2ToByte>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	7bdb      	ldrb	r3, [r3, #15]
 800201e:	4618      	mov	r0, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	7b59      	ldrb	r1, [r3, #13]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	7b9b      	ldrb	r3, [r3, #14]
 8002028:	461a      	mov	r2, r3
 800202a:	f000 f993 	bl	8002354 <RTC_WeekDayNum>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	7b1a      	ldrb	r2, [r3, #12]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f883 	bl	800214a <RTC_ReadTimeCounter>
 8002044:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <HAL_RTC_SetDate+0x160>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	0adb      	lsrs	r3, r3, #11
 8002050:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b18      	cmp	r3, #24
 8002056:	d93a      	bls.n	80020ce <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <HAL_RTC_SetDate+0x164>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	4a22      	ldr	r2, [pc, #136]	; (80020ec <HAL_RTC_SetDate+0x168>)
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800206e:	69f9      	ldr	r1, [r7, #28]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f89a 	bl	80021aa <RTC_WriteTimeCounter>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2204      	movs	r2, #4
 8002080:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e027      	b.n	80020dc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f8b3 	bl	80021f8 <RTC_ReadAlarmCounter>
 8002092:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800209a:	d018      	beq.n	80020ce <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d214      	bcs.n	80020ce <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80020aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80020ae:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80020b0:	69b9      	ldr	r1, [r7, #24]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f8b9 	bl	800222a <RTC_WriteAlarmCounter>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2204      	movs	r2, #4
 80020c2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e006      	b.n	80020dc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3720      	adds	r7, #32
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	91a2b3c5 	.word	0x91a2b3c5
 80020e8:	aaaaaaab 	.word	0xaaaaaaab
 80020ec:	00015180 	.word	0x00015180

080020f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e01d      	b.n	8002142 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0208 	bic.w	r2, r2, #8
 8002114:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002116:	f7fe fc83 	bl	8000a20 <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800211c:	e009      	b.n	8002132 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800211e:	f7fe fc7f 	bl	8000a20 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800212c:	d901      	bls.n	8002132 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e007      	b.n	8002142 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ee      	beq.n	800211e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800214a:	b480      	push	{r7}
 800214c:	b087      	sub	sp, #28
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	827b      	strh	r3, [r7, #18]
 8002156:	2300      	movs	r3, #0
 8002158:	823b      	strh	r3, [r7, #16]
 800215a:	2300      	movs	r3, #0
 800215c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800217a:	8a7a      	ldrh	r2, [r7, #18]
 800217c:	8a3b      	ldrh	r3, [r7, #16]
 800217e:	429a      	cmp	r2, r3
 8002180:	d008      	beq.n	8002194 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002182:	8a3b      	ldrh	r3, [r7, #16]
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	b29b      	uxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e004      	b.n	800219e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002194:	8a7b      	ldrh	r3, [r7, #18]
 8002196:	041a      	lsls	r2, r3, #16
 8002198:	89fb      	ldrh	r3, [r7, #14]
 800219a:	4313      	orrs	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800219e:	697b      	ldr	r3, [r7, #20]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f85d 	bl	8002278 <RTC_EnterInitMode>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e011      	b.n	80021ee <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	0c12      	lsrs	r2, r2, #16
 80021d2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	b292      	uxth	r2, r2
 80021dc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f872 	bl	80022c8 <RTC_ExitInitMode>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	81fb      	strh	r3, [r7, #14]
 8002204:	2300      	movs	r3, #0
 8002206:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002218:	89fb      	ldrh	r3, [r7, #14]
 800221a:	041a      	lsls	r2, r3, #16
 800221c:	89bb      	ldrh	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f81d 	bl	8002278 <RTC_EnterInitMode>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
 8002248:	e011      	b.n	800226e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	0c12      	lsrs	r2, r2, #16
 8002252:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	b292      	uxth	r2, r2
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f832 	bl	80022c8 <RTC_ExitInitMode>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002284:	f7fe fbcc 	bl	8000a20 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800228a:	e009      	b.n	80022a0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800228c:	f7fe fbc8 	bl	8000a20 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800229a:	d901      	bls.n	80022a0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e00f      	b.n	80022c0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0ee      	beq.n	800228c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0210 	orr.w	r2, r2, #16
 80022bc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0210 	bic.w	r2, r2, #16
 80022e2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80022e4:	f7fe fb9c 	bl	8000a20 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80022ea:	e009      	b.n	8002300 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80022ec:	f7fe fb98 	bl	8000a20 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022fa:	d901      	bls.n	8002300 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e007      	b.n	8002310 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0ee      	beq.n	80022ec <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	4413      	add	r3, r2
 8002346:	b2db      	uxtb	r3, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
	...

08002354 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
 8002360:	4613      	mov	r3, r2
 8002362:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002372:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d82d      	bhi.n	80023d6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	4a2c      	ldr	r2, [pc, #176]	; (8002438 <RTC_WeekDayNum+0xe4>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	085a      	lsrs	r2, r3, #1
 800238e:	78bb      	ldrb	r3, [r7, #2]
 8002390:	441a      	add	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	441a      	add	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	3b01      	subs	r3, #1
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	4926      	ldr	r1, [pc, #152]	; (800243c <RTC_WeekDayNum+0xe8>)
 80023a4:	fba1 1303 	umull	r1, r3, r1, r3
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	1ad2      	subs	r2, r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	4922      	ldr	r1, [pc, #136]	; (800243c <RTC_WeekDayNum+0xe8>)
 80023b2:	fba1 1303 	umull	r1, r3, r1, r3
 80023b6:	09db      	lsrs	r3, r3, #7
 80023b8:	4413      	add	r3, r2
 80023ba:	1d1a      	adds	r2, r3, #4
 80023bc:	4b20      	ldr	r3, [pc, #128]	; (8002440 <RTC_WeekDayNum+0xec>)
 80023be:	fba3 1302 	umull	r1, r3, r3, r2
 80023c2:	1ad1      	subs	r1, r2, r3
 80023c4:	0849      	lsrs	r1, r1, #1
 80023c6:	440b      	add	r3, r1
 80023c8:	0899      	lsrs	r1, r3, #2
 80023ca:	460b      	mov	r3, r1
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	1a5b      	subs	r3, r3, r1
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e029      	b.n	800242a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	4a15      	ldr	r2, [pc, #84]	; (8002438 <RTC_WeekDayNum+0xe4>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	085a      	lsrs	r2, r3, #1
 80023ea:	78bb      	ldrb	r3, [r7, #2]
 80023ec:	441a      	add	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	441a      	add	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	441a      	add	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4910      	ldr	r1, [pc, #64]	; (800243c <RTC_WeekDayNum+0xe8>)
 80023fc:	fba1 1303 	umull	r1, r3, r1, r3
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	1ad2      	subs	r2, r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	490d      	ldr	r1, [pc, #52]	; (800243c <RTC_WeekDayNum+0xe8>)
 8002408:	fba1 1303 	umull	r1, r3, r1, r3
 800240c:	09db      	lsrs	r3, r3, #7
 800240e:	4413      	add	r3, r2
 8002410:	1c9a      	adds	r2, r3, #2
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <RTC_WeekDayNum+0xec>)
 8002414:	fba3 1302 	umull	r1, r3, r3, r2
 8002418:	1ad1      	subs	r1, r2, r3
 800241a:	0849      	lsrs	r1, r1, #1
 800241c:	440b      	add	r3, r1
 800241e:	0899      	lsrs	r1, r3, #2
 8002420:	460b      	mov	r3, r1
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a5b      	subs	r3, r3, r1
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	b2db      	uxtb	r3, r3
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	38e38e39 	.word	0x38e38e39
 800243c:	51eb851f 	.word	0x51eb851f
 8002440:	24924925 	.word	0x24924925

08002444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e041      	b.n	80024da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe f98e 	bl	800078c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f000 fa70 	bl	8002968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d001      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e03a      	b.n	8002572 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_TIM_Base_Start_IT+0x98>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00e      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x58>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002526:	d009      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x58>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a14      	ldr	r2, [pc, #80]	; (8002580 <HAL_TIM_Base_Start_IT+0x9c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x58>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a13      	ldr	r2, [pc, #76]	; (8002584 <HAL_TIM_Base_Start_IT+0xa0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d111      	bne.n	8002560 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b06      	cmp	r3, #6
 800254c:	d010      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	e007      	b.n	8002570 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	40012c00 	.word	0x40012c00
 8002580:	40000400 	.word	0x40000400
 8002584:	40000800 	.word	0x40000800

08002588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d122      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d11b      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0202 	mvn.w	r2, #2
 80025b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f9b1 	bl	8002932 <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f9a4 	bl	8002920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f9b3 	bl	8002944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d122      	bne.n	8002638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d11b      	bne.n	8002638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0204 	mvn.w	r2, #4
 8002608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f987 	bl	8002932 <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f97a 	bl	8002920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f989 	bl	8002944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b08      	cmp	r3, #8
 8002644:	d122      	bne.n	800268c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b08      	cmp	r3, #8
 8002652:	d11b      	bne.n	800268c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0208 	mvn.w	r2, #8
 800265c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2204      	movs	r2, #4
 8002662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f95d 	bl	8002932 <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f950 	bl	8002920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f95f 	bl	8002944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b10      	cmp	r3, #16
 8002698:	d122      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d11b      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0210 	mvn.w	r2, #16
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2208      	movs	r2, #8
 80026b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f933 	bl	8002932 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f926 	bl	8002920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f935 	bl	8002944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d10e      	bne.n	800270c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d107      	bne.n	800270c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0201 	mvn.w	r2, #1
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fd ffc6 	bl	8000698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002716:	2b80      	cmp	r3, #128	; 0x80
 8002718:	d10e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b80      	cmp	r3, #128	; 0x80
 8002726:	d107      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fa77 	bl	8002c26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b40      	cmp	r3, #64	; 0x40
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d107      	bne.n	8002764 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8f9 	bl	8002956 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b20      	cmp	r3, #32
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b20      	cmp	r3, #32
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0220 	mvn.w	r2, #32
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fa42 	bl	8002c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_TIM_ConfigClockSource+0x18>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e0b3      	b.n	8002918 <HAL_TIM_ConfigClockSource+0x180>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e8:	d03e      	beq.n	8002868 <HAL_TIM_ConfigClockSource+0xd0>
 80027ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ee:	f200 8087 	bhi.w	8002900 <HAL_TIM_ConfigClockSource+0x168>
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f6:	f000 8085 	beq.w	8002904 <HAL_TIM_ConfigClockSource+0x16c>
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fe:	d87f      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x168>
 8002800:	2b70      	cmp	r3, #112	; 0x70
 8002802:	d01a      	beq.n	800283a <HAL_TIM_ConfigClockSource+0xa2>
 8002804:	2b70      	cmp	r3, #112	; 0x70
 8002806:	d87b      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x168>
 8002808:	2b60      	cmp	r3, #96	; 0x60
 800280a:	d050      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x116>
 800280c:	2b60      	cmp	r3, #96	; 0x60
 800280e:	d877      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x168>
 8002810:	2b50      	cmp	r3, #80	; 0x50
 8002812:	d03c      	beq.n	800288e <HAL_TIM_ConfigClockSource+0xf6>
 8002814:	2b50      	cmp	r3, #80	; 0x50
 8002816:	d873      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x168>
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d058      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x136>
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d86f      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x168>
 8002820:	2b30      	cmp	r3, #48	; 0x30
 8002822:	d064      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x156>
 8002824:	2b30      	cmp	r3, #48	; 0x30
 8002826:	d86b      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x168>
 8002828:	2b20      	cmp	r3, #32
 800282a:	d060      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x156>
 800282c:	2b20      	cmp	r3, #32
 800282e:	d867      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x168>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d05c      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x156>
 8002834:	2b10      	cmp	r3, #16
 8002836:	d05a      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002838:	e062      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6899      	ldr	r1, [r3, #8]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f000 f966 	bl	8002b1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800285c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	609a      	str	r2, [r3, #8]
      break;
 8002866:	e04e      	b.n	8002906 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6899      	ldr	r1, [r3, #8]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f000 f94f 	bl	8002b1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800288a:	609a      	str	r2, [r3, #8]
      break;
 800288c:	e03b      	b.n	8002906 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	461a      	mov	r2, r3
 800289c:	f000 f8c6 	bl	8002a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2150      	movs	r1, #80	; 0x50
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f91d 	bl	8002ae6 <TIM_ITRx_SetConfig>
      break;
 80028ac:	e02b      	b.n	8002906 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f000 f8e4 	bl	8002a88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2160      	movs	r1, #96	; 0x60
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f90d 	bl	8002ae6 <TIM_ITRx_SetConfig>
      break;
 80028cc:	e01b      	b.n	8002906 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 f8a6 	bl	8002a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2140      	movs	r1, #64	; 0x40
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f8fd 	bl	8002ae6 <TIM_ITRx_SetConfig>
      break;
 80028ec:	e00b      	b.n	8002906 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4619      	mov	r1, r3
 80028f8:	4610      	mov	r0, r2
 80028fa:	f000 f8f4 	bl	8002ae6 <TIM_ITRx_SetConfig>
        break;
 80028fe:	e002      	b.n	8002906 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002900:	bf00      	nop
 8002902:	e000      	b.n	8002906 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002904:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a29      	ldr	r2, [pc, #164]	; (8002a20 <TIM_Base_SetConfig+0xb8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00b      	beq.n	8002998 <TIM_Base_SetConfig+0x30>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002986:	d007      	beq.n	8002998 <TIM_Base_SetConfig+0x30>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <TIM_Base_SetConfig+0xbc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d003      	beq.n	8002998 <TIM_Base_SetConfig+0x30>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <TIM_Base_SetConfig+0xc0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d108      	bne.n	80029aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <TIM_Base_SetConfig+0xb8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00b      	beq.n	80029ca <TIM_Base_SetConfig+0x62>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b8:	d007      	beq.n	80029ca <TIM_Base_SetConfig+0x62>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <TIM_Base_SetConfig+0xbc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_Base_SetConfig+0x62>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <TIM_Base_SetConfig+0xc0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d108      	bne.n	80029dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <TIM_Base_SetConfig+0xb8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d103      	bne.n	8002a10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	615a      	str	r2, [r3, #20]
}
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40000400 	.word	0x40000400
 8002a28:	40000800 	.word	0x40000800

08002a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f023 0201 	bic.w	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f023 030a 	bic.w	r3, r3, #10
 8002a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	621a      	str	r2, [r3, #32]
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f023 0210 	bic.w	r2, r3, #16
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ab2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	031b      	lsls	r3, r3, #12
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ac4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	621a      	str	r2, [r3, #32]
}
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f043 0307 	orr.w	r3, r3, #7
 8002b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b087      	sub	sp, #28
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	021a      	lsls	r2, r3, #8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	609a      	str	r2, [r3, #8]
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e046      	b.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbc:	d009      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a10      	ldr	r2, [pc, #64]	; (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10c      	bne.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	40000400 	.word	0x40000400
 8002c10:	40000800 	.word	0x40000800

08002c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e03f      	b.n	8002cca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fd fdb8 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	; 0x24
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f829 	bl	8002cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d0e:	f023 030c 	bic.w	r3, r3, #12
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <UART_SetConfig+0x114>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d103      	bne.n	8002d44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d3c:	f7fe fe48 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	e002      	b.n	8002d4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d44:	f7fe fe30 	bl	80019a8 <HAL_RCC_GetPCLK1Freq>
 8002d48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	009a      	lsls	r2, r3, #2
 8002d54:	441a      	add	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	4a22      	ldr	r2, [pc, #136]	; (8002dec <UART_SetConfig+0x118>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	0119      	lsls	r1, r3, #4
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	009a      	lsls	r2, r3, #2
 8002d74:	441a      	add	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <UART_SetConfig+0x118>)
 8002d82:	fba3 0302 	umull	r0, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2064      	movs	r0, #100	; 0x64
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	3332      	adds	r3, #50	; 0x32
 8002d94:	4a15      	ldr	r2, [pc, #84]	; (8002dec <UART_SetConfig+0x118>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da0:	4419      	add	r1, r3
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009a      	lsls	r2, r3, #2
 8002dac:	441a      	add	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <UART_SetConfig+0x118>)
 8002dba:	fba3 0302 	umull	r0, r3, r3, r2
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2064      	movs	r0, #100	; 0x64
 8002dc2:	fb00 f303 	mul.w	r3, r0, r3
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	3332      	adds	r3, #50	; 0x32
 8002dcc:	4a07      	ldr	r2, [pc, #28]	; (8002dec <UART_SetConfig+0x118>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	440a      	add	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40013800 	.word	0x40013800
 8002dec:	51eb851f 	.word	0x51eb851f

08002df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002df0:	b084      	sub	sp, #16
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	f107 0014 	add.w	r0, r7, #20
 8002dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	b004      	add	sp, #16
 8002e0e:	4770      	bx	lr

08002e10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e18:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002e1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	f107 0014 	add.w	r0, r7, #20
 8002e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	b004      	add	sp, #16
 8002e9a:	4770      	bx	lr

08002e9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <__libc_init_array>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	2600      	movs	r6, #0
 8002eb4:	4d0c      	ldr	r5, [pc, #48]	; (8002ee8 <__libc_init_array+0x38>)
 8002eb6:	4c0d      	ldr	r4, [pc, #52]	; (8002eec <__libc_init_array+0x3c>)
 8002eb8:	1b64      	subs	r4, r4, r5
 8002eba:	10a4      	asrs	r4, r4, #2
 8002ebc:	42a6      	cmp	r6, r4
 8002ebe:	d109      	bne.n	8002ed4 <__libc_init_array+0x24>
 8002ec0:	f000 f822 	bl	8002f08 <_init>
 8002ec4:	2600      	movs	r6, #0
 8002ec6:	4d0a      	ldr	r5, [pc, #40]	; (8002ef0 <__libc_init_array+0x40>)
 8002ec8:	4c0a      	ldr	r4, [pc, #40]	; (8002ef4 <__libc_init_array+0x44>)
 8002eca:	1b64      	subs	r4, r4, r5
 8002ecc:	10a4      	asrs	r4, r4, #2
 8002ece:	42a6      	cmp	r6, r4
 8002ed0:	d105      	bne.n	8002ede <__libc_init_array+0x2e>
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
 8002ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed8:	4798      	blx	r3
 8002eda:	3601      	adds	r6, #1
 8002edc:	e7ee      	b.n	8002ebc <__libc_init_array+0xc>
 8002ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee2:	4798      	blx	r3
 8002ee4:	3601      	adds	r6, #1
 8002ee6:	e7f2      	b.n	8002ece <__libc_init_array+0x1e>
 8002ee8:	08002fbc 	.word	0x08002fbc
 8002eec:	08002fbc 	.word	0x08002fbc
 8002ef0:	08002fbc 	.word	0x08002fbc
 8002ef4:	08002fc0 	.word	0x08002fc0

08002ef8 <memset>:
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4402      	add	r2, r0
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d100      	bne.n	8002f02 <memset+0xa>
 8002f00:	4770      	bx	lr
 8002f02:	f803 1b01 	strb.w	r1, [r3], #1
 8002f06:	e7f9      	b.n	8002efc <memset+0x4>

08002f08 <_init>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr

08002f14 <_fini>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr
